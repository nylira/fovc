{"version":3,"sources":["webpack:///static/js/app.6f90dd1c89c94d7d6ddf.js","webpack:///./src/main.js","webpack:///./src/components/Countdown.vue","webpack:///./src/components/DataBundle.vue","webpack:///./src/components/CosmosHub.vue","webpack:///App.vue","webpack:///CosmosHub.vue","webpack:///CosmosHubSmall.vue","webpack:///Countdown.vue","webpack:///DataBundle.vue","webpack:///MultipleHubs.vue","webpack:///Zone.vue","webpack:///FAQ.vue","webpack:///Index.vue","webpack:///Plan.vue","webpack:///WhitePaper.vue","webpack:///./~/moment/locale ^\\.\\/.*$","webpack:///./src/App.vue?d818","webpack:///./src/components/CosmosHub.vue?c1d2","webpack:///./src/components/Zone.vue?33d3","webpack:///./src/components/Countdown.vue?9a3d","webpack:///./src/components/site/Header.vue?8504","webpack:///./src/components/pages/Plan.vue?d836","webpack:///./src/components/DataBundle.vue?e878","webpack:///./src/components/MultipleHubs.vue?7501","webpack:///./src/components/pages/FAQ.vue?e645","webpack:///./src/components/site/Footer.vue?3ee5","webpack:///./src/components/pages/Index.vue?48e5","webpack:///./src/components/Arrow.vue?6b65","webpack:///./src/components/SectionCover.vue?95a0","webpack:///./src/components/CosmosHubSmall.vue?2589","webpack:///./src/components/pages/WhitePaper.vue?3ce2","webpack:///./src/App.vue","webpack:///./src/components/Arrow.vue","webpack:///./src/components/CosmosHubSmall.vue","webpack:///./src/components/MultipleHubs.vue","webpack:///./src/components/SectionCover.vue","webpack:///./src/components/Zone.vue","webpack:///./src/components/pages/FAQ.vue","webpack:///./src/components/pages/Index.vue","webpack:///./src/components/pages/Plan.vue","webpack:///./src/components/pages/WhitePaper.vue","webpack:///./src/components/site/Footer.vue","webpack:///./src/components/site/Header.vue"],"names":["webpackJsonp","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_vue","_vue2","_vueRouter","_vueRouter2","_App","_App2","_Index","_Index2","_WhitePaper","_WhitePaper2","_Plan","_Plan2","_FAQ","_FAQ2","use","config","debug","component","router","history","beforeEach","window","scrollTo","map","/","/whitepaper","/plan","/faq","start","__vue_script__","__vue_template__","options","template","Object","defineProperty","value","_Header","_Header2","_Footer","_Footer2","components","SiteHeader","SiteFooter","_DataBundle","_DataBundle2","DataBundle","props","_moment","_moment2","_countdown","_countdown2","data","countdown","countdownFunction","methods","updateCountdown","this","toString","ready","self","setInterval","smallMult","hexString","_CosmosHubSmall","_CosmosHubSmall2","CosmosHub","spokesOne","key","color","spokesTwo","_CosmosHub","_CosmosHub2","_Arrow","_Arrow2","Arrow","_Countdown","_Countdown2","Countdown","_MultipleHubs","_MultipleHubs2","_SectionCover","_SectionCover2","_Zone","_Zone2","MultipleHubs","SectionCover","Zone","evmSpokes","distSpokes","twoOneSpokes","twoTwoSpokes","webpackContext","req","webpackContextResolve","Error","./af","./af.js","./ar","./ar-ma","./ar-ma.js","./ar-sa","./ar-sa.js","./ar-tn","./ar-tn.js","./ar.js","./az","./az.js","./be","./be.js","./bg","./bg.js","./bn","./bn.js","./bo","./bo.js","./br","./br.js","./bs","./bs.js","./ca","./ca.js","./cs","./cs.js","./cv","./cv.js","./cy","./cy.js","./da","./da.js","./de","./de-at","./de-at.js","./de.js","./dv","./dv.js","./el","./el.js","./en-au","./en-au.js","./en-ca","./en-ca.js","./en-gb","./en-gb.js","./en-ie","./en-ie.js","./en-nz","./en-nz.js","./eo","./eo.js","./es","./es-do","./es-do.js","./es.js","./et","./et.js","./eu","./eu.js","./fa","./fa.js","./fi","./fi.js","./fo","./fo.js","./fr","./fr-ca","./fr-ca.js","./fr-ch","./fr-ch.js","./fr.js","./fy","./fy.js","./gd","./gd.js","./gl","./gl.js","./he","./he.js","./hi","./hi.js","./hr","./hr.js","./hu","./hu.js","./hy-am","./hy-am.js","./id","./id.js","./is","./is.js","./it","./it.js","./ja","./ja.js","./jv","./jv.js","./ka","./ka.js","./kk","./kk.js","./km","./km.js","./ko","./ko.js","./ky","./ky.js","./lb","./lb.js","./lo","./lo.js","./lt","./lt.js","./lv","./lv.js","./me","./me.js","./mk","./mk.js","./ml","./ml.js","./mr","./mr.js","./ms","./ms-my","./ms-my.js","./ms.js","./my","./my.js","./nb","./nb.js","./ne","./ne.js","./nl","./nl.js","./nn","./nn.js","./pa-in","./pa-in.js","./pl","./pl.js","./pt","./pt-br","./pt-br.js","./pt.js","./ro","./ro.js","./ru","./ru.js","./se","./se.js","./si","./si.js","./sk","./sk.js","./sl","./sl.js","./sq","./sq.js","./sr","./sr-cyrl","./sr-cyrl.js","./sr.js","./ss","./ss.js","./sv","./sv.js","./sw","./sw.js","./ta","./ta.js","./te","./te.js","./th","./th.js","./tl-ph","./tl-ph.js","./tlh","./tlh.js","./tr","./tr.js","./tzl","./tzl.js","./tzm","./tzm-latn","./tzm-latn.js","./tzm.js","./uk","./uk.js","./uz","./uz.js","./vi","./vi.js","./x-pseudo","./x-pseudo.js","./zh-cn","./zh-cn.js","./zh-tw","./zh-tw.js","keys","resolve","id"],"mappings":"AAAAA,cAAc,EAAE,IAEV,SAASC,EAAQC,EAASC,GAE/B,YA8BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GClCxF,GAAAG,GAAAL,EAAA,KDQKM,EAAQL,EAAuBI,GCPpCE,EAAAP,EAAA,KDWKQ,EAAcP,EAAuBM,GCF1CE,EAAAT,EAAA,KDMKU,EAAQT,EAAuBQ,GCLpCE,EAAAX,EAAA,KDSKY,EAAUX,EAAuBU,GCRtCE,EAAAb,EAAA,KDYKc,EAAeb,EAAuBY,GCX3CE,EAAAf,EAAA,KDeKgB,EAASf,EAAuBc,GCdrCE,EAAAjB,EAAA,KDkBKkB,EAAQjB,EAAuBgB,EC5BpCX,cAAIa,IAAJX,cAGAF,aAAIc,OAAOC,OAAQ,EAUnBf,aAAIgB,UAAU,aAAdV,cACAN,aAAIgB,UAAU,kBAAdR,cACAR,aAAIgB,UAAU,YAAdR,cACAR,aAAIgB,UAAU,WAAdJ,aAEA,IAAIK,GAAS,GAAAf,eAAegB,SAAS,GAGrCD,GAAOE,WAAW,WAChBC,OAAOC,SAAS,EAAG,KAGrBJ,EAAOK,KACLC,KAAMP,UAAAV,cACNkB,eAAgBR,UAAAR,cAChBiB,SAAUT,UAAAN,cACVgB,QAASV,UAAAJ,gBAOXK,EAAOU,MAAPvB,aAAkB,QDqBX,CAED,SAASZ,EAAQC,EAASC,GE/DhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IFuEzF,SAASrC,EAAQC,EAASC,GG9EhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IHqFxrC,EAAQC,EAASC,GInMhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IJ2MzF,SAASrC,EAAQC,EAASC,GAE/B,YAcA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAZvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GKhNV,IAAAC,GAAAzC,EAAA,KLqNK0C,EAAWzC,EAAuBwC,GKlNvCE,EAAA3C,EAAA,KLsNK4C,EAAW3C,EAAuB0C,EAItC5C,eACE8C,YKxNHC,WAAAJ,aAEAK,WAAAH,gBL8NM,SAAS9C,EAAQC,GAEtB,YAEAuC,QAAOC,eAAexC,EAAS,cAC7ByC,OAAO,IAETzC,iBAIK,SAASD,EAAQC,EAASC,GAE/B,YAUA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GARvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GM/OV,IAAAQ,GAAAhD,EAAA,GNoPKiD,EAAehD,EAAuB+C,EAI1CjD,eACE8C,YMrPHK,WAAAD,cNwPGE,OAAQ,SMvPX,aN4PM,SAASrD,EAAQC,EAASC,GAE/B,YAUA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GARvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GOtQV,IAAAQ,GAAAhD,EAAA,GP2QKiD,EAAehD,EAAuB+C,EAI1CjD,eACE8C,YO5QHK,WAAAD,cP+QGE,OAAQ,SAAU,WO9QrB,iBPmRM,SAASrD,EAAQC,EAASC,GAE/B,YAgBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAdvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GQ/RV,IAAAY,GAAApD,EAAA,GRoSKqD,EAAWpD,EAAuBmD,GQnSvCE,EAAAtD,EAAA,GRuSKuD,EAActD,EAAuBqD,EQrS1CtD,GAAA,KR2SCD,cACEyD,KAAM,WACJ,OACEC,UQ1SP,GAEAC,kBAAAH,eR6SGI,SACEC,gBAAiB,WACfC,KAAKJ,WAAY,EAAIJ,cAAkB,aAAaI,YQ3S3DK,aR8SGC,MAAO,WACL,GAAIC,GQ3STH,IR4SKI,aAAY,WACVD,EQ3SPJ,mBACA,QRiTM,SAAS9D,EAAQC,GAEtB,YAEAuC,QAAOC,eAAexC,EAAS,cAC7ByC,OAAO,IAETzC,cACEyD,KAAM,WACJ,OACEU,US3UP,GT4UOC,US1UP,uETiVM,SAASrE,EAAQC,EAASC,GAE/B,YAcA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAZvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GU/VV,IAAA4B,GAAApE,EAAA,KVoWKqE,EAAmBpE,EAAuBmE,GUjW/CpB,EAAAhD,EAAA,GVqWKiD,EAAehD,EAAuB+C,EAI1CjD,eACE8C,YUvWHyB,UAAAD,aAEAnB,WAAAD,cVyWGO,KAAM,WACJ,OACEe,YUxWPC,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,cAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MAGA,eVkWOC,YUjWPF,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MAEA,cAAAD,IAAA,aAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MAGA,kBVgWM,SAAS3E,EAAQC,GAEtB,cAIK,SAASD,EAAQC,EAASC,GAE/B,YAkBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAhBvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GW3XV,IAAAmC,GAAA3E,EAAA,KXgYK4E,EAAc3E,EAAuB0E,GW/X1C3B,EAAAhD,EAAA,GXmYKiD,EAAehD,EAAuB+C,GWhY3C6B,EAAA7E,EAAA,KXoYK8E,EAAU7E,EAAuB4E,EAIrC9E,eACE8C,YWtYHyB,UAAAM,aACA1B,WAAAD,aAEA8B,MAAAD,cXwYG3B,OWvYH,UX4YM,SAASrD,EAAQC,EAASC,GAE/B,YAUA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GARvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GYvKV,IAAAwC,GAAAhF,EAAA,GZ4KKiF,EAAchF,EAAuB+E,EAIzCjF,eACE8C,YY7KHqC,UAAAD,gBZoLM,SAASnF,EAAQC,EAASC,GAE/B,YA0BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAxBvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GazYV,IAAAwC,GAAAhF,EAAA,Gb8YKiF,EAAchF,EAAuB+E,Ga7Y1CL,EAAA3E,EAAA,KbiZK4E,EAAc3E,EAAuB0E,GahZ1CQ,EAAAnF,EAAA,KboZKoF,EAAiBnF,EAAuBkF,GanZ7CE,EAAArF,EAAA,KbuZKsF,EAAiBrF,EAAuBoF,GapZ7CE,EAAAvF,EAAA,KbwZKwF,EAASvF,EAAuBsF,EAIpCxF,eACE8C,Ya1ZHyB,UAAAM,aACAM,UAAAD,aACAQ,aAAAL,aACAM,aAAAJ,aAEAK,KAAAH,cb4ZGhC,KAAM,WACJ,OACEoC,Ya3ZPpB,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,cAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MAEA,cbqZOoB,aapZPrB,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,cAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,YAAAhC,MAAA,OAAAiC,MAEA,eb8YOqB,ea7YPtB,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,cAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,YAAAhC,MAAA,OAAAiC,MAEA,ebuYOsB,eatYPvB,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,YAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,cAAAhC,MAAA,MAAAiC,MACA,cAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,aAAAhC,MAAA,OAAAiC,MACA,eAAAD,IAAA,YAAAhC,MAAA,OAAAiC,MAGA,mBbqYM,SAAS3E,EAAQC,EAASC,GAE/B,YAUA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GARvFoC,OAAOC,eAAexC,EAAS,cAC7ByC,OAAO,GcnUV,IAAAwC,GAAAhF,EAAA,GdwUKiF,EAAchF,EAAuB+E,EAIzCjF,eACE8C,YczUHqC,UAAAD,gBdgVM,SAASnF,EAAQC,EAASC,GAE/B,Yew7BD,SAAAC,GAAAC,GAAA,MAAAA,MAAAC,WAAAD,GAAAE,UAAAF,Gfx7BcoC,OAAOC,eAAexC,EAAQ,cAAcyC,OAAM,Gew7BhE,IAAAwC,GAAAhF,EAAA,GAAAiF,EAAAhF,EAAA+E,EAAAjF,eACA8C,YAGAqC,UAAAD,gBfx7BM,SAASnF,EAAQC,GAEtB,cAIK,SAASD,EAAQC,GAEtB,cAIK,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAMjB,SAASD,EAAQC,KAKd,CAEH,SAASD,EAAQC,EAASC,GgB1ahC,QAAAgG,GAAAC,GACA,MAAAjG,GAAAkG,EAAAD,IAEA,QAAAC,GAAAD,GACA,MAAArE,GAAAqE,IAAA,WAAiC,SAAAE,OAAA,uBAAAF,EAAA,SAhNjC,GAAArE,IACAwE,OAAA,EACAC,UAAA,EACAC,OAAA,EACAC,UAAA,EACAC,aAAA,EACAC,UAAA,EACAC,aAAA,EACAC,UAAA,EACAC,aAAA,EACAC,UAAA,EACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,aAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,UAAA,GACAC,aAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,UAAA,GACAC,aAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,aAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,YAAA,GACAC,eAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,OAAA,GACAC,UAAA,GACAC,UAAA,GACAC,aAAA,GACAC,QAAA,GACAC,WAAA,GACAC,OAAA,GACAC,UAAA,GACAC,QAAA,GACAC,WAAA,GACAC,QAAA,GACAC,aAAA,GACAC,gBAAA,GACAC,WAAA,GACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,OAAA,IACAC,UAAA,IACAC,aAAA,IACAC,gBAAA,IACAC,UAAA,IACAC,aAAA,IACAC,UAAA,IACAC,aAAA,IAQA7M,GAAA8M,KAAA,WACA,MAAAxQ,QAAAwQ,KAAAlR,IAEAoE,EAAA+M,QAAA7M,EACApG,EAAAC,QAAAiG,EACAA,EAAAgN,GAAA,KhB6nBM,SAASlT,EAAQC,GiBp1BvBD,EAAAC,QAAA,yFjB01BM,SAASD,EAAQC,GkB11BvBD,EAAAC,QAAA,mOlBg2BM,SAASD,EAAQC,GmBh2BvBD,EAAAC,QAAA,goBnBs2BM,SAASD,EAAQC,GoBt2BvBD,EAAAC,QAAA,4TpB42BM,SAASD,EAAQC,GqB52BvBD,EAAAC,QAAA,kVrBk3BM,SAASD,EAAQC,GsBl3BvBD,EAAAC,QAAA,onUtBw3BM,SAASD,EAAQC,GuBx3BvBD,EAAAC,QAAA,2pCvB83BM,SAASD,EAAQC,GwB93BvBD,EAAAC,QAAA,gTxBo4BM,SAASD,EAAQC,GyBp4BvBD,EAAAC,QAAA;EzB04BM,SAASD,EAAQC,G0B14BvBD,EAAAC,QAAA,8F1Bg5BM,SAASD,EAAQC,G2Bh5BvBD,EAAAC,QAAA,gnF3Bs5BM,SAASD,EAAQC,G4Bt5BvBD,EAAAC,QAAA,2hB5B45BM,SAASD,EAAQC,G6B55BvBD,EAAAC,QAAA,kM7Bk6BM,SAASD,EAAQC,G8Bl6BvBD,EAAAC,QAAA,8X9Bw6BM,SAASD,EAAQC,G+Bx6BvBD,EAAAC,QAAA;E/B86BM,SAASD,EAAQC,EAASC,GgC96BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IhCs7BzF,SAASrC,EAAQC,EAASC,GiC77BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IjCq8BzF,SAASrC,EAAQC,EAASC,GkC58BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IlCo9BzF,SAASrC,EAAQC,EAASC,GmC39BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,InCm+BzF,SAASrC,EAAQC,EAASC,GoC1+BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IpCk/BzF,SAASrC,EAAQC,EAASC,GqCz/BhC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IrCigCzF,SAASrC,EAAQC,EAASC,GsCxgChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,ItCghCzF,SAASrC,EAAQC,EAASC,GuCvhChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IvC+hCzF,SAASrC,EAAQC,EAASC,GwCtiChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IxC8iCzF,SAASrC,EAAQC,EAASC,GyCrjChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,IzC6jCzF,SAASrC,EAAQC,EAASC,G0CpkChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF,I1C4kCzF,SAASrC,EAAQC,EAASC,G2CnlChC,GAAAkC,GAAAC,CACAnC,GAAA,KACAkC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,KACAF,EAAAC,QAAAmC,MACApC,EAAAC,QAAAI,aAAAL,EAAAC,QAAAD,EAAAC,QAAAD,YACAqC,KACA,kBAAArC,GAAAC,QAAAD,EAAAC,QAAAqC,UAAAtC,EAAAC,QAAAqC,YAA+FtC,EAAAC,SAAAsC,SAAAF","file":"static/js/app.6f90dd1c89c94d7d6ddf.js","sourcesContent":["webpackJsonp([2,0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _vue = __webpack_require__(167);\n\t\n\tvar _vue2 = _interopRequireDefault(_vue);\n\t\n\tvar _vueRouter = __webpack_require__(166);\n\t\n\tvar _vueRouter2 = _interopRequireDefault(_vueRouter);\n\t\n\tvar _App = __webpack_require__(154);\n\t\n\tvar _App2 = _interopRequireDefault(_App);\n\t\n\tvar _Index = __webpack_require__(161);\n\t\n\tvar _Index2 = _interopRequireDefault(_Index);\n\t\n\tvar _WhitePaper = __webpack_require__(163);\n\t\n\tvar _WhitePaper2 = _interopRequireDefault(_WhitePaper);\n\t\n\tvar _Plan = __webpack_require__(162);\n\t\n\tvar _Plan2 = _interopRequireDefault(_Plan);\n\t\n\tvar _FAQ = __webpack_require__(160);\n\t\n\tvar _FAQ2 = _interopRequireDefault(_FAQ);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t_vue2.default.use(_vueRouter2.default);\n\t\n\t_vue2.default.config.debug = true;\n\t\n\t_vue2.default.component('page-index', _Index2.default);\n\t_vue2.default.component('page-whitepaper', _WhitePaper2.default);\n\t_vue2.default.component('page-plan', _WhitePaper2.default);\n\t_vue2.default.component('page-faq', _FAQ2.default);\n\t\n\tvar router = new _vueRouter2.default({ history: true });\n\t\n\trouter.beforeEach(function () {\n\t  window.scrollTo(0, 0);\n\t});\n\t\n\trouter.map({\n\t  '/': { component: _Index2.default },\n\t  '/whitepaper': { component: _WhitePaper2.default },\n\t  '/plan': { component: _Plan2.default },\n\t  '/faq': { component: _FAQ2.default }\n\t});\n\t\n\trouter.start(_App2.default, 'app');\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(125)\n\t__vue_script__ = __webpack_require__(111)\n\t__vue_template__ = __webpack_require__(142)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(128)\n\t__vue_script__ = __webpack_require__(112)\n\t__vue_template__ = __webpack_require__(145)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */,\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */,\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */,\n/* 103 */,\n/* 104 */,\n/* 105 */,\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(123)\n\t__vue_script__ = __webpack_require__(109)\n\t__vue_template__ = __webpack_require__(140)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Header = __webpack_require__(165);\n\t\n\tvar _Header2 = _interopRequireDefault(_Header);\n\t\n\tvar _Footer = __webpack_require__(164);\n\t\n\tvar _Footer2 = _interopRequireDefault(_Footer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    SiteHeader: _Header2.default,\n\t    SiteFooter: _Footer2.default\n\t  }\n\t};\n\n/***/ },\n/* 108 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {};\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _DataBundle = __webpack_require__(3);\n\t\n\tvar _DataBundle2 = _interopRequireDefault(_DataBundle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    DataBundle: _DataBundle2.default\n\t  },\n\t  props: ['spokes', 'hubName']\n\t};\n\n/***/ },\n/* 110 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _DataBundle = __webpack_require__(3);\n\t\n\tvar _DataBundle2 = _interopRequireDefault(_DataBundle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    DataBundle: _DataBundle2.default\n\t  },\n\t  props: ['spokes', 'hub-name', 'light-color']\n\t};\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _moment = __webpack_require__(1);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _countdown = __webpack_require__(4);\n\t\n\tvar _countdown2 = _interopRequireDefault(_countdown);\n\t\n\t__webpack_require__(137);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  data: function data() {\n\t    return {\n\t      countdown: '',\n\t      countdownFunction: _countdown2.default\n\t    };\n\t  },\n\t\n\t  methods: {\n\t    updateCountdown: function updateCountdown() {\n\t      this.countdown = (0, _moment2.default)('2016-10-8').countdown().toString();\n\t    }\n\t  },\n\t  ready: function ready() {\n\t    var self = this;\n\t    setInterval(function () {\n\t      self.updateCountdown();\n\t    }, 1000);\n\t  }\n\t};\n\n/***/ },\n/* 112 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  data: function data() {\n\t    return {\n\t      smallMult: 0.3,\n\t      hexString: '2b12fcf1b09288fcaff797d71e950e71ae42b91e8bdb2304758dfcffc2b620e3'\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _CosmosHubSmall = __webpack_require__(156);\n\t\n\tvar _CosmosHubSmall2 = _interopRequireDefault(_CosmosHubSmall);\n\t\n\tvar _DataBundle = __webpack_require__(3);\n\t\n\tvar _DataBundle2 = _interopRequireDefault(_DataBundle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    CosmosHub: _CosmosHubSmall2.default,\n\t    DataBundle: _DataBundle2.default\n\t  },\n\t  data: function data() {\n\t    return {\n\t      spokesOne: [{ key: 'spoke-one', value: 'BTC', color: 'btc-color' }, { key: 'spoke-two', value: 'ETH', color: 'eth-color' }, { key: 'spoke-three', value: 'XMR', color: 'xmr-color' }, { key: 'spoke-four', value: 'MAID', color: 'maid-color' }, { key: 'spoke-five', value: 'DOGE', color: 'doge-color' }],\n\t      spokesTwo: [{ key: 'spoke-one', value: 'EVM', color: 'eth-color' }, { key: 'spoke-two', value: 'EVM', color: 'eth-color' }, { key: 'spoke-four', value: 'EVM', color: 'eth-color' }, { key: 'spoke-five', value: 'EVM', color: 'eth-color' }, { key: 'spoke-six', value: 'EVM', color: 'eth-color' }]\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 114 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _CosmosHub = __webpack_require__(106);\n\t\n\tvar _CosmosHub2 = _interopRequireDefault(_CosmosHub);\n\t\n\tvar _DataBundle = __webpack_require__(3);\n\t\n\tvar _DataBundle2 = _interopRequireDefault(_DataBundle);\n\t\n\tvar _Arrow = __webpack_require__(155);\n\t\n\tvar _Arrow2 = _interopRequireDefault(_Arrow);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    CosmosHub: _CosmosHub2.default,\n\t    DataBundle: _DataBundle2.default,\n\t    Arrow: _Arrow2.default\n\t  },\n\t  props: ['type']\n\t};\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Countdown = __webpack_require__(2);\n\t\n\tvar _Countdown2 = _interopRequireDefault(_Countdown);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    Countdown: _Countdown2.default\n\t  }\n\t};\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Countdown = __webpack_require__(2);\n\t\n\tvar _Countdown2 = _interopRequireDefault(_Countdown);\n\t\n\tvar _CosmosHub = __webpack_require__(106);\n\t\n\tvar _CosmosHub2 = _interopRequireDefault(_CosmosHub);\n\t\n\tvar _MultipleHubs = __webpack_require__(157);\n\t\n\tvar _MultipleHubs2 = _interopRequireDefault(_MultipleHubs);\n\t\n\tvar _SectionCover = __webpack_require__(158);\n\t\n\tvar _SectionCover2 = _interopRequireDefault(_SectionCover);\n\t\n\tvar _Zone = __webpack_require__(159);\n\t\n\tvar _Zone2 = _interopRequireDefault(_Zone);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    CosmosHub: _CosmosHub2.default,\n\t    Countdown: _Countdown2.default,\n\t    MultipleHubs: _MultipleHubs2.default,\n\t    SectionCover: _SectionCover2.default,\n\t    Zone: _Zone2.default\n\t  },\n\t  data: function data() {\n\t    return {\n\t      evmSpokes: [{ key: 'spoke-one', value: 'EVM', color: 'eth-color' }, { key: 'spoke-two', value: 'EVM', color: 'eth-color' }, { key: 'spoke-three', value: 'EVM', color: 'eth-color' }, { key: 'spoke-four', value: 'EVM', color: 'eth-color' }, { key: 'spoke-five', value: 'EVM', color: 'eth-color' }, { key: 'spoke-six', value: 'EVM', color: 'eth-color' }],\n\t      distSpokes: [{ key: 'spoke-one', value: 'BTC', color: 'btc-color' }, { key: 'spoke-two', value: 'ETH', color: 'eth-color' }, { key: 'spoke-three', value: 'XMR', color: 'xmr-color' }, { key: 'spoke-four', value: 'MAID', color: 'maid-color' }, { key: 'spoke-five', value: 'DOGE', color: 'doge-color' }, { key: 'spoke-six', value: 'DASH', color: 'dash-color' }],\n\t      twoOneSpokes: [{ key: 'spoke-one', value: 'BTC', color: 'btc-color' }, { key: 'spoke-two', value: 'ETH', color: 'eth-color' }, { key: 'spoke-three', value: 'XMR', color: 'xmr-color' }, { key: 'spoke-four', value: 'MAID', color: 'maid-color' }, { key: 'spoke-five', value: 'DOGE', color: 'doge-color' }, { key: 'spoke-six', value: 'DASH', color: 'dash-color' }],\n\t      twoTwoSpokes: [{ key: 'spoke-one', value: 'BTC', color: 'btc-color' }, { key: 'spoke-two', value: 'ETH', color: 'eth-color' }, { key: 'spoke-three', value: 'XMR', color: 'xmr-color' }, { key: 'spoke-four', value: 'MAID', color: 'maid-color' }, { key: 'spoke-five', value: 'DOGE', color: 'doge-color' }, { key: 'spoke-six', value: 'DASH', color: 'dash-color' }]\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 118 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _Countdown = __webpack_require__(2);\n\t\n\tvar _Countdown2 = _interopRequireDefault(_Countdown);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  components: {\n\t    Countdown: _Countdown2.default\n\t  }\n\t};\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _Countdown=__webpack_require__(2);var _Countdown2=_interopRequireDefault(_Countdown);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default={components:{Countdown:_Countdown2.default}};\n\n/***/ },\n/* 120 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n/***/ },\n/* 121 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n/***/ },\n/* 122 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 123 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 124 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 125 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 126 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 127 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 128 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 129 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 130 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 131 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 132 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 133 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 134 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 135 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 136 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 137 */,\n/* 138 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./af\": 5,\n\t\t\"./af.js\": 5,\n\t\t\"./ar\": 9,\n\t\t\"./ar-ma\": 6,\n\t\t\"./ar-ma.js\": 6,\n\t\t\"./ar-sa\": 7,\n\t\t\"./ar-sa.js\": 7,\n\t\t\"./ar-tn\": 8,\n\t\t\"./ar-tn.js\": 8,\n\t\t\"./ar.js\": 9,\n\t\t\"./az\": 10,\n\t\t\"./az.js\": 10,\n\t\t\"./be\": 11,\n\t\t\"./be.js\": 11,\n\t\t\"./bg\": 12,\n\t\t\"./bg.js\": 12,\n\t\t\"./bn\": 13,\n\t\t\"./bn.js\": 13,\n\t\t\"./bo\": 14,\n\t\t\"./bo.js\": 14,\n\t\t\"./br\": 15,\n\t\t\"./br.js\": 15,\n\t\t\"./bs\": 16,\n\t\t\"./bs.js\": 16,\n\t\t\"./ca\": 17,\n\t\t\"./ca.js\": 17,\n\t\t\"./cs\": 18,\n\t\t\"./cs.js\": 18,\n\t\t\"./cv\": 19,\n\t\t\"./cv.js\": 19,\n\t\t\"./cy\": 20,\n\t\t\"./cy.js\": 20,\n\t\t\"./da\": 21,\n\t\t\"./da.js\": 21,\n\t\t\"./de\": 23,\n\t\t\"./de-at\": 22,\n\t\t\"./de-at.js\": 22,\n\t\t\"./de.js\": 23,\n\t\t\"./dv\": 24,\n\t\t\"./dv.js\": 24,\n\t\t\"./el\": 25,\n\t\t\"./el.js\": 25,\n\t\t\"./en-au\": 26,\n\t\t\"./en-au.js\": 26,\n\t\t\"./en-ca\": 27,\n\t\t\"./en-ca.js\": 27,\n\t\t\"./en-gb\": 28,\n\t\t\"./en-gb.js\": 28,\n\t\t\"./en-ie\": 29,\n\t\t\"./en-ie.js\": 29,\n\t\t\"./en-nz\": 30,\n\t\t\"./en-nz.js\": 30,\n\t\t\"./eo\": 31,\n\t\t\"./eo.js\": 31,\n\t\t\"./es\": 33,\n\t\t\"./es-do\": 32,\n\t\t\"./es-do.js\": 32,\n\t\t\"./es.js\": 33,\n\t\t\"./et\": 34,\n\t\t\"./et.js\": 34,\n\t\t\"./eu\": 35,\n\t\t\"./eu.js\": 35,\n\t\t\"./fa\": 36,\n\t\t\"./fa.js\": 36,\n\t\t\"./fi\": 37,\n\t\t\"./fi.js\": 37,\n\t\t\"./fo\": 38,\n\t\t\"./fo.js\": 38,\n\t\t\"./fr\": 41,\n\t\t\"./fr-ca\": 39,\n\t\t\"./fr-ca.js\": 39,\n\t\t\"./fr-ch\": 40,\n\t\t\"./fr-ch.js\": 40,\n\t\t\"./fr.js\": 41,\n\t\t\"./fy\": 42,\n\t\t\"./fy.js\": 42,\n\t\t\"./gd\": 43,\n\t\t\"./gd.js\": 43,\n\t\t\"./gl\": 44,\n\t\t\"./gl.js\": 44,\n\t\t\"./he\": 45,\n\t\t\"./he.js\": 45,\n\t\t\"./hi\": 46,\n\t\t\"./hi.js\": 46,\n\t\t\"./hr\": 47,\n\t\t\"./hr.js\": 47,\n\t\t\"./hu\": 48,\n\t\t\"./hu.js\": 48,\n\t\t\"./hy-am\": 49,\n\t\t\"./hy-am.js\": 49,\n\t\t\"./id\": 50,\n\t\t\"./id.js\": 50,\n\t\t\"./is\": 51,\n\t\t\"./is.js\": 51,\n\t\t\"./it\": 52,\n\t\t\"./it.js\": 52,\n\t\t\"./ja\": 53,\n\t\t\"./ja.js\": 53,\n\t\t\"./jv\": 54,\n\t\t\"./jv.js\": 54,\n\t\t\"./ka\": 55,\n\t\t\"./ka.js\": 55,\n\t\t\"./kk\": 56,\n\t\t\"./kk.js\": 56,\n\t\t\"./km\": 57,\n\t\t\"./km.js\": 57,\n\t\t\"./ko\": 58,\n\t\t\"./ko.js\": 58,\n\t\t\"./ky\": 59,\n\t\t\"./ky.js\": 59,\n\t\t\"./lb\": 60,\n\t\t\"./lb.js\": 60,\n\t\t\"./lo\": 61,\n\t\t\"./lo.js\": 61,\n\t\t\"./lt\": 62,\n\t\t\"./lt.js\": 62,\n\t\t\"./lv\": 63,\n\t\t\"./lv.js\": 63,\n\t\t\"./me\": 64,\n\t\t\"./me.js\": 64,\n\t\t\"./mk\": 65,\n\t\t\"./mk.js\": 65,\n\t\t\"./ml\": 66,\n\t\t\"./ml.js\": 66,\n\t\t\"./mr\": 67,\n\t\t\"./mr.js\": 67,\n\t\t\"./ms\": 69,\n\t\t\"./ms-my\": 68,\n\t\t\"./ms-my.js\": 68,\n\t\t\"./ms.js\": 69,\n\t\t\"./my\": 70,\n\t\t\"./my.js\": 70,\n\t\t\"./nb\": 71,\n\t\t\"./nb.js\": 71,\n\t\t\"./ne\": 72,\n\t\t\"./ne.js\": 72,\n\t\t\"./nl\": 73,\n\t\t\"./nl.js\": 73,\n\t\t\"./nn\": 74,\n\t\t\"./nn.js\": 74,\n\t\t\"./pa-in\": 75,\n\t\t\"./pa-in.js\": 75,\n\t\t\"./pl\": 76,\n\t\t\"./pl.js\": 76,\n\t\t\"./pt\": 78,\n\t\t\"./pt-br\": 77,\n\t\t\"./pt-br.js\": 77,\n\t\t\"./pt.js\": 78,\n\t\t\"./ro\": 79,\n\t\t\"./ro.js\": 79,\n\t\t\"./ru\": 80,\n\t\t\"./ru.js\": 80,\n\t\t\"./se\": 81,\n\t\t\"./se.js\": 81,\n\t\t\"./si\": 82,\n\t\t\"./si.js\": 82,\n\t\t\"./sk\": 83,\n\t\t\"./sk.js\": 83,\n\t\t\"./sl\": 84,\n\t\t\"./sl.js\": 84,\n\t\t\"./sq\": 85,\n\t\t\"./sq.js\": 85,\n\t\t\"./sr\": 87,\n\t\t\"./sr-cyrl\": 86,\n\t\t\"./sr-cyrl.js\": 86,\n\t\t\"./sr.js\": 87,\n\t\t\"./ss\": 88,\n\t\t\"./ss.js\": 88,\n\t\t\"./sv\": 89,\n\t\t\"./sv.js\": 89,\n\t\t\"./sw\": 90,\n\t\t\"./sw.js\": 90,\n\t\t\"./ta\": 91,\n\t\t\"./ta.js\": 91,\n\t\t\"./te\": 92,\n\t\t\"./te.js\": 92,\n\t\t\"./th\": 93,\n\t\t\"./th.js\": 93,\n\t\t\"./tl-ph\": 94,\n\t\t\"./tl-ph.js\": 94,\n\t\t\"./tlh\": 95,\n\t\t\"./tlh.js\": 95,\n\t\t\"./tr\": 96,\n\t\t\"./tr.js\": 96,\n\t\t\"./tzl\": 97,\n\t\t\"./tzl.js\": 97,\n\t\t\"./tzm\": 99,\n\t\t\"./tzm-latn\": 98,\n\t\t\"./tzm-latn.js\": 98,\n\t\t\"./tzm.js\": 99,\n\t\t\"./uk\": 100,\n\t\t\"./uk.js\": 100,\n\t\t\"./uz\": 101,\n\t\t\"./uz.js\": 101,\n\t\t\"./vi\": 102,\n\t\t\"./vi.js\": 102,\n\t\t\"./x-pseudo\": 103,\n\t\t\"./x-pseudo.js\": 103,\n\t\t\"./zh-cn\": 104,\n\t\t\"./zh-cn.js\": 104,\n\t\t\"./zh-tw\": 105,\n\t\t\"./zh-tw.js\": 105\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 138;\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <site-header></site-header> <router-view></router-view> <site-footer></site-footer> \";\n\n/***/ },\n/* 140 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=hub-container> <div class=hub>{{ hubName }}</div> <template v-for=\\\"spoke in spokes\\\"> <div class=\\\"spoke {{ spoke.key }} {{ spoke.color }}\\\"> {{ spoke.value }} </div> <data-bundle></data-bundle> </template> </div> \";\n\n/***/ },\n/* 141 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=\\\"gfx-wrapper height-forty\\\"> <div class=one-hub template v-if=\\\"type === 'one-zone'\\\"> <cosmos-hub hub-name=Zone></cosmos-hub> </div> <div class=two-hubs v-if=\\\"type === 'two-zones'\\\"> <cosmos-hub id=two-hubs-one hub-name=\\\"Zone 1\\\"></cosmos-hub> <data-bundle></data-bundle> <cosmos-hub id=two-hubs-two hub-name=\\\"Zone 2\\\"></cosmos-hub> </div> <div class=three-hubs template v-if=\\\"type === 'three-zones'\\\"> <cosmos-hub id=three-hubs-one hub-name=\\\"EVM 1.0\\\"></cosmos-hub> <arrow></arrow> <cosmos-hub id=three-hubs-two hub-name=\\\"EVM 2.0\\\"></cosmos-hub> <cosmos-hub id=three-hubs-three hub-name=\\\"EVM 3.0\\\"></cosmos-hub> </div> </div> \";\n\n/***/ },\n/* 142 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=countdown-wrapper _v-13cb49dc=\\\"\\\"> <div class=key _v-13cb49dc=\\\"\\\">Crowd sale on October 8th</div> <div class=value _v-13cb49dc=\\\"\\\">{{ countdown }}</div> <form _v-13cb49dc=\\\"\\\"> <input type=email placeholder=your@email.com _v-13cb49dc=\\\"\\\"> <input type=submit value=\\\"Alert Me\\\" _v-13cb49dc=\\\"\\\"> </form> </div> \";\n\n/***/ },\n/* 143 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <header id=site-header _v-241f4194=\\\"\\\"> <a v-link=\\\"{ path: '/' }\\\" id=nav-home _v-241f4194=\\\"\\\">Cosmos</a> <nav id=nav-site _v-241f4194=\\\"\\\"> <a v-link=\\\"{ path: '/whitepaper' }\\\" _v-241f4194=\\\"\\\">Whitepaper</a> <a v-link=\\\"{ path: '/plan' }\\\" _v-241f4194=\\\"\\\">Plan</a> <a v-link=\\\"{ path: '/faq' }\\\" _v-241f4194=\\\"\\\">FAQ</a> </nav> </header> \";\n\n/***/ },\n/* 144 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=article-wrapper _v-3ada8d83=\\\"\\\"> <h1 _v-3ada8d83=\\\"\\\">Plan</h1> <h2 id=cosmos-crowdfund-plan _v-3ada8d83=\\\"\\\">Cosmos Crowdfund Plan</h2> <p _v-3ada8d83=\\\"\\\">DATE: July 22nd, 2016<br _v-3ada8d83=\\\"\\\"> LAST UPDATED: Aug 12th, 2016<br _v-3ada8d83=\\\"\\\"> NOTE: The details in this plan override what is currently in the whitepaper.</p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Cosmos Inc will be a for-profit Canadian entity. Its mission is to create, maintain, and further develop, the Cosmos Ecosystem.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">There will be a Crowdfunding campaign to sell tokens, called \\\"atoms\\\", that give the holder limited license to use the Cosmos Hub. The proceeds of the Crowdfunding campaign will go to Cosmos Inc to develop the Essential Cosmos Software and Services.</p> </li> <li _v-3ada8d83=\\\"\\\">There will be 20,000,000 atoms on Genesis day. On Genesis day, the distribution of atoms will be split between: <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">Pre-funders (5%)</li> <li _v-3ada8d83=\\\"\\\">Cosmos Inc (20%)</li> <li _v-3ada8d83=\\\"\\\">Crowdfund Funders (75%)</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Upon completion of the Crowdfund, all the atom holders, including Cosmos Inc, play the Delegation Game in a special purpose Ethereum smart contract (which holds no Ether). The top 100 validators after delegation will be chosen as validators on Genesis.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Everyone's atoms will vest over a period of two years after Genesis. Unvested atoms cannot be transferred until vested. Unvested atoms will vest over time, at a rate of 1/(24x365x2) of the account's atoms, every hour.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Every validator must participate in governance, or else become inactivated and eventually unbonded. Delegators who delegate atoms to such validators will also likewise get their delegated atoms inactivated and eventually unbonded.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Anyone may receive more atoms by passing a proposal with an attached award. Such reward atoms will be purely inflationary.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">1/3 of the total number of atoms will be distributed back to the bonded atom holders for having a stake in consensus. This a tax (disincentive) for not putting atoms at stake, and not participating in governance during the first two years after Genesis.</p> </li> </ul> <h2 id=definitions _v-3ada8d83=\\\"\\\">Definitions</h2> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Inc</strong>: Cosmos Inc is a for-profit legal entity that manages the Crowdfund and Genesis of the Cosmos Hub. Besides the initial development of the Essential Cosmos Software and Services, Cosmos Inc has no further obligations with regards to the Cosmos Ecosystem, Cosmos Hub, or derivatives (forks) of the Cosmos Hub, but instead is a general participant in the network.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Ecosystem</strong>: Includes the Cosmos Network and other software and services, including validator and client software.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub</strong>: An Cosmos hub is itself a blockchain, or zone, that connects to many other zones. The hub facilitates token movement between zones. The Cosmos Hub will be the first hub, and the first zone.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub Block Reward</strong>: The blockchain will reward the Validators and Delegators in proportion to their bonded atoms, and afterwards account for any commissions that delegators pay to delegate validators. The reward will consist of two categories -- transaction fees, and inflationary atoms. The transction fees will be any fee collected by a validator. In addition, there will be inflationary atoms at a rate of 1/3 of the total number of atoms per year. Cosmos holders who do not put their atoms at stake by being a validator or delegating to a validator will not receive any of the Cosmos Hub Block Rewards.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Network</strong>: Includes the Cosmos Hub and all connected zones.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Crowdfund</strong>: An atom token crowdfund event that happens during a period of 42 days. There will be a website where those who wish to purchase atoms can sign up The crowdfund proceeds will be used to complete the Essential Cosmos Software and Services, starting with the release of TendermintCore. </p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Delegator</strong>: An atom holder who puts their atoms at stake by delegating its validating power and voting power to a validator. They are still responsible for voting on proposals during the vesting period. If they don't vote they will be penalized, but they will inherit the vote of the delegated validator.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Early Funders</strong>: The Early Funders are qualified investors who purchase 5% of the Genesis atoms prior to the crowdfund. The majority of the proceeds from the early funding will go toward legal and PR fees, and also help pay salary for Cosmos Inc until the crowdfunding is complete.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Validator</strong>: Validators are full nodes of a Cosmos zone that have the responsibility of committing blocks in that zone. The Cosmos Hub will start with 100 validator spots. Due to the limited number of validator spots, not everyone who has atoms can be a validator. Instead, everyone else can bond atoms and delegate their consensus voting power to any of the 100 validators. Before Genesis, the Cosmos Crowdfund funders will play the Delegation Game to determine the top 100 bonded delegates who will become the genesis validators.</p> <h3 id=essential-cosmos-software-and-services _v-3ada8d83=\\\"\\\">Essential Cosmos Software and Services</h3> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">TendermintCore</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Alpha</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">fix existing issues</li> <li _v-3ada8d83=\\\"\\\">mempool optimization</li> <li _v-3ada8d83=\\\"\\\">peer exchange handler</li> <li _v-3ada8d83=\\\"\\\">validator set changes</li> <li _v-3ada8d83=\\\"\\\">fork detection and handling</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Beta</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">tendermint consensus v2</li> </ul> </li> </ul> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Alpha</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">multiasset accounts</li> <li _v-3ada8d83=\\\"\\\">atom staking with delegation</li> <li _v-3ada8d83=\\\"\\\">governance</li> <li _v-3ada8d83=\\\"\\\">basic wallet client</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Beta</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">zone support<ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">exchange zone</li> <li _v-3ada8d83=\\\"\\\">ethereum zone</li> <li _v-3ada8d83=\\\"\\\">import crypto distributions</li> </ul> </li> <li _v-3ada8d83=\\\"\\\">Cosmos network explorer client</li> </ul> </li> </ul> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Other</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">hardware wallet integration <em _v-3ada8d83=\\\"\\\">with sufficient funding</em></li> <li _v-3ada8d83=\\\"\\\">Ethereum peg <em _v-3ada8d83=\\\"\\\">with sufficient funding</em></li> <li _v-3ada8d83=\\\"\\\">Bitcoin peg <em _v-3ada8d83=\\\"\\\">with partner, if possible</em></li> </ul> <h2 id=funding _v-3ada8d83=\\\"\\\">Funding</h2> <p _v-3ada8d83=\\\"\\\">Funds will be raised by Cosmos Inc in 2 phases.</p> <h3 id=phase-0-the-prefund _v-3ada8d83=\\\"\\\">Phase 0: the Prefund</h3> <p _v-3ada8d83=\\\"\\\">During the Prefund, 5% of future Genesis atoms will be sold to qualified investors with a cap and/or discount. The proceeds from the Early Investors will be used to prepare for and execute the crowdfund, as well as to pay for legal expenses.</p> <h3 id=phase-1-the-crowdfund _v-3ada8d83=\\\"\\\">Phase 1: the Crowdfund</h3> <p _v-3ada8d83=\\\"\\\">During the Crowdfund, 75% of future Genesis atoms will be sold to sophisticated members of the public who wish to support or participate in this project. The crowdfund will happen over a period of 42 days as the Ethereum crowdfund.</p> <p _v-3ada8d83=\\\"\\\">The crowdfund will be capped at $9M equivalent of bitcoins after the first 24 hours of the crowfund. After 24 hours since the beginning of the crowdfund, when the total amount raised exceeds $9M given the price of bitcoin at 9am PDT the morning of, the crowdfund will immediately stop.</p> <h3 id=funding-milestones _v-3ada8d83=\\\"\\\">Funding Milestones</h3> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">If the crowdfund does not meet the minimum $3M -- 95+% of funds returned</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $3M -- Essential Cosmos Software</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $5M -- Ethereum peg</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $7M -- Open-source hardware wallet (sold separately)</li> </ul> <h2 id=timeline _v-3ada8d83=\\\"\\\">Timeline</h2> <ol _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">Prefund for 5% of Genesis atoms</li> <li _v-3ada8d83=\\\"\\\">Canadian non-profit is created</li> <li _v-3ada8d83=\\\"\\\">Begin Crowdfund</li> <li _v-3ada8d83=\\\"\\\">End of Crowdfund after 42 days or cap reache (EoCF)</li> <li _v-3ada8d83=\\\"\\\">EoCF + 2 months: alpha release candidate of TendermintCore for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 4 months: alpha release of TendermintCore</li> <li _v-3ada8d83=\\\"\\\">EoCF + 7 months: alpha release candidate of Cosmos Hub for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 9 months: alpha release of Cosmos Hub</li> <li _v-3ada8d83=\\\"\\\">EoCF + 10 months: launch Cosmos Hub alpha</li> <li _v-3ada8d83=\\\"\\\">EoCF + 12 months: begin sale of open-source hardware wallet (if funding milestone reached)</li> <li _v-3ada8d83=\\\"\\\">EoCF + 13 months: beta release candidate of Alpha Hub for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 15 months: launch Cosmos Hub beta</li> <li _v-3ada8d83=\\\"\\\">EoCF + 15 months+: Continuous development, timeline set by Cosmos Inc</li> <li _v-3ada8d83=\\\"\\\">Timeline for Bitcoin peg support depends on partnership</li> <li _v-3ada8d83=\\\"\\\">Timeline for Ethereum peg support set after alpha release of Cosmos Hub</li> </ol> </div> <section class=section-default _v-3ada8d83=\\\"\\\"><div class=section-container _v-3ada8d83=\\\"\\\"> <countdown _v-3ada8d83=\\\"\\\"></countdown> </div></section> \";\n\n/***/ },\n/* 145 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=data-bundle v-bind:style=bundleStyle _v-4d63d08a=\\\"\\\"> <div class=\\\"datastream datastream-top\\\" v-bind:style=streamStyle _v-4d63d08a=\\\"\\\"> <p v-bind:style=pStyle _v-4d63d08a=\\\"\\\">→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;</p> </div> <div class=\\\"datastream datastream-bottom\\\" v-bind:style=streamStyle _v-4d63d08a=\\\"\\\"> <p v-bind:style=pStyle _v-4d63d08a=\\\"\\\">←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;</p> </div> </div> \";\n\n/***/ },\n/* 146 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=hubs-wrapper _v-50acc47d=\\\"\\\"> <cosmos-hub id=hub-one hub-name=\\\"Cosmos Hub\\\" :spokes=spokesOne _v-50acc47d=\\\"\\\"></cosmos-hub> <cosmos-hub id=hub-two hub-name=\\\"Peer Hub\\\" :spokes=spokesTwo _v-50acc47d=\\\"\\\"></cosmos-hub> <data-bundle id=multiple-hubs-connector _v-50acc47d=\\\"\\\"></data-bundle> </div> \";\n\n/***/ },\n/* 147 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=article-wrapper _v-6057bba8=\\\"\\\"> <h1 _v-6057bba8=\\\"\\\">FAQ</h1> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What is sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Sharding is about dividing the workload up into pieces for the purpose of horizontal scaling. There are many ways to handle sharding in SQL databases, but sharding for blockchains is an emerging field. The closest thing we have are the altcoins ecosystem, but this isn't very good because all the altcoins are their own silos with no good way to interoperate except via centralized exchanges, or tricks like hashlocked transactions (like the Lightning Network), which have their own benefits and drawbacks.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does Cosmos do sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Cosmos implements sharding using zones. It's a sharding solution that preserves the sovereignty of the shard as a self-governing and self-validating system. The Cosmos Hub doesn't care about the internal state of an Cosmos zone -- rather, all that matters to the Cosmos Hub is what the zone explicitly communicates to the Cosmos Hub via IBC packets.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What's an IBC packet?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">IBC packets are packets of data that one blockchain wishes to send to another blockchain. But instead of literally sending a packet of bytes via the TCP/IP or UDP/IP protocol (which is designed for singular, physical, machines), IBC packets require cryptographic proof-of-existence. Since no single node or validator has the authority to speak on behalf of the entire blockchain, and, since we don't want to rely on the integrity of the IP internet infrastructure, instead we rely on a cryptographic proof of a blockchain hash commit (+2/3 of signatures for that blockchain hash) along with a Merkle-proof from the aforementioned blockhash to a packet in the blockchain's \\\"application state\\\", which proves that the blockchain validators agreed to publish this packet of information. So, anyone who sees an IBC packet (regardless of the source of this data) can verify its integrity.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Isn't this just sidechains, like what Blockstream proposed?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Yes. Exactly. Except in Cosmos, the hubs and zones are all powered by Tendermint consensus. IBC on Tendermint is great because of all the reasons why light-client payment verification is great as compared to proof-of-work -- superior speed, no need to download all the block headers, 1-block finality, and security via collateral. So Cosmos is a bit like Blockstream's sidechains proposal, except with the Cosmos Hub at the center instead of Bitcoin, which makes everything faster and simpler, and arguably more secure. Also the fact that the Cosmos Hub is a multiasset blockchain is a big advantage.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does Cosmos compare to Ethereum sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Vitalik is working on sharding solutions for Ethereum, but the solutions I've seen assume that all the shards are running the same VM. The biggest difference between what Vitalik's latest sharding design and Cosmos is that the Cosmos Hub lets you plug in any zone, even for entirely different VMs or zones with no VMs at all (like Bitcoind). This works because the Cosmos Hub is about preserving the total number of tokens across zones/shards, whereas Vitalik's scaling solution is about sharding the general Ethereum state machine state. The zones of the Cosmos Hub don't care that other zones fail or crash, as long as the Cosmos Hub continues to function and preserves the total number of tokens across all the zones. Vitalik is trying to create a sharding solution where none of the shards may fail, because the internal state of those shards can mean anything at all. Vitalik is trying to solve a much more difficult problem. If we do our job right, we will be able to implement whatever he comes up within Cosmos.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Why are shards called zones?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Shards are called zones in Cosmos because they really are like sovereign economic zones. We've seen a taste of blockchain governance with the Ethereum hard-fork following TheDAO hack. In Cosmos, all zones are sovereign and can construct their own governance policies, and yet they can all interoperate on the Cosmos Hub. That's the benefit of the IBC abstraction, that it's about accountable and cryptographicaly verifiable communication.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does one exchange currencies in this system?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">For tokens outside the Cosmos system, they can only be introduced via pegged derivatives (akin to what Blockstream's sidechains paper was suggesting). I suppose you could also use other means to track the value of some token inside the Cosmos network by involving prediction markets or betting, but I'm not an expert on those. They can be supported too by other zones, but I won't go into them here.</p> <p _v-6057bba8=\\\"\\\">In the Cosmos Hub, pegs will be tied to a specific zone; that is, a zone and its validator sets are expected to also be involved in a m-of-n contract on the target chain, like Bitcoin or Ethereum.</p> <pre _v-6057bba8=\\\"\\\"><code _v-6057bba8=\\\"\\\">           _ peg smart contract\\n          /\\n  [  Ethereum  ] &lt;--&gt; [ EtherCosmos Peg Zone ] &lt;-IBC-&gt; [  Cosmos Hub  ] &lt;-IBC-&gt; (Bitcoin) [ PoW/Casper ]\\n                      [      Tendermint      ]         [  Tendermint  ] &lt;-IBC-&gt; (exchange)\\n</code></pre><p _v-6057bba8=\\\"\\\">Once the tokens are in the hub, its must easier to exchange currencies. Either trade with another account directly in the Cosmos Hub (a Send transaction with two inputs and two outputs, with 2 different assets, swapped). But this requires both parties to the trade to be online. Instead, you can send your tokens to an exchange zone, to take advantage of an order-book.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">So can I trade BTC for ETH using Cosmos?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">You can, if you trust the respective Ethereum and Bitcoin peg zones. If alternatives of Ethereum and Bitcoin (ie. same codebase, different network) launch on Cosmos, you can trade those directly.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Does Cosmos involve escrow?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Not really, though the hub may be thought of as an escrow agent mediating between two zones, but that's of course the point. However, the pegs in peg-zones may well utilize escrow to allow, for instance, BTC to move into a zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does one switch blockchains in this system?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">The zone is responsible for committing an IBC packet with outbound coins for another zone. Zones can do whatever they want, so it's really up to the logic of the zone, as well as the client. Ideally there will be a standard specification for constructing a transaction to move funds from one zone to another. So an EVM zone should be implemented such that it can process this universal transaction format that lets any simple user account send funds to another zone via the Cosmos Hub (or any other hub). This may be something to be defined as an IETF or W3C specification, but it's a bit too early for that, so we should forge ahead and document the spec for everyone to see.</p> <p _v-6057bba8=\\\"\\\">There should be some specification for defining:</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\">the destination zone</li> <li _v-6057bba8=\\\"\\\">the intermediary zones (typically the Cosmos Hub)</li> <li _v-6057bba8=\\\"\\\">the assets and quantity</li> <li _v-6057bba8=\\\"\\\">the destination account or smart contract</li> <li _v-6057bba8=\\\"\\\">any other information</li> </ul> <p _v-6057bba8=\\\"\\\">These are specified <a href=https://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md#ibcpackettx _v-6057bba8=\\\"\\\">here</a>.</p> <p _v-6057bba8=\\\"\\\">There will also be way to navigate these zones, whereby nodes or validators of a zone can publish their IP endpoints or whatnot, voluntarily. So zone discovery is a thing, but mostly it's up to the end-client software to understand this plumbing. End-users shouldn't know all of the details except a few rules for safety, like \\\"don't send money to zones you don't know\\\".</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Is consensus configurable? When I am switching between blockchains won't my consensus be different in different scenarios?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">We can accomodate other PoS consensus mechanisms as long as they have a very clean and consise light-client verification protocol. Or, even Tendermint might upgrade to support additional features. It will be up to the Cosmos Foundation and the Cosmos governance to decide whether to support them. It isn't necessary if there can be adapter zones. That's what a Bitcoin peg zone is -- an adapter zone to sit between PoW and Tendermint.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What is the maximum number of nodes in Cosmos? Does each zone or hub have their own nodes?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Yes. Each zone has its own nodes, we don't re-use public keys (yet, though we could in the future). Different atoms bonded in each zone, but all the same atom token.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Do the validatiors that are chosen, validate transactions for every zone and Hub?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">No. Validators for a zone only validate transactions for their zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">The whitepaper states \\\"Zones communicate with one another through a hub, primarily in the form of assymetric transfer of some set of tokens from one zone to another.\\\" Can you talk about what exactly the asymmetric transfer is?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">It's maybe not the best term, but we coined it to refer to the kind of inter-zone token transfer that happens in the Cosmos Hub. The transfer of tokens was not via any bidirectional or bilateral exchange mechanism, or even through a peg. It's as if the token moved from one zone to another. The trick is that there is a common crypto \\\"depository\\\" -- the Cosmos Hub.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">According to the whitepaper: \\\"Cosmos reflects this position in that it makes no distinction between hubs - there is no \\\"top\\\" hub, and the most popular or successful hub is a matter of adoption by zones. \\\" In your view what will make hubs more successful and what will make them unsuccessful?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">There will be different features... speed (limiting to 100 validators), flexibility (e.g. if implemented on the EVM), or perhaps nation-state sponsorship or better integration with the legal system (via traditional banking partners), etc. One could also imagine a much slower, but more distributed \\\"slow hub\\\", or much faster but less decentralized \\\"high-frequency hubs\\\".</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What will be the process for abandoning validators that misbehave?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">If a validator misbehaves on its own by double-signing at the same height &amp; round, then the evidence is very short and simple -- it's just the two conflicting votes. This evidence can be included in the the CosmosHub as a Slash transaction, and the validator will immediately become inactive and slashed after the Slash transaction gets committed.</p> <p _v-6057bba8=\\\"\\\">If there is a zone fork, either of the Cosmos Hub or any of the zones, the two conflicting commits also constitute evidence. This is a much more complicated data structure. It is guaranteed to slash at least 1/3 of the validators' atoms for that zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Can delegators also be validators? Or are delegators never validators?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Delegators are never validators. If someone who operates validator nodes wishes to delegate, they need to do so with their free and unbonded atoms.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">\\\"Validators' voting powers are determined at genesis, or is changed deterministically by the blockchain, depending on the application.\\\" Any idea what shape this will take initially what are you thinking for voting powers?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">(Are these two separate questions? What do you mean \\\"what are you thinking for voting powers?\\\")</p> <p _v-6057bba8=\\\"\\\">I have no idea what shape this will take. We need to reach out to a wide audience for the crowdfund, and that will help us get a better distribution, even if we don't know exactly who owns these tokens.</p> <p _v-6057bba8=\\\"\\\">In some way it doesn't matter, because even if there are attacks and mishaps along the way, eventually through hard-forks the blockchain can purge the bad actors. It's antifragile.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Can you give some details about what you took(derived) from the DLS consensus algorithm?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">The locking mechanism was something that I hadn't seen in other papers, like PBFT. There's an equivalence to PBFT's system, but the locking and unlocking mechanics in PBFT happen implicitly.</p> <p _v-6057bba8=\\\"\\\">Increasing the length of time of a round to circumvent partial-synchrony is something that the early versions of Tendermint Consensus used. In the current version of Tendermint Consensus, which is more asynchronous, this \\\"time delay\\\" is limited to the timeout period after a 2/3 quorum of any votes for the same height &amp; round.</p> <p _v-6057bba8=\\\"\\\">The 2/3 quorum of any votes to synchronize validators, a kind of virtual clock cycle, was also inspired by DLS's paper in the later sections (after section 5).</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Why is Cosmos's governance better than any other options out there?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">One is, the stakeholders are well defined, as is the prior social contract. ETH had a hard time with the fork because they had to ask the ether holders as well as the miners, but the ether holders had no prior social contract or obligation to partake in governance, so no quorum could be reached in time. Asking the miners is necessary to ensure that the hard-fork will have support, but after a while they tend to simply follow the money and incentives.</p> <p _v-6057bba8=\\\"\\\">Cosmos is different because instead of anonymous miners we have social contract bound validators and delegators who have stake, and, they have the obligation to partake in governance.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What use cases do you think are most compelling in the future?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Cosmos allows everyone to benefit from the network effect of various interoperable tokens and zones. For example, if anyone creates a peg zone or a new token type, all the other zones can use them if they support the new token type.</p> <p _v-6057bba8=\\\"\\\">So, the Cosmos Hub has a particular use-case that isn't filled by anything today. The best use-case for Cosmos Zones are for any token-based blockchain that benefit from the new interoperability, speed, and scalability properties. It may be a kind of distributed exchange.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Do you feel Cosmos and Interledger are complimentary or are you directly competing with it?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">They're more complementary than competing. For one, Interledger will be very useful for creating Cosmos zones that interface with the traditional financial system.</p> <p _v-6057bba8=\\\"\\\">Interledger can also be used directly between blockchain zones. For this use-case, the Cosmos Hub may be a competitive option, as compared to other options for Interledger notary sets. The Cosmos Hub validators could also offer their services as an Interledger notary set.</p> </div> <section class=section-default _v-6057bba8=\\\"\\\"><div class=section-container _v-6057bba8=\\\"\\\"> <countdown _v-6057bba8=\\\"\\\"></countdown> </div></section> \";\n\n/***/ },\n/* 148 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <footer id=site-footer _v-66840978=\\\"\\\"> <p _v-66840978=\\\"\\\">© 2016 Cosmos Inc</p> </footer> \";\n\n/***/ },\n/* 149 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <section-cover _v-75a39e68=\\\"\\\"></section-cover> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <countdown class=countdown-top _v-75a39e68=\\\"\\\"></countdown> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=one-zone _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">A Cosmos <a href=# _v-75a39e68=\\\"\\\">zone</a> is a distributed ledger (blockchain). Each zone can have differing transaction logic and policies.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=two-zones _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">We’ve developed a trick that allows zones to communicate with each other directly. It’s based on classical BFT algorithms like Tendermint.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper square\\\" _v-75a39e68=\\\"\\\"> <cosmos-hub hub-name=\\\"Cosmos Hub\\\" :spokes=evmSpokes _v-75a39e68=\\\"\\\"></cosmos-hub> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">With this technique, we could make Ethereum scale by constructing a common hub blockchain. All inter-zone token movements go through the hub.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=three-zones _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">Upgrading the EVM would be seamless, with less risk of contentious hard-forks. Anyone could plug in a better smart contract system.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper square\\\" _v-75a39e68=\\\"\\\"> <cosmos-hub hub-name=\\\"Cosmos Hub\\\" :spokes=distSpokes _v-75a39e68=\\\"\\\"></cosmos-hub> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">We could import other blockchains and have a distributed exchange on its own zone.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper height-seventy\\\" _v-75a39e68=\\\"\\\"> <multiple-hubs _v-75a39e68=\\\"\\\"></multiple-hubs> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">The Cosmos hub isn’t the center of the universe. Any zone can be a hub.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <countdown _v-75a39e68=\\\"\\\"></countdown> </div></section> \";\n\n/***/ },\n/* 150 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=data-bundle _v-7bfd996a=\\\"\\\"> <div class=datastream _v-7bfd996a=\\\"\\\"> <p _v-7bfd996a=\\\"\\\">→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;</p> </div> </div> \";\n\n/***/ },\n/* 151 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <section class=section-cover _v-891d9bfe=\\\"\\\"> <div class=blockchain _v-891d9bfe=\\\"\\\"> <h1 _v-891d9bfe=\\\"\\\">Cosmos</h1> <h2 _v-891d9bfe=\\\"\\\">a network of distributed ledgers</h2> </div> </section> \";\n\n/***/ },\n/* 152 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=hub-wrapper _v-da38f26a=\\\"\\\"> <div class=hub :class=\\\"{ 'light-color': lightColor}\\\" _v-da38f26a=\\\"\\\">{{ hubName }}</div> <template v-for=\\\"spoke in spokes\\\"> <div class=\\\"spoke {{ spoke.key }} {{ spoke.color }}\\\" _v-da38f26a=\\\"\\\"> {{ spoke.value }} </div> <data-bundle streamwidth=thin :class=\\\"{ 'light-color': lightColor}\\\" _v-da38f26a=\\\"\\\"></data-bundle> </template> </div> \";\n\n/***/ },\n/* 153 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <div class=article-wrapper _v-db453a86=\\\"\\\"> <h1 id=cosmos _v-db453a86=\\\"\\\">Cosmos</h1> <p _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">A Network of Distributed Ledgers</strong></p> <p _v-db453a86=\\\"\\\">Jae Kwon jae@tendermint.com<br _v-db453a86=\\\"\\\"> Ethan Buchman ethan@tendermint.com</p> <p _v-db453a86=\\\"\\\">For discussions, <a href=http://forum.tendermint.com:3000/ _v-db453a86=\\\"\\\">join our Slack</a>!</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">NOTE: If you can read this on GitHub, then we're still actively developing this document. Please check regularly for updates!.</em></p> <h2 id=table-of-contents _v-db453a86=\\\"\\\">Table of Contents</h2> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#introduction _v-db453a86=\\\"\\\">Introduction</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint _v-db453a86=\\\"\\\">Tendermint</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#validators _v-db453a86=\\\"\\\">Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#consensus _v-db453a86=\\\"\\\">Consensus</a></li> <li _v-db453a86=\\\"\\\"><a href=#light-clients _v-db453a86=\\\"\\\">Light Clients</a></li> <li _v-db453a86=\\\"\\\"><a href=#preventing-attacks _v-db453a86=\\\"\\\">Preventing Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#tmsp _v-db453a86=\\\"\\\">TMSP</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#cosmos-overview _v-db453a86=\\\"\\\">Cosmos Overview</a></li> <li _v-db453a86=\\\"\\\"><a href=#the-hub-and-zones _v-db453a86=\\\"\\\">The Hub and Zones</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#the-hub _v-db453a86=\\\"\\\">The Hub</a></li> <li _v-db453a86=\\\"\\\"><a href=#the-zones _v-db453a86=\\\"\\\">The Zones</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#inter-blockchain-communication-ibc _v-db453a86=\\\"\\\">Inter-blockchain Communication (IBC)</a></li> <li _v-db453a86=\\\"\\\"><a href=#use-cases _v-db453a86=\\\"\\\">Use Cases</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#pegging-to-other-cryptocurrencies _v-db453a86=\\\"\\\">Pegging to Other Cryptocurrencies</a></li> <li _v-db453a86=\\\"\\\"><a href=#ethereum-scaling _v-db453a86=\\\"\\\">Ethereum Scaling</a></li> <li _v-db453a86=\\\"\\\"><a href=#multi-application-integration _v-db453a86=\\\"\\\">Multi-Application Integration</a></li> <li _v-db453a86=\\\"\\\"><a href=#network-partition-mitigation _v-db453a86=\\\"\\\">Network Partition Mitigation</a></li> <li _v-db453a86=\\\"\\\"><a href=#federated-name-resolution-system _v-db453a86=\\\"\\\">Federated Name Resolution System</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#issuance-and-incentives _v-db453a86=\\\"\\\">Issuance and Incentives</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#the-atom-token _v-db453a86=\\\"\\\">The Atom Token</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#crowdfund _v-db453a86=\\\"\\\">Crowdfund</a></li> <li _v-db453a86=\\\"\\\"><a href=#vesting _v-db453a86=\\\"\\\">Vesting</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#limitations-on-the-number-of-validators _v-db453a86=\\\"\\\">Limitations on the Number of Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#becoming-a-validator-after-genesis-day _v-db453a86=\\\"\\\">Becoming a Validator After Genesis Day</a></li> <li _v-db453a86=\\\"\\\"><a href=#penalties-for-validators _v-db453a86=\\\"\\\">Penalties for Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#transaction-fees _v-db453a86=\\\"\\\">Transaction Fees</a></li> <li _v-db453a86=\\\"\\\"><a href=#incentivizing-hackers _v-db453a86=\\\"\\\">Incentivizing Hackers</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#governance _v-db453a86=\\\"\\\">Governance</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#parameter-change-proposal _v-db453a86=\\\"\\\">Parameter Change Proposal</a></li> <li _v-db453a86=\\\"\\\"><a href=#text-proposal _v-db453a86=\\\"\\\">Text Proposal</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#roadmap _v-db453a86=\\\"\\\">Roadmap</a></li> <li _v-db453a86=\\\"\\\"><a href=#related-work _v-db453a86=\\\"\\\">Related Work</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#consensus-systems _v-db453a86=\\\"\\\">Consensus Systems</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#classic-byzantine-fault-tolerance _v-db453a86=\\\"\\\">Classic Byzantine Fault Tolerance</a></li> <li _v-db453a86=\\\"\\\"><a href=#bitshares-delegated-stake _v-db453a86=\\\"\\\">BitShares delegated stake</a></li> <li _v-db453a86=\\\"\\\"><a href=#stellar _v-db453a86=\\\"\\\">Stellar</a></li> <li _v-db453a86=\\\"\\\"><a href=#bitcoinng _v-db453a86=\\\"\\\">BitcoinNG</a></li> <li _v-db453a86=\\\"\\\"><a href=#casper _v-db453a86=\\\"\\\">Casper</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#horizontal-scaling _v-db453a86=\\\"\\\">Horizontal Scaling</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#interledger-protocol _v-db453a86=\\\"\\\">Interledger Protocol</a></li> <li _v-db453a86=\\\"\\\"><a href=#sidechains _v-db453a86=\\\"\\\">Sidechains</a></li> <li _v-db453a86=\\\"\\\"><a href=#ethereum-scalability-efforts _v-db453a86=\\\"\\\">Ethereum Scalability Efforts</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#general-scaling _v-db453a86=\\\"\\\">General Scaling</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#lightning-network _v-db453a86=\\\"\\\">Lightning Network</a></li> <li _v-db453a86=\\\"\\\"><a href=#segregated-witness _v-db453a86=\\\"\\\">Segregated Witness</a></li> </ul> </li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#appendix _v-db453a86=\\\"\\\">Appendix</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#fork-accountability _v-db453a86=\\\"\\\">Fork Accountability</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint-consensus _v-db453a86=\\\"\\\">Tendermint Consensus</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint-light-clients _v-db453a86=\\\"\\\">Tendermint Light Clients</a></li> <li _v-db453a86=\\\"\\\"><a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">Preventing Long Range Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">Overcoming Forks and Censorship Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#tmsp-specification _v-db453a86=\\\"\\\">TMSP Specification</a></li> <li _v-db453a86=\\\"\\\"><a href=#ibc-packet-delivery-acknowledgement _v-db453a86=\\\"\\\">IBC Packet Delivery Acknowledgement</a></li> <li _v-db453a86=\\\"\\\"><a href=#merkle-tree--proof-specification _v-db453a86=\\\"\\\">Merkle tree &amp; proof specification</a></li> <li _v-db453a86=\\\"\\\"><a href=#transaction-types _v-db453a86=\\\"\\\">Transaction Types</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</a></li> <li _v-db453a86=\\\"\\\"><a href=#ibcpackettx _v-db453a86=\\\"\\\">IBCPacketTx</a></li> </ul> </li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#acknowledgements _v-db453a86=\\\"\\\">Acknowledgements</a></li> <li _v-db453a86=\\\"\\\"><a href=#citations _v-db453a86=\\\"\\\">Citations</a></li> </ul> <h2 id=introduction _v-db453a86=\\\"\\\">Introduction</h2> <p _v-db453a86=\\\"\\\">The combined success of the open-source ecosystem, of decentralized file-sharing, and of public cryptocurrencies, has inspired an understanding that decentralized internet protocols can be used to radically improve socio-economic infrastructure. We have seen specialized blockchain applications like Bitcoin <a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">[1]</a> (a cryptocurrency), Zerocash <a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">[2]</a> (a cryptocurrency for privacy), and generalized smart contract platforms such as Ethereum <a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">[3]</a>, with countless distributed applications for the EVM such as Augur (a prediction market) and TheDAO <a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">[4]</a> (an investment club).</p> <p _v-db453a86=\\\"\\\">To date, however, these blockchains have suffered from a number of drawbacks, including their gross energy inefficiency, poor or limited performance, and immature governance mechanisms. A number of proposals have been made to scale Bitcoin's transaction throughput such as Segregated-Witness <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">[5]</a> and BitcoinNG <a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">[6]</a>, but these are vertical scaling solutions that remain limited by the capacity of a single physical machine, lest we sacrifice the property of complete auditability. The Lightning Network <a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">[7]</a> can help scale Bitcoin transaction volume by leaving some transactions off the ledger completely and is well suited for micropayments and privacy preserving payment rails, but may not be suitable for more generalized scaling needs.</p> <p _v-db453a86=\\\"\\\">An ideal solution would be one that allows multiple parallel blockchains to interoperate while retaining their security properties, but this has proven difficult, if not impossible, with proof-of-work. Merged-mining, for instance, allows the work done to secure a parent chain to be re-used on a child chain, but transactions still must be validated, in order, by each node, and a merge-mined blockchain is vulnerable to attack if a majority of the hashing power on the parent is not actively merge-mining the child. An academic review of <a href=http://vukolic.com/iNetSec_2015.pdf _v-db453a86=\\\"\\\">alternative blockchain network architectures</a> is provided for additional context, and we provide more summaries of some proposals and their drawbacks in <a href=#related-work _v-db453a86=\\\"\\\">Related Work</a>.</p> <p _v-db453a86=\\\"\\\">Here we present Cosmos, a novel blockchain network architecture that addresses all of these problems. Cosmos is a network of many independent blockchains, called zones. The zones are powered by Tendermint Core <a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">[8]</a>, which provides a high-performance, consistent, secure <a href=http://tendermint.com/blog/tendermint-vs-pbft/ _v-db453a86=\\\"\\\">PBFT-like</a> consensus engine, where strict <a href=#fork-accountability _v-db453a86=\\\"\\\">fork-accountability</a> guarantees hold over the behaviour of malicious actors. Tendermint Core's BFT consensus algorithm is well suited for scaling public proof-of-stake blockchains.</p> <p _v-db453a86=\\\"\\\">The first zone on Cosmos is called the Cosmos Hub. The Cosmos Hub is a multi-asset proof-of-stake cryptocurrency with a simple governance mechanism enabling the network to adapt and upgrade. In addition, the Cosmos Hub can be extended by connecting other zones.</p> <p _v-db453a86=\\\"\\\">The hub and zones of the Cosmos network communicate with each other via an inter-blockchain communication (IBC) protocol, a kind of virtual UDP or TCP for blockchains. Tokens can be transferred from one zone to another, securely and quickly, without the need for exchange liquidity between zones. Instead, all inter-zone token transfers go through the Cosmos Hub, which keeps track of the total amount of tokens held by each zone. The hub isolates each zone from the failure of other zones. Since anyone can connect a new zone to the Cosmos Hub, zones allow for future-compatibility with new blockchain innovations.</p> <h2 id=tendermint _v-db453a86=\\\"\\\">Tendermint</h2> <p _v-db453a86=\\\"\\\">In this section we describe the Tendermint consensus protocol and the interface used to build applications with it. For more details, see the <a href=#appendix _v-db453a86=\\\"\\\">appendix</a>.</p> <h3 id=validators _v-db453a86=\\\"\\\">Validators</h3> <p _v-db453a86=\\\"\\\">In classical Byzantine fault-tolerant (BFT) algorithms, each node has the same weight. In Tendermint, nodes have a non-negative amount of <em _v-db453a86=\\\"\\\">voting power</em>, and nodes that have positive voting power are called <em _v-db453a86=\\\"\\\">validators</em>. Validators participate in the consensus protocol by broadcasting cryptographic signatures, or <em _v-db453a86=\\\"\\\">votes</em>, to agree upon the next block.</p> <p _v-db453a86=\\\"\\\">Validators' voting powers are determined at genesis, or is changed deterministically by the blockchain, depending on the application. For example, in a proof-of-stake application such as the Cosmos Hub, the voting power may be determined by the amount of staking tokens bonded as collateral.</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">NOTE: Fractions like ⅔ and ⅓ refer to fractions of the total voting power, never the total number of validators, unless all the validators have equal weight.</em> <em _v-db453a86=\\\"\\\">NOTE: +⅔ means \\\"more than ⅔\\\", while ⅓+ means \\\"⅓ or more\\\".</em></p> <h3 id=consensus _v-db453a86=\\\"\\\">Consensus</h3> <p _v-db453a86=\\\"\\\">Tendermint is a partially synchronous BFT consensus protocol derived from the DLS consensus algorithm <a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">[20]</a>. Tendermint is notable for its simplicity, performance, and <a href=#fork-accountability _v-db453a86=\\\"\\\">fork-accountability</a>. The protocol requires a fixed, known set of validators, where each validator is identified by its public key. Validators attempt to come to consensus on one block at a time, where a block is a list of transactions. Consensus on a block proceeds in rounds. Each round has a round-leader, or proposer, who proposes a block. The validators then vote, in stages, on whether or not to accept the proposed block or move on to the next round. The proposer for a round is chosen deterministically from the ordered list of validators, in proportion to their voting power.</p> <p _v-db453a86=\\\"\\\">The full details of the protocol are described <a href=https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm _v-db453a86=\\\"\\\">here</a>.</p> <p _v-db453a86=\\\"\\\">Tendermint’s security derives from its use of optimal Byzantine fault-tolerance via super-majority (+⅔) voting and a locking mechanism. Together, they ensure that:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">⅓+ voting power must be Byzantine to cause a violation of safety, where more than two values are committed. </li> <li _v-db453a86=\\\"\\\">if ever any set of validators succeeds in violating safety, or even attempts to do so, they can be identified by the protocol. This includes both voting for conflicting blocks and broadcasting unjustified votes.</li> </ul> <p _v-db453a86=\\\"\\\">Despite its strong guarantees, Tendermint provides exceptional performance. In benchmarks of 64 nodes distributed across 7 datacenters on 5 continents, on commodity cloud instances, Tendermint consensus can process thousands of transactions per second, with commit latencies on the order of one or two seconds. Notably, performance of well over a thousand transactions per second is maintained even in harsh adversarial conditions, with validators crashing or broadcasting maliciously crafted votes. See figure below for details.</p> <p _v-db453a86=\\\"\\\">![Figure of Tendermint throughput performance] (<a href=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png _v-db453a86=\\\"\\\">https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png</a>)</p> <h3 id=light-clients _v-db453a86=\\\"\\\">Light Clients</h3> <p _v-db453a86=\\\"\\\">A major benefit of Tendermint's consensus algorithm is simplified light client security, making it an ideal candidate for mobile and internet-of-things use cases. While a Bitcoin light client must sync chains of block headers and find the one with the most proof of work, Tendermint light clients need only to keep up with changes to the validator set, and then simply verify the +⅔ PreCommits in the latest block to determine the latest state.</p> <p _v-db453a86=\\\"\\\">Succinct light client proofs also enable <a href=#inter-blockchain-communication-ibc _v-db453a86=\\\"\\\">inter-blockchain communication</a>.</p> <h3 id=preventing-attacks _v-db453a86=\\\"\\\">Preventing Attacks</h3> <p _v-db453a86=\\\"\\\">Tendermint has various protective measures for preventing certain notable attacks, like <a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">long-range-nothing-at-stake double spends</a> and <a href=#overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">censorship</a>. These are discussed more fully in the <a href=#appendix _v-db453a86=\\\"\\\">appendix</a>.</p> <h3 id=tmsp _v-db453a86=\\\"\\\">TMSP</h3> <p _v-db453a86=\\\"\\\">The Tendermint consensus algorithm is implemented in a program called Tendermint Core. Tendermint Core is an application-agnostic \\\"consensus engine\\\" that can turn any deterministic blackbox application into a distributedly replicated blockchain. As the Apache Web Server or Nginx connects to the Wordpress application via CGI or FastCGI, Tendermint Core connects to blockchain applications via the Tendermint Socket Protocol (TMSP) <a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">[17]</a>. Thus, TMSP allows for blockchain applications to be programmed in any language, not just the programming language that the consensus engine is written in. Additionally, TMSP makes it possible to easily swap out the consensus layer of any existing blockchain stack.</p> <p _v-db453a86=\\\"\\\">We draw an analogy with a well-known cryptocurrency, Bitcoin. Bitcoin is a cryptocurrency blockchain where each node maintains a fully audited Unspent Transaction Output (UTXO) database. If one wanted to create a Bitcoin-like system on top of TMSP, Tendermint Core would be responsible for</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Sharing blocks and transactions between nodes</li> <li _v-db453a86=\\\"\\\">Establishing a canonical/immutable order of transactions (the blockchain)</li> </ul> <p _v-db453a86=\\\"\\\">Meanwhile, the TMSP application would be responsible for</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Maintaining the UTXO database</li> <li _v-db453a86=\\\"\\\">Validating cryptographic signatures of transactions</li> <li _v-db453a86=\\\"\\\">Preventing transactions from spending non-existent transactions</li> <li _v-db453a86=\\\"\\\">Allowing clients to query the UTXO database.</li> </ul> <p _v-db453a86=\\\"\\\">Tendermint is able to decompose the blockchain design by offering a very simple API between the application process and consensus process.</p> <h2 id=cosmos-overview _v-db453a86=\\\"\\\">Cosmos Overview</h2> <p _v-db453a86=\\\"\\\">Cosmos is a network of independent parallel blockchains that are each powered by classical BFT consensus algorithms like Tendermint <a href=http://github.com/tendermint/tendermint _v-db453a86=\\\"\\\">1</a>.</p> <p _v-db453a86=\\\"\\\">The first blockchain in this network will be the Cosmos Hub. The Cosomos Hub connects to many other blockchains (or <em _v-db453a86=\\\"\\\">zones</em>) via a novel inter-blockchain communication protocol. The Cosmos Hub tracks numerous token types, and keeps record of the total number of tokens in each connected zone. Tokens can be transferred from one zone to another, securely and quickly, without the need for a liquid exchange between zones, because all inter-zone coin transfers go through the Cosmos Hub.</p> <p _v-db453a86=\\\"\\\">This architecture solves so many problems that the blockchain space faces today, including application interoperability, scalability, and seamless upgradability. For example, zones derived from Bitcoind, Go-Ethereum, CryptoNote, ZCash, or any blockchain system can be plugged into the Cosmos Hub. These zones allow Cosmos to scale infinitely to meet global transaction demand. And, zones are a great fit for a distributed exchange, which will be supported as well.</p> <p _v-db453a86=\\\"\\\">Cosmos is not just a single distributed ledger, and the Cosmos Hub isn't a walled garden or the center of its universe. We are designing a protocol for an open network of distributed legers that can serve as a new foundation for our future financial systems, based on principles of cryptography, sound economics, consensus theory, transparency, and accountability.</p> <h3 id=tendermint-bft-dpos _v-db453a86=\\\"\\\">Tendermint-BFT DPoS</h3> <p _v-db453a86=\\\"\\\">The Cosmos Hub is the first public blockchain in the Cosmos Network powered by Tendermint's BFT consensus algorithm. The Tendermint open-source project was born in 2014 to address the speed, scalability, and environmental issues of Bitcoin's proof-of-work consensus algorithm. By utilizing and improving upon proven BFT algorithms developed at MIT in 1988, the Tendermint team was first to conceptually demonstrate a proof-of-stake cryptocurrency that addresses the nothing-at-stake problem suffered by first-gen proof-of-stake cryptocurrencies such as NXT and BitShares.</p> <p _v-db453a86=\\\"\\\">Today, practically all Bitcoin mobile wallets use trusted servers to provide them with transaction verification. This is because proof-of-work requires waiting for many confirmations before a transaction can be considered irreversibly committed. Double-spend attacks have already been demonstrated on services like CoinBase.</p> <p _v-db453a86=\\\"\\\">Unlike other blockchain consensus systems, Tendermint offers instant and provably-secure mobile-client payment verification. Since the Tendermint is designed not to fork at all, mobile wallets can receive instant transaction confirmation, finally making trustless and practical payments a reality on your smartphone. This has significant ramifications for IoT applications as well.</p> <p _v-db453a86=\\\"\\\">Validators in Cosmos (who have a similar role to Bitcoin miners but instead use cryptographic signatures to vote) are meant to be secure, dedicated machines that are responsible for committing blocks. Non-validators can delegate their staking tokens (called \\\"atoms\\\") to any validator to earn a portion of block fees and atom rewards, but incur the risk of getting punished (slashed) if the delegate validator gets hacked or violates the protocol. The proven safety guarantees of Tendermint BFT consensus, and the collateral deposit of stakeholders (of validators and delegators) provide provable, quantifiable security for nodes and even light clients.</p> <h3 id=governance _v-db453a86=\\\"\\\">Governance</h3> <p _v-db453a86=\\\"\\\">Distributed public ledgers should have a constitution and a governance system. Bitcoin relies on the Bitcoin Foundation (to some degree) and mining to coordinate upgrades, but this is a slow process. Ethereum split into ETH and ETC after the hard-fork to address TheDAO hack, largely because there was no prior social contract nor mechanism for making such decisions.</p> <p _v-db453a86=\\\"\\\">Validators and delegators on the Cosmos Hub can vote on proposals that can change preset parameters of the system automatically (such as the block gas limit), coordinate upgrades, as well as vote on amendments to a human-readible constitution that govern the policies of the Cosmos Hub. The constitution allows for cohesion among the stakeholders on issues regarding issues of theft and bugs (such as TheDAO incident), allowing for quicker and cleaner resolution.</p> <p _v-db453a86=\\\"\\\">Each zone can also have their own constitution and governance mechanism as well. For example, the Cosmos Hub could have a constitution that enforces immutability at the Hub (no roll-backs, save for bugs of the Cosmos Hub node implementation), while each zone can set their own policies regarding roll-backs in the case of theft and bugs.</p> <p _v-db453a86=\\\"\\\">By enabling interoperability among differing policy zones, the Cosmos network gives the users ultimate freedom and potential for permissionless experimentation.</p> <h2 id=the-hub-and-zones _v-db453a86=\\\"\\\">The Hub and Zones</h2> <p _v-db453a86=\\\"\\\">Here we describe a novel model of decentralization and scalability. Cosmos is a network of many blockchains powered by Tendermint. While existing proposals aim to create a \\\"single blockchain\\\" with total global transaction ordering, Cosmos permits many blockchains to run concurrently with one another and yet retain interoperability.</p> <p _v-db453a86=\\\"\\\">At the basis, the Cosmos Hub manages many independent blockchains called \\\"zones\\\" (sometimes referred to as \\\"shards\\\", in reference to the database scaling technique known as \\\"sharding\\\"). A constant stream of recent block commits from zones posted on the hub allows the hub to keep up with the state of each zone. Likewise, each zone keeps up with the state of the hub (but zones do not keep up with each other except indirectly through the hub). Packets of information are then communicated from one zone to another by posting Merkle-proofs as evidence that the information was sent and received. This mechanism is called inter-blockchain communication, or IBC for short.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/hub_and_zones.png alt=\\\"Figure of hub and zones\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\">Any of the zones can themselves be hubs to form an acyclic graph, but for the sake of clarity we will only describe the simple configuration where there is only one hub, and many non-hub zones.</p> <h3 id=the-hub _v-db453a86=\\\"\\\">The Hub</h3> <p _v-db453a86=\\\"\\\">The Cosmos Hub is a blockchain that hosts a multi-asset distributed ledger, where tokens can be held by individual users or by zones themselves. These tokens can be moved from one zone to another in a special IBC packet called a \\\"coin packet\\\". The hub is responsible for preserving the global invariance of the total amount of each token across the zones. IBC coin packet transactions must be committed by the sender, hub, and receiver blockchains.</p> <p _v-db453a86=\\\"\\\">Since the Cosmos Hub acts as a central ledger of tokens for the whole system, the security of the hub is of paramount importance. While each zone may be a Tendermint blockchain that is secured by as few as 4 (or even less if BFT consensus is not needed), the hub must be secured by a globally decentralized set of validators that can withstand the most severe attack scenarios, such as a continental network partition or a nation-state sponsored attack.</p> <h3 id=the-zones _v-db453a86=\\\"\\\">The Zones</h3> <p _v-db453a86=\\\"\\\">A Cosmos zone is an independent blockchain that exchanges IBC messages with the Hub. From the Hub's perspective, a zone is a multi-asset dynamic-membership multi-signature account that can send and receive tokens using IBC packets. Like a cryptocurrency account, a zone cannot transfer more tokens than it has, but can receive tokens from others who have them. A zone may be designated as an \\\"source\\\" of one or more token types, granting it the power to inflate that token supply.</p> <p _v-db453a86=\\\"\\\">Atoms of the Cosmos Hub may be staked by validators of a zone connected to the hub. While double-spend attacks on these zones would result in the slashing of atoms with Tendermint's fork-accountability, a zone where +⅔ of the voting power are Byzantine can commit invalid state. The Cosmos Hub does not verify or execute transactions committed on other zones, so it is the responsibility of users to send tokens to zones that they trust. In the future, the Cosmos Hub's governance system may pass Hub improvement proposals that account for zone failures. For example, outbound token transfers from some (or all) zones may be throttled to allow for the emergency circuit-breaking of zones (a temporary halt of token transfers) when an attack is detected.</p> <h2 id=inter-blockchain-communication-ibc- _v-db453a86=\\\"\\\">Inter-blockchain Communication (IBC)</h2> <p _v-db453a86=\\\"\\\">Now we look at how the hub and zones communicate with each other. Say that there are three blockchains, \\\"Zone1\\\", \\\"Zone2\\\", and \\\"Hub\\\", and we wish for \\\"Zone1\\\" to produce a packet destined for \\\"Zone2\\\" going through \\\"Hub\\\". For a packet to move from one blockchain to another, a proof is posted on the receiving chain that the sending chain published a packet for the alleged destination. For the receiving chain to check this proof, it must be able keep up with the sender's block headers. This mechanism is similar to that used by sidechains, requiring two interacting chains to \\\"be aware\\\" of one another via a bidirectional stream of proof-of-existence datagrams (transactions).</p> <p _v-db453a86=\\\"\\\">The IBC protocol can naturally be defined using two types of transactions: an <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction, which allows a blockchain to prove to any observer of its most recent block-hash, and an <code _v-db453a86=\\\"\\\">IBCPacketTx</code> transaction, which allows a blockchain to prove to any observer that the given packet was indeed published by the sender's application via a Merkle-proof to the recent block-hash.</p> <p _v-db453a86=\\\"\\\">By splitting the IBC mechanics into two separate transactions <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code>, we allow the native fee market-mechanism of the receiving chain to determine which packets get committed (i.e. acknowledged), while allowing for complete freedom on the sending chain as to how many outbound packets are allowed.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_without_ack.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC without\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\"> In the example above, in order to update the block-hash of \\\"Zone1\\\" on \\\"Hub\\\" (or of \\\"Hub\\\" on \\\"Zone2\\\"), an <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction must be posted on \\\"Hub\\\" with the block-hash of \\\"Zone1\\\" (or on \\\"Zone2\\\" with the block-hash of \\\"Hub\\\").</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">See <a href=#ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</a> and <a href=#ibcpacketcommit _v-db453a86=\\\"\\\">IBCPacketTx</a> for for more information on the two IBC transaction types.</em></p> <h2 id=use-cases _v-db453a86=\\\"\\\">Use Cases</h2> <h3 id=pegging-to-other-cryptocurrencies _v-db453a86=\\\"\\\">Pegging to Other Cryptocurrencies</h3> <p _v-db453a86=\\\"\\\">A priveleged zone can act as the source of a pegged token of another cryptocurrency. A peg is in essence similar to the relationship between an Cosmos hub and zone; both must keep up with the latest blocks of the other in order to verify proofs that tokens have moved from one to the other. A peg-zone on the Cosmos network keeps up with both the hub as well as the other cryptocurrency. The indirection through the peg-zone allows the logic of the hub to remain simple and agnostic to other blockchain consensus strategies, like Bitcoin's proof-of-work mining.</p> <p _v-db453a86=\\\"\\\">For instance, a Cosmos zone with some validator set, possibly the same as that of the hub, could act as an ether-peg, where the TMSP-application on the zone (the \\\"peg-zone\\\") has mechanisms to exchange IBC messages with a peg-contract on the external Ethereum blockchain (the \\\"origin\\\"). This contract would allow ether holders to send ether to the peg-zone by sending it to the peg-contract on Ethereum. Once ether is received by the peg-contract, the ether cannot be withdrawn unless an appropriate IBC packet is received by the peg-contract from the peg-zone. When a peg-zone receives an IBC packet proving that ether was received in the peg-contract for a particular Ethereum account, a corresponding account is created on the peg-zone with that balance. Ether on the peg-zone (\\\"pegged-ether\\\") can then be transferred to and from the hub, and later be destroyed with a transaction that sends it to a particular withdrawal address on Ethereum; an IBC packet proving that the transaction occured on the peg-zone can be posted to the Ethereum peg-contract to allow the ether to be withdrawn.</p> <p _v-db453a86=\\\"\\\">Of course, the risk of such a pegging contract is a rogue validator set. ⅓+ Byzantine voting power could cause a fork, withdrawing ether from the peg-contract on Ethereum while keeping the pegged-ether on the peg-zone. Worse, +⅔ Byzantine voting power can steal ether outright from those who sent it to the peg-contract by deviating from the original pegging logic of the peg-zone.</p> <p _v-db453a86=\\\"\\\">It is possible to address these issues by designing the peg to be \\\"totally accountable\\\". For example, all IBC packets both from the hub as well as from the origin might require acknowledgement by the peg-zone in such a way that all state transitions of the peg-zone can be efficiently challenged and verified by either the hub or the origin's peg-contract. The hub and the origin should allow the peg-zone validators to post collateral, and token transfers out of the peg-contract should be delayed (and collateral unbonding period sufficiently long) to allow for any challenges to be made by independent auditors. We leave the design of the specification and implementation of this system open as a future Cosmos improvement proposal, to be passed by the Cosmos Hub's governance system.</p> <p _v-db453a86=\\\"\\\">While the socio-political atmosphere is not quite evolved enough yet, we can extend the mechanism to allow for zones which peg to the fiat currency of a nation states by forming a validator set out of some combination of institutions responsible for the nation's currency, most particularly, its banks. Of course, extra precautions must be made to only accept currencies backed by strong legal systems that can enforce auditability of the banks' activities by a sufficiently large group of trusted notaries and institutions.</p> <p _v-db453a86=\\\"\\\">A result of this integration would be, for instance, the ability of anyone with a bank account at a participating bank to move dollars from their bank account, which is on the zone, to other accounts on the zone, or to the hub, or to another zone entirely. In this regard, the Cosmos Hub can act as a seamless conduit between fiat currencies and cryptocurrencies, removing the barriers that have until now limitted their interoperabiltiy to the realm of exchanges.</p> <h3 id=ethereum-scaling _v-db453a86=\\\"\\\">Ethereum Scaling</h3> <p _v-db453a86=\\\"\\\">An open issue for Ethereum is how to solve the scaling problem. Currently, Ethereum nodes process every single transaction and also stores all the state. <a href=\\\"https://docs.google.com/presentation/d/1CjD0W4l4-CwHKUvfF5Vlps76fKLEC6pIwu1a_kC_YRQ/mobilepresent?slide=id.gd284b9333_0_28\\\" _v-db453a86=\\\"\\\">link</a>.</p> <p _v-db453a86=\\\"\\\">Since Tendermint can commit blocks much faster than Ethereum's proof-of-work, EVM zones powered by Tendermint consensus and operating on pegged-ether can provide higher performance to Ethereum blockchains. Additionally, though the Cosmos hub and IBC packet mechanics does not allow for arbitrary contract logic execution per se, it can be used to coordinate token movements between Ethereum contracts running on different zones, providing a foundation for token-centric Ethereum scaling via sharding.</p> <h3 id=multi-application-integration _v-db453a86=\\\"\\\">Multi-Application Integration</h3> <p _v-db453a86=\\\"\\\">Cosmos zones run arbitrary application logic, defined at the beginning of the zone's life, and potentially updated over time by governance. Such flexibility allows Cosmos zones to act as pegs to other cryptocurrencies, like Ethereum or Bitcoin, but it also permits derivatives of those blockchains, utilizing the same codebase but with a different validator set and initial distribution. This allows many existing cryptocurrency frameworks, such as that of Ethereum, Zerocash, Bitcoin, CryptoNote, and so on to be used with a higher performance consensus engine (Tendermint Core) on a common network, openning tremendous opportunity for interoperability across platforms. Furthermore, as a multi-asset blockchain, a single transaction may contain multiple inputs and outputs, where each input can be any token type, enabling Cosmos to serve directly as a platform for decentralized exchange, though orders are assumed to be matched via other platforms. Alternatively, a zone can serve as a distributed fault-tolerant exchange (with orderbooks), which can be a strict improvement over existing centralized cryptocurrency exchanges which tend to get hacked over time. </p> <p _v-db453a86=\\\"\\\">Zones can also serve as blockchain-backed versions of enterprise and government systems, where pieces of a particular service, traditionally run by an organization or group of organizations, are instead run as a TMSP application on a certain zone, allowing it to inherit the security and interoperability of the public Cosmos network, without sacrificing control over the underlying service. Thus, Cosmos may offer the best of both worlds for organizations looking to utilize blockchain technology that are wary of relinquishing control completely to a (distributed) third party.</p> <h3 id=network-partition-mitigation _v-db453a86=\\\"\\\">Network Partition Mitigation</h3> <p _v-db453a86=\\\"\\\">Some claim that a major problem with consistency-favouring consensus algorithms like Tendermint is that any network partition which causes there to be no single partition with +⅔ voting power (e.g. ⅓+ goign offline) will halt consensus altogether. The Cosmos architecture can mitigate this problem by using a global hub with regional autonomous zones, where voting power for each zone are distributed based on a common geographic region. For instance, a common paradigm may be for individual cities, or regions, to operate their own zones while sharing a common hub (e.g. the Cosmos Hub), enabling municipal activity to persist in the event that the hub halts due to a temporary network partition. Note that this allows real geological, political, and network-topological features to be considered in designing robust federated fault-tolerant systems.</p> <h3 id=federated-name-resolution-system _v-db453a86=\\\"\\\">Federated Name Resolution System</h3> <p _v-db453a86=\\\"\\\">NameCoin was one of the first blockchains to attempt to solve the name-resolution problem by adapting the Bitcoin blockchain. Unfortunately there have been several issues with this approach.</p> <p _v-db453a86=\\\"\\\">With Namecoin, we can verify that say, <em _v-db453a86=\\\"\\\">@satoshi</em> was registered with a particular public key at some point in the past, but we wouldn’t know whether the public key had since been updated recently unless we download all the blocks since the last update of that name. This is due to the limitation of Bitcoin's UTXO transaction Merkle-ization model where only the transactions (but not mutable application state) are Merkle-ized into the block-hash -- which lets us prove existence, but not the non-existence of later updates to a name. Thus, we can't know for certain the most recent value of a name without trusting a full node, or incurring significant costs in bandwidth by downloading the whole blockchain.</p> <p _v-db453a86=\\\"\\\">Even if a Merkle-ized search tree were implemented in NameCoin, its dependency on proof-of-work makes light client verification problematic. Light clients must download a complete copy of the headers for all blocks in the entire blockchain (or at least all the headers since the last update to a name). This means that the bandwidth requirements scale linearly with the amount of time <a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">[21]</a>. In addition, name-changes on a proof-of-work blockchain requires waiting for additional proof-of-work confirmation blocks, which can take up to an hour on Bitcoin.</p> <p _v-db453a86=\\\"\\\">With Tendermint, all we need is the most recent block-hash signed by a quorum of validators (by voting power), and a Merkle proof to the current value associated with the name. This makes it possible to have a succinct, quick, and secure light-client verification of name values.</p> <p _v-db453a86=\\\"\\\">In Cosmos, we can take this concept and extend it further. Each name-registration zone in Cosmos can have an associated top-level-domain (TLD) name such as \\\".com\\\" or \\\".org\\\", and each name-registration zone can have its own governance and registration rules.</p> <h2 id=issuance-and-incentives _v-db453a86=\\\"\\\">Issuance and Incentives</h2> <h3 id=the-atom-token _v-db453a86=\\\"\\\">The Atom Token</h3> <p _v-db453a86=\\\"\\\">While the Cosmos Hub is a multi-asset distributed ledger, there is a special native token called the <em _v-db453a86=\\\"\\\">atom</em>. Atoms are the only staking token of the Cosmos Hub. Atoms are a license for the holder to vote, validate, or delegate to other validators. Like Ethereum's ether, atoms can also be used to pay for transaction fees to mitigate spam. Additional inflationary atoms and block transaction fees are rewarded to validators and delegators who delegate to validators.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">BurnAtomTx</code> transaction can be used to recover any proportionate amount of tokens from the reserve pool.</p> <h4 id=crowdfund _v-db453a86=\\\"\\\">Crowdfund</h4> <p _v-db453a86=\\\"\\\">The initial distribution of atom tokens and validators on Genesis will go to the funders of the Cosmos Crowdsale (75%), pre-funders (5%), and Cosmos Corp (20%). From genesis onward, 1/3 of the total amount of atoms will be rewarded to bonded validators and delegators every year.</p> <p _v-db453a86=\\\"\\\">See the <a href=https://github.com/cosmos/cosmos/blob/master/PLAN.md _v-db453a86=\\\"\\\">Crowdfund Plan</a> for additional details.</p> <h4 id=vesting _v-db453a86=\\\"\\\">Vesting</h4> <p _v-db453a86=\\\"\\\">To prevent the crowdfund from attracting short-term speculators only interested in a pump-and-dump scheme, the genesis atoms will not be transferrable until they have vested. Each account will vest atoms over a period of 2 years at a constant rate every hour, determined by the total number of genesis atoms / (2 <em _v-db453a86=\\\"\\\"> 365 </em> 24) hours. Atoms earned by the inflationary block reward are pre-vested, and can be transferred immediately, so bonded validators and delegators can earn more than 1/2 of their genesis atoms after the first year.</p> <h3 id=limitations-on-the-number-of-validators _v-db453a86=\\\"\\\">Limitations on the Number of Validators</h3> <p _v-db453a86=\\\"\\\">Unlike Bitcoin or other proof-of-work blockchains, a Tendermint blockchain gets slower with more validators due to the increased communication complexity. Fortunately, we can support enough validators to make for a robust globally distributed blockchain with very fast transaction confirmation times, and, as bandwidth, storage, and parallel compute capacity increases, we will be able to support more validators in the future.</p> <p _v-db453a86=\\\"\\\">On genesis day, the maximum number of validators will be set to 100, and this number will increase at a rate of 13% for 10 years, and settle at 300 validators.</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Year 0: 100\\nYear 1: 113\\nYear 2: 127\\nYear 3: 144\\nYear 4: 163\\nYear 5: 184\\nYear 6: 208\\nYear 7: 235\\nYear 8: 265\\nYear 9: 300\\nYear 10: 300\\n...\\n</code></pre><h3 id=becoming-a-validator-after-genesis-day _v-db453a86=\\\"\\\">Becoming a Validator After Genesis Day</h3> <p _v-db453a86=\\\"\\\">Atom holders who are not already validators can become one by signing and submitting a <code _v-db453a86=\\\"\\\">BondTx</code> transaction. The amount of atoms provided as collateral must be nonzero. Anyone can become a validator at any time, except when the size of the current validator set is greater than the maximum number of validators allowed. In that case, the transaction is only valid if the amount of atoms is greater than the amount of effective atoms held by the smallest validator, where effective atoms include delegated atoms. When a new validator replaces an existing validator in such a way, the existing validator becomes inactive and all the atoms and delegated atoms enter the unbonding state.</p> <h3 id=penalties-for-validators _v-db453a86=\\\"\\\">Penalties for Validators</h3> <p _v-db453a86=\\\"\\\">There must be some penalty imposed on the validators for when they intentionally or unintentionally deviate from the sanctioned protocol. Some evidence is immediately admissible, such as a double-sign at the same height and round, or a violation of \\\"prevote-the-lock\\\" (a rule of the Tendermint consensus protocol). Such evidence will result in the validator losing its good standing and its bonded atoms as well its proportionate share of tokens in the reserve pool -- collectively called its \\\"stake\\\" -- will get slashed.</p> <p _v-db453a86=\\\"\\\">Sometimes, validators will not be available, either due to regional network disruptions, power failure, or other reasons. If, at any point in the past <code _v-db453a86=\\\"\\\">ValidatorTimeoutWindow</code> blocks, a validator's commit vote is not included in the blockchain more than <code _v-db453a86=\\\"\\\">ValidatorTimeoutMaxAbsent</code> times, that validator will become inactive, and lose <code _v-db453a86=\\\"\\\">ValidatorTimeoutPenalty</code> (DEFAULT 1%) of its stake.</p> <p _v-db453a86=\\\"\\\">Some \\\"malicious\\\" behavior do not produce obviously discernable evidence on the blockchain. In these cases, the validators can coordinate out of band to force the timeout of these malicious validators, if there is a supermajority consensus.</p> <p _v-db453a86=\\\"\\\">In situations where the Cosmos Hub halts due to a ⅓+ coalition of voting power going offline, or in situations where a ⅓+ coalition of voting power censor evidence of malicious behavior from entering the blockchain, the hub must recover with a hard-fork reorg-proposal. (Link to \\\"Forks and Censorship Attacks\\\").</p> <h3 id=transaction-fees _v-db453a86=\\\"\\\">Transaction Fees</h3> <p _v-db453a86=\\\"\\\">Cosmos Hub validators can accept any token type or combination of types as a fee for processing a transaction. Each validator can subjectively set whatever exchange rate it wants, and choose whatever transactions it wants, as long as the <code _v-db453a86=\\\"\\\">BlockGasLimit</code> is not exceeded. The collected fees minus any taxes specified below are redistributed to the bonded stakeholders in proportion to their bonded atoms, every <code _v-db453a86=\\\"\\\">ValidatorPayoutPeriod</code> (DEFAULT 1 hour).</p> <p _v-db453a86=\\\"\\\">Of the collected transaction fees, <code _v-db453a86=\\\"\\\">ReserveTax</code> (DEFAULT 2%) will go toward the reserve pool to increase the reserve pool and increase the security and value of the Cosmos network. Also, a <code _v-db453a86=\\\"\\\">CommonsTax</code> (DEFAULT 3%) will go toward the funding of common goods. These funds will go to the <code _v-db453a86=\\\"\\\">CustodianAddress</code> to be distributed in accordance with whatever is decided by the governance system.</p> <p _v-db453a86=\\\"\\\">Atom holders who delegate their voting power to other validators pay a commission to the delegated validator. The commission can be set by each validator.</p> <h3 id=incentivizing-hackers _v-db453a86=\\\"\\\">Incentivizing Hackers</h3> <p _v-db453a86=\\\"\\\">The security of the Cosmos Hub is a function of the security of the underlying validators and the choice of delegation by delegators. In order to encourage the discovery and early reporting of found vulnerabilities, the Cosmos Hub encourages hackers to publish successful exploits via a <code _v-db453a86=\\\"\\\">ReportHackTx</code> transaction that essentially says, \\\"This validator got hacked. Please send bounty to this address\\\". Upon such an exploit, the validator and delegators will become inactive, <code _v-db453a86=\\\"\\\">HackPunishmentRatio</code> (default 5%) of everyone's atoms will get slashed, and <code _v-db453a86=\\\"\\\">HackRewardRatio</code> (default 5%) of everyone's atoms will get rewarded to the hacker's bounty address. The validator must recover the remaining atoms by using their backup key.</p> <p _v-db453a86=\\\"\\\">In order to prevent this feature from being abused to transfer unvested atoms, the portion of vested vs unvested atoms of validators and delegators before and after the <code _v-db453a86=\\\"\\\">ReportHackTx</code> will remain the same, and the hacker bounty will include some unvested atoms, if any.</p> <h2 id=governance _v-db453a86=\\\"\\\">Governance</h2> <p _v-db453a86=\\\"\\\">The Cosmos Hub is operated by a distributed organization that requires a well defined governance mechanism in order to coordinate various changes to the blockchain, such as the variable parameters of the system, as well as software upgrades and constitutional amendments.</p> <p _v-db453a86=\\\"\\\">All validators are responsible for voting on all proposals. Failing to vote on a proposal in a timely manner will result in the validator becoming inactivated automatically for a period of time called the <code _v-db453a86=\\\"\\\">AbsenteeismPenaltyPeriod</code> (DEFAULT 1 week).</p> <p _v-db453a86=\\\"\\\">Delegators automatically inherit the vote of the delegated validator. This vote may be overridden manually. Unbonded atoms get no vote.</p> <p _v-db453a86=\\\"\\\">Each proposal requires a deposit of <code _v-db453a86=\\\"\\\">MinimumProposalDeposit</code> tokens, which may be a combination one or more tokens including atoms. For each proposal, the voters may vote to take the deposit. If more than half of the voters choose to take the deposit (e.g. because the proposal was spam), the deposit goes to the reserve pool, except any atoms which are burned.</p> <p _v-db453a86=\\\"\\\">For each proposal, voters may vote with the following options:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Yay</li> <li _v-db453a86=\\\"\\\">YayWithForce</li> <li _v-db453a86=\\\"\\\">Nay</li> <li _v-db453a86=\\\"\\\">NayWithForce</li> <li _v-db453a86=\\\"\\\">Abstain</li> </ul> <p _v-db453a86=\\\"\\\">A strict majority of Yay or YayWithForce votes (or Nay or NayWithForce votes) is required for the proposal to be decided as accepted (or decided as failed), but 1/3+ can veto the majority decision by voting \\\"with force\\\". When a strict majority is vetoed, everyone gets punished by losing <code _v-db453a86=\\\"\\\">VetoPenaltyFeeBlocks</code> (DEFAULT 1 day's worth of blocks) worth of fees (except taxes which will not be affected), and the party that vetoed the majority decision will be additionally punished by losing <code _v-db453a86=\\\"\\\">VetoPenaltyAtoms</code> (DEFAULT 0.1%) of its atoms.</p> <h3 id=parameter-change-proposal _v-db453a86=\\\"\\\">Parameter Change Proposal</h3> <p _v-db453a86=\\\"\\\">Any of the parameters defined here can be changed with the acceptance of a <code _v-db453a86=\\\"\\\">ParameterChangeProposal</code>.</p> <h3 id=text-proposal _v-db453a86=\\\"\\\">Text Proposal</h3> <p _v-db453a86=\\\"\\\">All other proposals, such as a proposal to upgrade the protocol, will be coordinated via the generic <code _v-db453a86=\\\"\\\">TextProposal</code>.</p> <h2 id=roadmap _v-db453a86=\\\"\\\">Roadmap</h2> <p _v-db453a86=\\\"\\\">See <a href=https://github.com/cosmos/cosmos/blob/master/PLAN.md _v-db453a86=\\\"\\\">the Plan</a>.</p> <h2 id=related-work _v-db453a86=\\\"\\\">Related Work</h2> <p _v-db453a86=\\\"\\\">There have been many innovations in blockchain consensus and scalability in the past couple of years. This section provides a brief survey of a select number of important ones.</p> <h3 id=consensus-systems _v-db453a86=\\\"\\\">Consensus Systems</h3> <h4 id=classic-byzantine-fault-tolerance _v-db453a86=\\\"\\\">Classic Byzantine Fault Tolerance</h4> <p _v-db453a86=\\\"\\\">Consensus in the presence of malicious participants is a problem dating back to the early 80s, when Leslie Lamport coined the phrase \\\"Byzantine fault\\\" to refer to arbitrary process behavior that deviates from the intended behavior, in contrast to a \\\"crash fault\\\", wherein a process simply crashes. Early solutions were discovered for synchronous networks where there is an upper bound on message latency, though pratical use was limited to highly controlled environments such as airplane controllers and datacenters synchronized via atomic clocks. It was not until the late 90s that Practical Byzantine Fault Tolerance (PBFT) <a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">[11]</a> was introduced as an efficient partially synchronous consensus algorithm able to tolerate up to ⅓ of processes behaving arbitrarily. PBFT became the standard algorithm, spawning many variations, including most recently by IBM as part of their contribution to Hyperledger.</p> <p _v-db453a86=\\\"\\\">The main benefit of Tendermint consensus over PBFT is that Tendermint has an improved and simplified underlying structure, some of which is a result of embracing the blockchain paradigm. Tendermint blocks must commit in order, which obviates the complexity and communication overhead associated with PBFT's view-changes. In Cosmos and many cryptocurrencies, there is no need to allow for block <em _v-db453a86=\\\"\\\">N+i</em> where <em _v-db453a86=\\\"\\\">i &gt;= 1</em> to commit, when block <em _v-db453a86=\\\"\\\">N</em> itself hasn't yet committed. If bandwidth is the reason why block <em _v-db453a86=\\\"\\\">N</em> hasn't committed in a Cosmos zone, then it doesn't help to use bandwidth sharing votes for blocks <em _v-db453a86=\\\"\\\">N+i</em>. If a network partition or offline nodes is the reason why block <em _v-db453a86=\\\"\\\">N</em> hasn't committed, then <em _v-db453a86=\\\"\\\">N+i</em> won't commit anyway.</p> <p _v-db453a86=\\\"\\\">In addition, the batching of transactions into blocks allows for regular Merkle-hashing of the application state, rather than periodic digests as with PBFT's checkpointing scheme. This allows for faster provable transaction commits for light-clients and faster inter-blockchain communication.</p> <p _v-db453a86=\\\"\\\">Tendermint Core also includes many optimizations and features that go above and beyond what is specified in PBFT. For example, the blocks proposed by validators are split into parts, Merkle-ized, and gossipped in such a way that improves broadcasting performance (see LibSwift <a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">[19]</a> for inspiration). Also, Tendermint Core doesn't make any assumption about point-to-point connectivity, and functions for as long as the P2P network is weakly connected.</p> <h4 id=bitshares-delegated-stake _v-db453a86=\\\"\\\">BitShares delegated stake</h4> <p _v-db453a86=\\\"\\\">While not the first to deploy proof-of-stake (PoS), BitShares <a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">[12]</a> contributed considerably to research and adoption of PoS blockchains, particularly those known as \\\"delegated\\\" PoS. In BitShares, stake holders elect \\\"witnesses\\\", responsible for ordering and committing transactions, and \\\"delegates\\\", responsible for co-ordinating software updates and parameter changes. Though BitShares achieves high performance (100k tx/s, 1s latency) in ideal conditions, it is subject to double spend attacks by malicious witnesses which fork the blockchain without suffering an explicit economic punishment -- it suffers from the \\\"nothing-at-stake\\\" problem. BitShares attempts to mitigate the problem by allowing transactions to refer to recent block-hashes. Additionally, stakeholders can remove or replace misbehaving witnesses on a daily basis, though this does nothing to explicitly punish a double-spend attack that was successful.</p> <h4 id=stellar _v-db453a86=\\\"\\\">Stellar</h4> <p _v-db453a86=\\\"\\\">Building on an approach pioneered by Ripple, Stellar <a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">[13]</a> refined a model of Federated Byzantine Agreement wherein the processes participating in consensus do not constitute a fixed and globally known set. Rather, each process node curates one or more \\\"quorum slices\\\" each constituting a set of trusted processes. A \\\"quorum\\\" in Stellar is defined to be a set of nodes that contain (is a superset of) at least one quorum slice for each node in the set, such that agreement can be reached.</p> <p _v-db453a86=\\\"\\\">The security of the Stellar mechanism relies on the assumption that the intersection of <em _v-db453a86=\\\"\\\">any</em> two quorums is non-empty, while the availability of a node requires at least one of its quorum slices to consist entirely of correct nodes, creating a trade-off between using large or small quorum-slices that may be difficult to balance without imposing significant assumptions about trust. Ultimately, nodes must somehow choose adequate quorum slices for there to be sufficient fault-tolerance (or any \\\"intact nodes\\\" at all, of which much of the results of the paper depend on), and the only provided strategy for ensuring such a configuration is heirarchical and similar to the Border Gateway Protocol (BGP), used by top-tier ISPs on the internet to establish global routing tables, and by that used by browsers to manage TLS certificates; both notorious for their insecurity.</p> <p _v-db453a86=\\\"\\\">The criticism in the Stellar paper of the Tendermint-based proof-of-stake systems is mitigated by the token strategy described here, wherein a new type of token called the <em _v-db453a86=\\\"\\\">atom</em> is issued that represent claims to future portions of fees and rewards. The advantage of Tendermint-based proof-of-stake, then, is its relative simplicity, while still providing sufficient, and provable security guarantees.</p> <h4 id=bitcoinng _v-db453a86=\\\"\\\">BitcoinNG</h4> <p _v-db453a86=\\\"\\\">BitcoinNG is a proposed improvement to Bitcoin that would allow for forms of vertical scalability, such as increasing the block size, without the negative economic consequences typically associated with such a change, such as the disproportionately large impact on small miners. This improvement is achieved by separating leader election from transaction broadcast: leaders are first elected by proof-of-work in \\\"micro-blocks\\\", and then able to broadcast transactions to be committed until a new micro-block is found. This reduces the bandwidth requirements necessary to win the PoW race, allowing small miners to more fairly compete, and allowing transactions to be committed more regularly by the last miner to find a micro-block.</p> <h4 id=casper _v-db453a86=\\\"\\\">Casper</h4> <p _v-db453a86=\\\"\\\">Casper <a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">[16]</a> is a proposed proof-of-stake consensus algorithm for Ethereum. Its prime mode of operation is \\\"consensus-by-bet\\\". The idea is that by letting validators iteratively bet on which block it believes will become committed into the blockchain based on the other bets that it's seen so far, finality can be achieved eventually. <a href=https://blog.ethereum.org/2015/12/28/understanding-serenity-part-2-casper/ _v-db453a86=\\\"\\\">link</a>. This is an active area of research by the Casper team. The challenge is in constructing a betting mechanism that can be proven to be an evolutionarily stable strategy. The main benefit of Casper as compared to Tendermint may be in offering \\\"availability over consistency\\\" -- consensus does not require a +⅔ quorum of voting power -- perhaps at the cost of commit speed or implementation complexity.</p> <h3 id=horizontal-scaling _v-db453a86=\\\"\\\">Horizontal Scaling</h3> <h4 id=interledger-protocol _v-db453a86=\\\"\\\">Interledger Protocol</h4> <p _v-db453a86=\\\"\\\">The Interledger protocol <a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">[14]</a> is not strictly a scalability solution. It provides an adhoc interoperation between different ledger systems through a loosely coupled bilateral relationship network. Like the Lightning Network, the purpose of ILP is to facilitate payments, but it specifically focuses on payments across disparate ledger types, and extends the atomic transaction mechanism to include not only hash-locks, but also a quroum of notaries (called the Atomic Transport Protocol). The latter mechanism for enforcing atomicity in inter-ledger transactions is similar to Tendermint's light-client SPV echanism, so an illustration of the distinction between ILP and Cosmos/IBC is warranted, and provided below.</p> <ol _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The notaries of a connector in ILP does not support membership changes, and does not allow for flexible weighting between notaries. On the other hand, IBC is designed specifically for blockchains, where validators can have different weights, and where membership can change over the course of the blockchain.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">As in the Lightning Network, the receiver of payment in ILP must online to send a confirmation back to the sender. In a token transfer over IBC, the validator-set of the receiver's blockchain is responsible for providing confirmation, not the receiving user.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The most striking difference is that ILP's connectors are not responsible or keeping authoritative state about payments, whereas in Cosmos, the validators of a hub are the authority of the state of IBC token transfers as well as the authority of the amount of tokens held by each zone (but not the amount of tokens held by each account within a zone). This is he fundamental innovation that allows for secure asymmetric tranfer of tokens from zone to zone; the analog to ILP's connector in Cosmos is a persistent and maximally secure blockchain ledger, the Cosmos Hub.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The inter-ledger payments in ILP need to be backed by an exchange orderbook, as there is no asymmetric transfer of coins from one ledger to another, only the transfer of value or market equivalents.</p> </li> </ol> <h4 id=sidechains _v-db453a86=\\\"\\\">Sidechains</h4> <p _v-db453a86=\\\"\\\">Sidechains <a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">[15]</a> are a proposed mechanism for scaling the Bitcoin network via alternative blockchains that are \\\"pegged\\\" to the Bitcoin blockchain. Sidechains allow bitcoins to effectively move from the Bitcoin blockchain to the sidechain and back, and allow for experimentation in new features on the sidechain. As in the Cosmos Hub, the sidechain and Bitcoin serve as light-clients of each other, using SPV proofs to determine when coins should be transferred to the sidechain and back. Of course, since Bitcoin uses proof-of-work, sidechains centered around Bitcoin suffer from the many problems and risks of proof-of-work as a consensus mechanism. Furthermore, this is a Bitcoin-maximalist solution that doesn't natively support a variety of tokens and inter-zone network topology as Cosmos does. That said, the core mechanism of the two-way peg is in principle the same as that employed by the Cosmos network.</p> <h4 id=ethereum-scalability-efforts _v-db453a86=\\\"\\\">Ethereum Scalability Efforts</h4> <p _v-db453a86=\\\"\\\">Ethereum is currently researching a number of different strategies to shard the state of the Ethereum blockchain to address scalability needs. These efforts have the goal of maintaining the abstraction layer offered by the current Ethereum Virtual Machine across the shared state space. Multiple research efforts are underway at this time. <a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">[18]</a><a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">[22]</a></p> <h5 id=cosmos-vs-ethereum-2-0-mauve _v-db453a86=\\\"\\\">Cosmos vs Ethereum 2.0 Mauve</h5> <p _v-db453a86=\\\"\\\">Cosmos and Ethereum 2.0 Mauve <a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">[22]</a> have different design goals.</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Cosmos is specifically about tokens. Mauve is about scaling general computation.</li> <li _v-db453a86=\\\"\\\">Cosmos is not bound to the EVM, so even different VMs can interoperate.</li> <li _v-db453a86=\\\"\\\">Cosmos lets the zone creator determine who validates the zone.</li> <li _v-db453a86=\\\"\\\">Anyone can start a new zone in Cosmos (unless governance decides otherwise).</li> <li _v-db453a86=\\\"\\\">The hub isolates zone failures so global token invariants are preserved.</li> </ul> <h3 id=general-scaling _v-db453a86=\\\"\\\">General Scaling</h3> <h4 id=lightning-network _v-db453a86=\\\"\\\">Lightning Network</h4> <p _v-db453a86=\\\"\\\">The Lightning Network is a proposed token transfer network operating at a layer above the Bitcoin blockchain (and other public blockchains), enabling many orders of magnitude improvement in transaction throughput by moving the majority of transactions outside of the consensus ledger into so-called \\\"payment channels\\\". This is made possible by on-chain cryptocurrency scripts, which enables parties to enter into bilateral stateful contracts where the state can be updated by sharing digital signatures, and contracts can be closed by finally publishing evidence onto the blockchain, a mechanism first popularized by cross-chain atomic swaps. By openning payment channels with many parties, participants in the Lightning Network can become focal points for routing the payments of others, leading to a fully connected payment channel network, at the cost of capital being tied up on payment channels.</p> <p _v-db453a86=\\\"\\\">While the Lightning Network can also easily extend across multiple independent blockchains to allow for the transfer of <em _v-db453a86=\\\"\\\">value</em> via an exchange market, it cannot be used to assymetrically transfer <em _v-db453a86=\\\"\\\">tokens</em> from one blockchain to another. The main benefit of the Cosmos network described here is to enable such direct token transfers. That said, we expect payment channels and the Lightning Network to become widely adopted along with our token transfer mechanism, for cost-saving and privacy reasons.</p> <h4 id=segregated-witness _v-db453a86=\\\"\\\">Segregated Witness</h4> <p _v-db453a86=\\\"\\\">Segregated Witness is a Bitcoin improvement proposal <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">link</a> that aims to increase the per-block tranasction throughput 2X or 3X, while simultaneously making block syncing faster for new nodes. The brilliance of this solution is in how it works within the limitations of Bitcoin's current protocol and allows for a soft-fork upgrade (i.e. clients with older versions of the software will continue to function after the upgrade). Tendermint being a new protocol has no design restrictions, so it has a different scaling priorities. Primarily, Tendermint uses a BFT round-robin algorithm based on cryptographic signatures instead of mining, which trivially allows horizontal scaling through multiple parallel blockchains, while regular, more frequent block commits allow for vertical scaling as well.</p> <hr _v-db453a86=\\\"\\\"> <h2 id=appendix _v-db453a86=\\\"\\\">Appendix</h2> <h3 id=fork-accountability _v-db453a86=\\\"\\\">Fork Accountability</h3> <p _v-db453a86=\\\"\\\">A well designed consensus protocol should provide some guarantees in the event that the tolerance capacity is exceeded and the consensus fails. This is especially necessary in economic systems, where Byzantine behaviour can have substantial financial reward. The most important such guarantee is a form of <em _v-db453a86=\\\"\\\">fork-accountability</em>, where the processes that caused the consensus to fail (ie. caused clients of the protocol to accept different values - a fork) can be identified and punished according to the rules of the protocol, or, possibly, the legal system. When the legal system is unreliable or excessively expensive to invoke, validators can be forced to make security deposits in order to participate, and those deposits can be revoked, or slashed, when malicious behaviour is detected <a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">[10]</a>.</p> <p _v-db453a86=\\\"\\\">Note this is much unlike Bitcoin, where forking is a regular occurence due to network asynchrony and the probabilistic nature of finding partial hash collissions. Since in many cases, a malicious fork is indistinguishable from a fork due to asynchrony, Bitcoin can not reliably implement fork-accountability, other than the implicit opportunity cost paid by miners for mining an orphaned block.</p> <h3 id=tendermint-consensus _v-db453a86=\\\"\\\">Tendermint Consensus</h3> <p _v-db453a86=\\\"\\\">We call the voting stages <em _v-db453a86=\\\"\\\">PreVote</em> and <em _v-db453a86=\\\"\\\">PreCommit</em>. A vote can be for a particular block or for <em _v-db453a86=\\\"\\\">Nil</em>. We call a collection of +⅔ PreVotes for a single block in the same round a <em _v-db453a86=\\\"\\\">Polka</em>, and a collection of +⅔ PreCommits for a single block in the same round a <em _v-db453a86=\\\"\\\">Commit</em>. If +⅔ PreCommit for Nil in the same round, they move to the next round.</p> <p _v-db453a86=\\\"\\\">Note that strict determinism in the protocol incurs a weak synchrony assumption as faulty leaders must be detected and skipped. Thus, validators wait some amount of time <em _v-db453a86=\\\"\\\">TimeoutPropose</em> before they Prevote Nil, and the value of TimeoutPropose increases with each round. Progression through the rest of a round is fully asychronous, in that progress is only made once a validator hears from +⅔ of the network. In practice, it would take an extremely strong adversary to indefinetely thwart the weak synchrony assumption (causing the consensus to fail to ever commit a block), and doing so can be made even more difficult by using randomized values of TimeoutPropose on each validator.</p> <p _v-db453a86=\\\"\\\">An additional set of constraints, or Locking Rules, ensure that the network will eventually commit just one block at each height. Any malicious attempt to cause more than one block to be committed at a given height can be identified. First, a PreCommit for a block must come with justification, in the form of a Polka for that block. If the validator has already PreCommit a block at round <em _v-db453a86=\\\"\\\">R_1</em>, we say they are <em _v-db453a86=\\\"\\\">locked</em> on that block, and the Polka used to justify the new PreCommit at round <em _v-db453a86=\\\"\\\">R_2</em> must come in a round <em _v-db453a86=\\\"\\\">R_polka</em> where <em _v-db453a86=\\\"\\\">R_1 &lt; R_polka &lt;= R_2</em>. Second, validators must Propose and/or PreVote the block they are locked on. Together, these conditions ensure that a validator does not PreCommit without sufficient evidence as justification, and that validators which have already PreCommit cannot contribute to evidence to PreCommit something else. This ensures both safety and liveness of the consensus algorithm.</p> <p _v-db453a86=\\\"\\\">The full details of the protocol are described <a href=https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm _v-db453a86=\\\"\\\">here</a>.</p> <h3 id=tendermint-light-clients _v-db453a86=\\\"\\\">Tendermint Light Clients</h3> <p _v-db453a86=\\\"\\\">The need to sync all block headers is eliminated in Tendermint-PoS as the existence of an alternative chain (a fork) means ⅓+ of bonded stake can be slashed. Of course, since slashing requires that <em _v-db453a86=\\\"\\\">someone</em> share evidence of a fork, light clients should store any block-hash commits that it sees. Additionally, light clients could periodically stay synced with changes to the validator set, in order to avoid <a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">long range attacks</a> (but other solutions are possible).</p> <p _v-db453a86=\\\"\\\">In spirit similar to Ethereum, Tendermint enables applications to embed a global Merkle root hash in each block, allowing easily verifiable state queries for things like account balances, the value stored in a contract, or the existence of an unspent transaction output, depending on the nature of the application.</p> <h3 id=preventing-long-range-attacks _v-db453a86=\\\"\\\">Preventing Long Range Attacks</h3> <p _v-db453a86=\\\"\\\">Assuming a sufficiently resilient collection of broadcast networks and a static validator set, any fork in the blockchain can be detected and the deposits of the offending validators slashed. This innovation, first suggested by Vitalik Buterin in early 2014, solves the nothing-at-stake problem of other proof-of-stake cryptocurrencies (see <a href=#related-work _v-db453a86=\\\"\\\">Related Work</a>). However, since validator sets must be able to change, over a long range of time the original validators may all become unbonded, and hence would be free to create a new chain, from the genesis block, incurring no cost as they no longer have deposits locked up. This attack came to be known as the Long Range Attack (LRA) in contrast to a Short Range Attack, where validators who are currently bonded cause a fork and are hence punishable (assuming a fork-accountable BFT algorithm like Tendermint consensus). Long Range Attacks are often thought to be a critical blow to proof-of-stake.</p> <p _v-db453a86=\\\"\\\">Fortunately, the LRA can be mitigated as follows. First, for a validator to unbond (thereby recovering their collateral deposit and no longer earning fees to participate in the consensus), the deposit must be made untransferable for an amount of time known as the \\\"unbonding period\\\", which may be on the order of weeks or months. Second, for a light client to be secure, the first time it connects to the network it must verify a recent block-hash against a trusted source, or preferably multiple of them. This condition is sometimes referred to as \\\"weak subjectivity\\\". Finally, to remain secure, it must sync up with the latest validator set at least as frequently as the length of the unbonding period. This ensures that the light client knows about changes to the validator set before a validator has its capital unbonded and thus no longer at stake, which would allow it to deceive the client by carrying out a long range attack by creating new blocks beginning back at a height where it was bonded (assuming it has control of sufficiently many of the early private keys).</p> <p _v-db453a86=\\\"\\\">Note that overcoming the LRA in this way requires an overhaul of the original security model of proof-of-work. In PoW, it is assumed that a light client can sync to the current height from the trusted genesis block at any time simply by processing the proof-of-work in every block header. To overcome the LRA, however, we require that a light client come online with some regularity to track changes in the validator set, and that the first time they come online they must be particularly careful to authenticate what they hear from the network against trusted sources. Of course, this latter requirement is similar to that of Bitcoin, where the protocol and software must also be obtained from a trusted source.</p> <p _v-db453a86=\\\"\\\">The above method for preventing LRA is well suited for validators and full nodes of a Tendermint-powered blockchain because these nodes are meant to remain connected to the network. The method is also suitable for light clients that can be expected to sync with the network frequently. However, for light clients that are not expected to have frequent access to the internet or the blockchain network, yet another solution can be used to overcome the LRA. Non-validator token holders can post their tokens as collateral with a very long unbonding period (e.g. much longer than the unbonding period for validators) and serve light clients with a secondary method of attesting to the validity of current and past block-hashes. While these tokens do not count toward the security of the blockchain's consensus, they nevertheless can provide strong guarantees for light clients. If historical block-hash querying were supported in Ethereum, anyone could bond their tokens in a specially designed smart contract and provide attestation services for pay, effectively creating a market for light-client LRA security.</p> <h3 id=overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">Overcoming Forks and Censorship Attacks</h3> <p _v-db453a86=\\\"\\\">Due to the definition of a block commit, any ⅓+ coalition of voting power can halt the blockchain by going offline or not broadcasting their votes. Such a coalition can also censor particular transactions by rejecting blocks that include these transactions, though this would result in a significant proportion of block proposals to be rejected, which would slow down the rate of block commits of the blockchain, reducing its utility and value. The malicious coalition might also broadcast votes in a trickle so as to grind blockchain block commits to a near halt, or engage in any combination of these attacks. Finally, it can cause the blockchain to fork, by double-signing or violating the locking rules.</p> <p _v-db453a86=\\\"\\\">If a global active adversary were also involved, it can partition the network in such a way that it may appear that the wrong subset of validators were responsible for the slowdown. This is not just a limitation of Tendermint, but rather a limitation of all consensus protocols whose network is potentially controlled by an active adversary.</p> <p _v-db453a86=\\\"\\\">For these types of attacks, a subset of the validators should coordinate through external means to sign a reorg-proposal that chooses a fork (and any evidence thereof) and the initial subset of validators with their signatures. Validators who sign such a reorg-proposal forego their collateral on all other forks. Clients should verify the signatures on the reorg-proposal, verify any evidence, and make a judgement or prompt the end-user for a decision. For example, a phone wallet app may prompt the user with a security warning, while a refrigerator may accept any reorg-proposal signed by +½ of the original validators by voting power.</p> <p _v-db453a86=\\\"\\\">No non-synchronous Byzantine fault-tolerant algorithm can come to consensus when ⅓+ of voting power are dishonest, yet a fork assumes that ⅓+ of voting power have already been dishonest by double-signing or lock-changing without justification. So, signing the reorg-proposal is a coordination problem that cannot be solved by any non-synchronous protocol (i.e. automatically, and without making assumptions about the reliability of the underlying network). For now, we leave the problem of reorg-proposal coordination to human coordination via social consensus on internet media. Validators must take care to ensure that there are no remaining network partitions prior to signing a reorg-proposal, to avoid situations where two conflicting reorg-proposals are signed.</p> <p _v-db453a86=\\\"\\\">Assuming that the external coordination medium and protocol is robust, it follows that forks are less of a concern than censorship attacks.</p> <p _v-db453a86=\\\"\\\">In addition to forks and censorship, which require ⅓+ Byzantine voting power, a coalition of +⅔ voting power may commit arbitrary, invalid state. This is characteristic of any (BFT) consensus system. Unlike double-signing, which creates forks with easily verifiable evidence, detecting committment of an invalid state requires non-validating peers to verify whole blocks, which implies that they keep a local copy of the state and execute each transaction, computing the state root independently for themselves. Once detected, the only way to handle such a failure is via social consensus. For instance, in situations where Bitcoin has failed, whether forking due to software bugs (as in March 2013), or committing invalid state due to Byzantine behavior of miners (as in July 2015), the well connected community of businesses, developers, miners, and other organizations established a social consensus as to what manual actions were required by participants to heal the network. Furthermore, since validators of a Tendermint blockchain may be expected to be identifiable, commitment of an invalid state may even be punishable by law or some external jurisprudence, if desired.</p> <h3 id=tmsp-specification _v-db453a86=\\\"\\\">TMSP specification</h3> <p _v-db453a86=\\\"\\\">TMSP consists of 3 primary message types that get delivered from the core to the application. The application replies with corresponding response messages.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">AppendTx</code> message is the work horse of the application. Each transaction in the blockchain is delivered with this message. The application needs to validate each transactions received with the AppendTx message against the current state, application protocol, and the cryptographic credentials of the transaction. A validated transaction then needs to update the application state — by binding a value into a key values store, or by updating the UTXO database.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">CheckTx</code> message is similar to AppendTx, but it’s only for validating transactions. Tendermint Core’s mempool first checks the validity of a transaction with CheckTx, and only relays valid transactions to its peers. Applications may check an incrementing nonce in the transaction and return an error upon CheckTx if the nonce is old.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">Commit</code> message is used to compute a cryptographic commitment to the current application state, to be placed into the next block header. This has some handy properties. Inconsistencies in updating that state will now appear as blockchain forks which catches a whole class of programming errors. This also simplifies the development of secure lightweight clients, as Merkle-hash proofs can be verified by checking against the block-hash, and the block-hash is signed by a quorum of validators (by voting power).</p> <p _v-db453a86=\\\"\\\">Additional TMSP messages allow the application to keep track of and change the validator set, and for the application to receive the block information, such as the height and the commit votes. </p> <p _v-db453a86=\\\"\\\">TMSP requests/responses are simple Protobuf messages. Check out the <a href=https://github.com/tendermint/tmsp/blob/master/types/types.proto _v-db453a86=\\\"\\\">schema file</a>.</p> <h4 id=appendtx _v-db453a86=\\\"\\\">AppendTx</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The request transaction bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: Result bytes, if any</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Append and run a transaction. If the transaction is valid, returns CodeType.OK</li> </ul> <h4 id=checktx _v-db453a86=\\\"\\\">CheckTx</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The request transaction bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: Result bytes, if any</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Validate a transaction. This message should not mutate the state. Transactions are first run through CheckTx before broadcast to peers in the mempool layer. You can make CheckTx semi-stateful and clear the state upon <code _v-db453a86=\\\"\\\">Commit</code> or <code _v-db453a86=\\\"\\\">BeginBlock</code>, to allow for dependent sequences of transactions in the same block.</li> </ul> <h4 id=commit _v-db453a86=\\\"\\\">Commit</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The Merkle root hash</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Return a Merkle root hash of the application state.</li> </ul> <h4 id=query _v-db453a86=\\\"\\\">Query</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The query request bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The query response bytes</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> </ul> <h4 id=flush _v-db453a86=\\\"\\\">Flush</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Flush the response queue. Applications that implement <code _v-db453a86=\\\"\\\">types.Application</code> need not implement this message -- it's handled by the project.</li> </ul> <h4 id=info _v-db453a86=\\\"\\\">Info</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The info bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Return information about the application state. Application specific.</li> </ul> <h4 id=setoption _v-db453a86=\\\"\\\">SetOption</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Key (string)</code>: Key to set</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Value (string)</code>: Value to set for key</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Set application options. E.g. Key=\\\"mode\\\", Value=\\\"mempool\\\" for a mempool connection, or Key=\\\"mode\\\", Value=\\\"consensus\\\" for a consensus connection. Other options are application specific.</li> </ul> <h4 id=initchain _v-db453a86=\\\"\\\">InitChain</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Validators ([]Validator)</code>: Initial genesis-validators</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Called once upon genesis</li> </ul> <h4 id=beginblock _v-db453a86=\\\"\\\">BeginBlock</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Height (uint64)</code>: The block height that is starting</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Signals the beginning of a new block. Called prior to any AppendTxs.</li> </ul> <h4 id=endblock _v-db453a86=\\\"\\\">EndBlock</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Height (uint64)</code>: The block height that ended</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Validators ([]Validator)</code>: Changed validators with new voting powers (0 to remove)</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Signals the end of a block. Called prior to each Commit after all transactions</li> </ul> <p _v-db453a86=\\\"\\\">See <a href=https://github.com/tendermint/tmsp#message-types _v-db453a86=\\\"\\\">the TMSP repository</a> for more details.</p> <h3 id=ibc-packet-delivery-acknowledgement _v-db453a86=\\\"\\\">IBC Packet Delivery Acknowledgement</h3> <p _v-db453a86=\\\"\\\">There are several reasons why a sender may want the acknowledgement of delivery of a packet by the receiving chain. For example, the sender may not know the status of the destination chain, if it is expected to be faulty. Or, the sender may want to impose a timeout on the packet (with the <code _v-db453a86=\\\"\\\">MaxHeight</code> packet field), while any destination chain may suffer from a denial-of-service attack with a sudden spike in the number of incoming packets.</p> <p _v-db453a86=\\\"\\\">In these cases, the sender can require delivery acknowledgement by setting the initial packet status to <code _v-db453a86=\\\"\\\">AckPending</code>. Then, it is the receiving chain's responsibility to confirm delivery by including an abbreviated<code _v-db453a86=\\\"\\\">IBCPacket</code> in the app Merkle hash.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC with\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\">First, an <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted on \\\"Hub\\\" that proves the existence of an <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Zone1\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 100 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckPending</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350 (say \\\"Hub\\\" is currently at height 300)</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload</code>: &lt;The bytes of a \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Next, an <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted on \\\"Zone2\\\" that proves the existence of an <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Hub\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Hub\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 300</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckPending</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload</code>: &lt;The same bytes of a \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Next, \\\"Zone2\\\" must include in its app-hash an abbreviated packet that shows the new status of <code _v-db453a86=\\\"\\\">AckSent</code>. An <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted back on \\\"Hub\\\" that proves the existence of an abbreviated <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Zone2\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 400 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckSent</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash</code>: &lt;The hash bytes of the same \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Finally, \\\"Hub\\\" must update the status of the packet from <code _v-db453a86=\\\"\\\">AckPending</code> to <code _v-db453a86=\\\"\\\">AckReceived</code>. Evidence of this new finalized status should go back to \\\"Zone2\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Hub\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 301</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckReceived</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash</code>: &lt;The hash bytes of the same \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Meanwhile, \\\"Zone1\\\" may optimistically assume successful delivery of a \\\"coin\\\" packet unless evidence to the contrary is proven on \\\"Hub\\\". In the example above, if \\\"Hub\\\" had not received an <code _v-db453a86=\\\"\\\">AckSent</code> status from \\\"Zone2\\\" by block 350, it would have set the status automatically to <code _v-db453a86=\\\"\\\">Timeout</code>. This evidence of a timeout can get posted back on \\\"Zone1\\\", and any tokens can be returned.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack_timeout.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC with acknowledgement and\\ntimeout\\\" _v-db453a86=\\\"\\\"></p> <h3 id=merkle-tree-proof-specification _v-db453a86=\\\"\\\">Merkle Tree &amp; Proof Specification</h3> <p _v-db453a86=\\\"\\\">There are two types of Merkle trees supported in the Tendermint/Cosmos ecosystem: The Simple Tree, and the IAVL+ Tree.</p> <h4 id=simple-tree _v-db453a86=\\\"\\\">Simple Tree</h4> <p _v-db453a86=\\\"\\\">The Simple Tree is a Merkle tree for a static list of elements. If the number of items is not a power of two, some leaves will be at different levels. Simple Tree tries to keep both sides of the tree the same height, but the left may be one greater. This Merkle tree is used to Merkle-ize the transactions of a block, and the top level elements of the application state root.</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">                *\\n               / \\\\\\n             /     \\\\\\n           /         \\\\\\n         /             \\\\\\n        *               *\\n       / \\\\             / \\\\\\n      /   \\\\           /   \\\\\\n     /     \\\\         /     \\\\\\n    *       *       *       h6\\n   / \\\\     / \\\\     / \\\\\\n  h0  h1  h2  h3  h4  h5\\n\\n  A SimpleTree with 7 elements\\n</code></pre><h4 id=iavl-tree _v-db453a86=\\\"\\\">IAVL+ Tree</h4> <p _v-db453a86=\\\"\\\">The purpose of the IAVL+ data structure is to provide persistent storage for key-value pairs in the application state such that a deterministic Merkle root hash can be computed efficiently. The tree is balanced using a variant of the <a href=http://en.wikipedia.org/wiki/AVL_tree _v-db453a86=\\\"\\\">AVL algortihm</a>, and all operations are O(log(n)).</p> <p _v-db453a86=\\\"\\\">In an AVL tree, the heights of the two child subtrees of any node differ by at most one. Whenever this condition is violated upon an update, the tree is rebalanced by creating O(log(n)) new nodes that point to unmodified nodes of the old tree. In the original AVL algorithm, inner nodes can also hold key-value pairs. The AVL+ algorithm (note the plus) modifies the AVL algorithm to keep all values on leaf nodes, while only using branch-nodes to store keys. This simplifies the algorithm while keeping the merkle hash trail short.</p> <p _v-db453a86=\\\"\\\">The AVL+ Tree is analogous to Ethereum's <a href=http://en.wikipedia.org/wiki/Radix_tree _v-db453a86=\\\"\\\">Patricia tries</a>. There are tradeoffs. Keys do not need to be hashed prior to insertion in IAVL+ trees, so this provides faster ordered iteration in the key space which may benefit some applications. The logic is simpler to implement, requiring only two types of nodes -- inner nodes and leaf nodes. The Merkle proof is on average shorter, being a balanced binary tree. On the other hand, the Merkle root of an IAVL+ tree depends on the order of updates.</p> <p _v-db453a86=\\\"\\\">We will support additional efficient Merkle trees, such as Ethereum's Patricia Trie when the binary variant becomes available.</p> <h3 id=transaction-types _v-db453a86=\\\"\\\">Transaction Types</h3> <p _v-db453a86=\\\"\\\">In the canonical implementation, transactions are streamed to the Cosmos hub application via the TMSP interface.</p> <p _v-db453a86=\\\"\\\">The Cosmos Hub will accept a number of primary transaction types, including <code _v-db453a86=\\\"\\\">SendTx</code>, <code _v-db453a86=\\\"\\\">BondTx</code>, <code _v-db453a86=\\\"\\\">UnbondTx</code>, <code _v-db453a86=\\\"\\\">ReportHackTx</code>, <code _v-db453a86=\\\"\\\">SlashTx</code>, <code _v-db453a86=\\\"\\\">BurnAtomTx</code>, <code _v-db453a86=\\\"\\\">ProposalCreateTx</code>, and <code _v-db453a86=\\\"\\\">ProposalVoteTx</code>, which are fairly self-explanatory and will be documented in a future revision of this paper. Here we document the two primary transaction types for IBC: <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code>.</p> <h4 id=ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</h4> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ChainID (string)</code>: The ID of the blockchain</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockHash ([]byte)</code>: The block-hash bytes, the Merkle root which includes the app-hash</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockPartsHeader (PartSetHeader)</code>: The block part-set header bytes, only needed to verify vote signatures</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockHeight (int)</code>: The height of the commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockRound (int)</code>: The round of the commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Commit ([]Vote)</code>: The +⅔ Tendermint <code _v-db453a86=\\\"\\\">Precommit</code> votes that comprise a block commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ValidatorsHash ([]byte)</code>: A Merkle-tree root hash of the new validator set</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ValidatorsHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the <code _v-db453a86=\\\"\\\">ValidatorsHash</code> against the <code _v-db453a86=\\\"\\\">BlockHash</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">AppHash ([]byte)</code>: A IAVLTree Merkle-tree root hash of the application state</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">AppHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the <code _v-db453a86=\\\"\\\">AppHash</code> against the <code _v-db453a86=\\\"\\\">BlockHash</code></li> </ul> <h4 id=ibcpackettx _v-db453a86=\\\"\\\">IBCPacketTx</h4> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacket</code> is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header (IBCPacketHeader)</code>: The packet header</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload ([]byte)</code>: The bytes of the packet payload. <em _v-db453a86=\\\"\\\">Optional</em></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash ([]byte)</code>: The hash for the bytes of the packet. <em _v-db453a86=\\\"\\\">Optional</em></li> </ul> <p _v-db453a86=\\\"\\\">Either one of <code _v-db453a86=\\\"\\\">Payload</code> or <code _v-db453a86=\\\"\\\">PayloadHash</code> must be present. The hash of an <code _v-db453a86=\\\"\\\">IBCPacket</code> is a simple Merkle root of the two items, <code _v-db453a86=\\\"\\\">Header</code> and <code _v-db453a86=\\\"\\\">Payload</code>. An <code _v-db453a86=\\\"\\\">IBCPacket</code> without the full payload is called an <em _v-db453a86=\\\"\\\">abbreviated packet</em>.</p> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacketHeader</code> is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID (string)</code>: The source blockchain ID</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID (string)</code>: The destination blockchain ID</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number (int)</code>: A unique number for all packets</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status (enum)</code>: Can be one of <code _v-db453a86=\\\"\\\">AckPending</code>, <code _v-db453a86=\\\"\\\">AckSent</code>, <code _v-db453a86=\\\"\\\">AckReceived</code>, <code _v-db453a86=\\\"\\\">NoAck</code>, or <code _v-db453a86=\\\"\\\">Timeout</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type (string)</code>: The types are application-dependent. Cosmos reserves the \\\"coin\\\" packet type</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight (int)</code>: If status is not <code _v-db453a86=\\\"\\\">NoAckWanted</code> or <code _v-db453a86=\\\"\\\">AckReceived</code> by this height, status becomes <code _v-db453a86=\\\"\\\">Timeout</code>. <em _v-db453a86=\\\"\\\">Optional</em></li> </ul> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacketTx</code> transaction is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID (string)</code>: The ID of the blockchain which is providing this packet; not necessarily the source</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight (int)</code>: The blockchain height in which the following packet is included (Merkle-ized) in the block-hash of the source chain</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet (IBCPacket)</code>: A packet of data, whose status may be one of <code _v-db453a86=\\\"\\\">AckPending</code>, <code _v-db453a86=\\\"\\\">AckSent</code>, <code _v-db453a86=\\\"\\\">AckReceived</code>, <code _v-db453a86=\\\"\\\">NoAck</code>, or <code _v-db453a86=\\\"\\\">Timeout</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PacketProof (IAVLProof)</code>: A IAVLTree Merkle-proof for proving the packet's hash against the <code _v-db453a86=\\\"\\\">AppHash</code> of the source chain at given height</li> </ul> <p _v-db453a86=\\\"\\\">The sequence for sending a packet from \\\"Zone1\\\" to \\\"Zone2\\\" through the \\\"Hub\\\" is depicted in {Figure X}. First, an <code _v-db453a86=\\\"\\\">IBCPacketTx</code> proves to \\\"Hub\\\" that the packet is included in the app-state of \\\"Zone1\\\". Then, another <code _v-db453a86=\\\"\\\">IBCPacketTx</code> proves to \\\"Zone2\\\" that the packet is included in the app-state of \\\"Hub\\\". During this procedure, the <code _v-db453a86=\\\"\\\">IBCPacket</code> fields are identical: the <code _v-db453a86=\\\"\\\">SrcChainID</code> is always \\\"Zone1\\\", and the <code _v-db453a86=\\\"\\\">DstChainID</code> is always \\\"Zone2\\\".</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">PacketProof</code> must have the correct Merkle-proof path, as follows:</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">IBC/&lt;SrcChainID&gt;/&lt;DstChainID&gt;/&lt;Number&gt;\\n</code></pre><p _v-db453a86=\\\"\\\">When \\\"Zone1\\\" wants to send a packet to \\\"Zone2\\\" through \\\"Hub\\\", the <code _v-db453a86=\\\"\\\">IBCPacket</code> data are identical whether the packet is Merkle-ized on \\\"Zone1\\\", the \\\"Hub\\\", or \\\"Zone2\\\". The only mutable field is <code _v-db453a86=\\\"\\\">Status</code> for tracking delivery, as shown below.</p> <h2 id=acknowledgements _v-db453a86=\\\"\\\">Acknowledgements</h2> <p _v-db453a86=\\\"\\\">We thank our friends and peers for assistance in conceptualizing, reviewing, and providing support for our work with Tendermint and Cosmos.</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://github.com/zmanian _v-db453a86=\\\"\\\">Zaki Manian</a> of <a href=https://www.skuchain.com/ _v-db453a86=\\\"\\\">SkuChain</a> provided much help in formatting and wording, especially under the TMSP section</li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/jtremback _v-db453a86=\\\"\\\">Jehan Tremback</a> of Althea and Dustin Byington for helping with initial iterations</li> <li _v-db453a86=\\\"\\\"><a href=http://soc1024.com/ _v-db453a86=\\\"\\\">Andrew Miller</a> of <a href=https://eprint.iacr.org/2016/199 _v-db453a86=\\\"\\\">Honey Badger</a> for feedback on consensus</li> <li _v-db453a86=\\\"\\\"><a href=https://fixingtao.com/ _v-db453a86=\\\"\\\">Greg Slepak</a> for feedback on consensus and wording</li> <li _v-db453a86=\\\"\\\">Also thanks to <a href=https://github.com/gleim _v-db453a86=\\\"\\\">Bill Gleim</a> and <a href=http://www.seunghwanhan.com _v-db453a86=\\\"\\\">Seunghwan Han</a> for various contributions.</li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Your name and organization here for your contribution</strong></li> </ul> <h2 id=citations _v-db453a86=\\\"\\\">Citations</h2> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">1</a> Bitcoin: <a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">https://bitcoin.org/bitcoin.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">2</a> ZeroCash: <a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">http://zerocash-project.org/paper</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">3</a> Ethereum: <a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">https://github.com/ethereum/wiki/wiki/White-Paper</a></li> <li _v-db453a86=\\\"\\\"><a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">4</a> TheDAO: <a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">https://download.slock.it/public/DAO/WhitePaper.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">5</a> Segregated Witness: <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki</a></li> <li _v-db453a86=\\\"\\\"><a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">6</a> BitcoinNG: <a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">https://arxiv.org/pdf/1510.02037v2.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">7</a> Lightning Network: <a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">8</a> Tendermint: <a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">https://github.com/tendermint/tendermint/wiki</a></li> <li _v-db453a86=\\\"\\\"><a href=https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf _v-db453a86=\\\"\\\">9</a> FLP Impossibility: <a href=https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf _v-db453a86=\\\"\\\">https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">10</a> Slasher: <a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/</a></li> <li _v-db453a86=\\\"\\\"><a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">11</a> PBFT: <a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">http://pmg.csail.mit.edu/papers/osdi99.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">12</a> BitShares: <a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">https://bitshares.org/technology/delegated-proof-of-stake-consensus/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">13</a> Stellar: <a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">https://www.stellar.org/papers/stellar-consensus-protocol.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">14</a> Interledger: <a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">https://interledger.org/rfcs/0001-interledger-architecture/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">15</a> Sidechains: <a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">https://blockstream.com/sidechains.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">16</a> Casper: <a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">17</a> TMSP: <a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">https://github.com/tendermint/tmsp</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">18</a> Ethereum Sharding: <a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">https://github.com/ethereum/EIPs/issues/53</a></li> <li _v-db453a86=\\\"\\\"><a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">19</a> LibSwift: <a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">20</a> DLS: <a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">21</a> Thin Client Security: <a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">https://en.bitcoin.it/wiki/Thin_Client_Security</a></li> <li _v-db453a86=\\\"\\\"><a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">22</a> Ethereum 2.0 Mauve Paper: <a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">http://vitalik.ca/files/mauve_paper.html</a></li> </ul> <h4 id=unsorted-links _v-db453a86=\\\"\\\">Unsorted links</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html _v-db453a86=\\\"\\\">https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html</a></li> </ul> </div> <section class=section-default _v-db453a86=\\\"\\\"><div class=section-container _v-db453a86=\\\"\\\"> <countdown _v-db453a86=\\\"\\\"></countdown> </div></section> \";\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(122)\n\t__vue_script__ = __webpack_require__(107)\n\t__vue_template__ = __webpack_require__(139)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(133)\n\t__vue_script__ = __webpack_require__(108)\n\t__vue_template__ = __webpack_require__(150)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(135)\n\t__vue_script__ = __webpack_require__(110)\n\t__vue_template__ = __webpack_require__(152)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(129)\n\t__vue_script__ = __webpack_require__(113)\n\t__vue_template__ = __webpack_require__(146)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(134)\n\t__vue_script__ = __webpack_require__(114)\n\t__vue_template__ = __webpack_require__(151)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(124)\n\t__vue_script__ = __webpack_require__(115)\n\t__vue_template__ = __webpack_require__(141)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(130)\n\t__vue_script__ = __webpack_require__(116)\n\t__vue_template__ = __webpack_require__(147)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(132)\n\t__vue_script__ = __webpack_require__(117)\n\t__vue_template__ = __webpack_require__(149)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(127)\n\t__vue_script__ = __webpack_require__(118)\n\t__vue_template__ = __webpack_require__(144)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(136)\n\t__vue_script__ = __webpack_require__(119)\n\t__vue_template__ = __webpack_require__(153)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(131)\n\t__vue_script__ = __webpack_require__(120)\n\t__vue_template__ = __webpack_require__(148)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__webpack_require__(126)\n\t__vue_script__ = __webpack_require__(121)\n\t__vue_template__ = __webpack_require__(143)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** static/js/app.6f90dd1c89c94d7d6ddf.js\n **/","import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n// setup addons\nVue.use(VueRouter)\n\n// enable more descriptive debug messages in the browser console\nVue.config.debug = true\n\n// fetch the page templates\nimport App from './App.vue'\nimport PageIndex from './components/pages/Index.vue'\nimport PageWhitePaper from './components/pages/WhitePaper.vue'\nimport PagePlan from './components/pages/Plan.vue'\nimport PageFAQ from './components/pages/FAQ.vue'\n\n// register the page templates with Vue\nVue.component('page-index', PageIndex)\nVue.component('page-whitepaper', PageWhitePaper)\nVue.component('page-plan', PageWhitePaper)\nVue.component('page-faq', PageFAQ)\n\nlet router = new VueRouter({history: true})\n\n// basic transitions\nrouter.beforeEach(function () {\n  window.scrollTo(0, 0)\n})\n\nrouter.map({\n  '/': {component: PageIndex},\n  '/whitepaper': {component: PageWhitePaper},\n  '/plan': {component: PagePlan},\n  '/faq': {component: PageFAQ}\n})\n\n// filters\n// import fiveNines from './filters/fiveNines'\n// Vue.filter('fiveNines', fiveNines)\n\nrouter.start(App, 'app')\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main.js\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-13cb49dc&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Countdown.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Countdown.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-13cb49dc!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Countdown.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/Countdown.vue\n ** module id = 2\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4d63d08a&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./DataBundle.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./DataBundle.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-4d63d08a!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./DataBundle.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/DataBundle.vue\n ** module id = 3\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./CosmosHub.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./CosmosHub.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./CosmosHub.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/CosmosHub.vue\n ** module id = 106\n ** module chunks = 2\n **/","<template>\n  <site-header></site-header>\n  <router-view></router-view>\n  <site-footer></site-footer>\n</template>\n\n<script>\nimport SiteHeader from './components/site/Header.vue'\nimport SiteFooter from './components/site/Footer.vue'\n\nexport default {\n  components: {\n    SiteHeader,\n    SiteFooter\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n@import './styles/variables.styl'\n\nglobal-reset()\nreset-html5()\n\n*\n  box-sizing border-box\n\nbody\n  df()\n  padding-top 3*x\n\na\n  color link\n  text-decoration none\n  &:hover\n    color hover\n\n@import './styles/article.styl'\n@import './styles/animations.styl'\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** App.vue?b739e0f2\n **/","<template>\n<div class=\"hub-container\">\n  <div class=\"hub\">{{ hubName }}</div>\n  <template v-for=\"spoke in spokes\">\n    <div class=\"spoke {{ spoke.key }} {{ spoke.color }}\">\n      {{ spoke.value }}\n    </div>\n    <data-bundle></data-bundle>\n  </template>\n</div>\n</template>\n\n<script>\nimport DataBundle from './DataBundle.vue'\nexport default {\n  components: {\n    DataBundle\n  },\n  props: ['spokes', 'hubName']\n}\n</script>\n\n<style lang=\"stylus\">\n@import '../styles/variables.styl'\n\nbdw = 0.4*s\nbkw = 1.4*s\n\n.hub, .spoke\n  background #fff\n  border bdw solid mcolor\n  z-index 100\n\nhub-size = 32*s\n.hub\n  width hub-size\n  height hub-size\n  margin-top -0.5*hub-size\n  margin-left -0.5*hub-size\n  border-radius 0.5*hub-size\n\n  font-size 5*s\n  line-height 1.25\n  padding 0 1.5*s\n  font-weight bold\n\n  display flex\n  justify-content center\n  align-items center\n\n  position absolute\n  top 50%\n  left 50%\n\n  color mcolor\n\n  &:before\n    content ''\n    box-sizing border-box\n    display block\n    position absolute\n    top 0\n    left 0\n    width hub-size\n    height hub-size\n\n    border-radius hub-size\n    border bkw dashed mcolor\n\n    margin-left -1 * bdw\n    margin-top -1 * bdw\n\n    transform-origin 50% 50%\n    animation rotate-blocks 30s ease infinite\n\n\nspoke-size = 19*s\n.spoke\n  width spoke-size\n  height spoke-size\n  margin-top -0.5*spoke-size\n  margin-left -0.5*spoke-size\n  border-radius 0.5*spoke-size\n\n  font-size 4*s\n  line-height 1\n\n  display flex\n  justify-content center\n  align-items center\n\n  position absolute\n\n  &:before\n    content ''\n    box-sizing border-box\n    display block\n    position absolute\n    top 0\n    left 0\n    width spoke-size\n    height spoke-size\n\n    border-radius spoke-size\n    border bkw dashed mcolor\n\n    margin-left -1 * bdw\n    margin-top -1 * bdw\n\n    transform-origin 50% 50%\n    animation rotate-blocks 60s ease infinite\n\n.spoke-one, .spoke-one + .data-bundle\n  left 70*s\n  top 15.4*s\n.spoke-two, .spoke-two + .data-bundle\n  left 30*s\n  top 15.4*s\n.spoke-three, .spoke-three + .data-bundle\n  left 10*s\n  top 50*s\n.spoke-four, .spoke-four + .data-bundle\n  left 30*s\n  top 84.6*s\n.spoke-five, .spoke-five + .data-bundle\n  left 70*s\n  top 84.6*s\n.spoke-six, .spoke-six + .data-bundle\n  left 90*s\n  top 50*s\n\n.spoke-one + .data-bundle\n  transform rotate(120deg)\n.spoke-two + .data-bundle\n  transform rotate(60deg)\n.spoke-three + .data-bundle\n  transform rotate(0deg)\n.spoke-four + .data-bundle\n  transform rotate(-60deg)\n.spoke-five + .data-bundle\n  transform rotate(-120deg)\n.spoke-six + .data-bundle\n  transform rotate(-180deg)\n\n.eth-color, .eth-color:before\n  border-color eth-color\n.btc-color, .btc-color:before\n  border-color btc-color\n.dash-color, .dash-color:before\n  border-color dash-color\n.xmr-color, .xmr-color:before\n  border-color xmr-color\n.maid-color, .maid-color:before\n  border-color maid-color\n.doge-color, .doge-color:before\n  border-color doge-color\n\n/*\n.eth-color, .eth-color:before\n  border-color eth-color\n.eth-color + .data-bundle .datastream.datastream-top\n  background eth-color\n\n.btc-color, .btc-color:before\n  border-color btc-color\n.btc-color + .data-bundle .datastream.datastream-top\n  background btc-color\n\n.dash-color, .dash-color:before\n  border-color dash-color\n.dash-color + .data-bundle .datastream.datastream-top\n  background dash-color\n\n.xmr-color, .xmr-color:before\n  border-color xmr-color\n.xmr-color + .data-bundle .datastream.datastream-top\n  background xmr-color\n\n.maid-color, .maid-color:before\n  border-color maid-color\n.maid-color + .data-bundle .datastream.datastream-top\n  background maid-color\n\n.doge-color, .doge-color:before\n  border-color doge-color\n.doge-color + .data-bundle .datastream.datastream-top\n  background doge-color\n*/\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** CosmosHub.vue?de1e32e2\n **/","<template>\n<div class=\"hub-wrapper\">\n  <div class=\"hub\" :class=\"{ 'light-color': lightColor}\">{{ hubName }}</div>\n  <template v-for=\"spoke in spokes\">\n    <div class=\"spoke {{ spoke.key }} {{ spoke.color }}\">\n      {{ spoke.value }}\n    </div>\n    <data-bundle streamwidth=\"thin\" :class=\"{ 'light-color': lightColor}\"></data-bundle>\n  </template>\n</div>\n</template>\n\n<script>\nimport DataBundle from './DataBundle.vue'\nexport default {\n  components: {\n    DataBundle\n  },\n  props: ['spokes', 'hub-name', 'light-color']\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../styles/variables.styl'\n\nbdw = 0.4*sm\nbkw = 1.5*sm\n\n.hub-wrapper\n  width 100*sm\n  height 100*sm\n\n.hub, .spoke\n  border-width bdw\n\nhub-size = 40*sm\n.hub\n  width hub-size\n  height hub-size\n  margin-top -0.5*hub-size\n  margin-left -0.5*hub-size\n  border-radius 0.5*hub-size\n\n  font-size 7*sm\n  line-height 1.25\n  padding 0 5*sm\n\n  &:before\n    width hub-size\n    height hub-size\n\n    border-radius hub-size\n    border-width bkw\n\n    margin-left -1 * bdw\n    margin-top -1 * bdw\n\n\n.hub.light-color\n  color lighten(mcolor, 33%)\n  border-color lighten(mcolor, 33%)\n\nspoke-size = 22*sm\n.spoke\n  width spoke-size\n  height spoke-size\n  margin-top -0.5*spoke-size\n  margin-left -0.5*spoke-size\n  border-radius 0.5*spoke-size\n\n  font-size 5*sm\n  &:before\n    width spoke-size\n    height spoke-size\n\n    border-radius spoke-size\n    border-width bkw\n\n    margin-left -1 * bdw\n    margin-top -1 * bdw\n\n.spoke-one, .spoke-one + .data-bundle\n  left 70*sm\n  top 15.4*sm\n.spoke-two, .spoke-two + .data-bundle\n  left 30*sm\n  top 15.4*sm\n.spoke-three, .spoke-three + .data-bundle\n  left 10*sm\n  top 50*sm\n.spoke-four, .spoke-four + .data-bundle\n  left 30*sm\n  top 84.6*sm\n.spoke-five, .spoke-five + .data-bundle\n  left 70*sm\n  top 84.6*sm\n.spoke-six, .spoke-six + .data-bundle\n  left 90*sm\n  top 50*sm\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** CosmosHubSmall.vue?6dfbec6b\n **/","<template>\n<div class=\"countdown-wrapper\">\n  <div class=\"key\">Crowd sale on October 8th</div>\n  <div class=\"value\">{{ countdown }}</div>\n  <form>\n    <input type=\"email\" placeholder=\"your@email.com\">\n    <input type=\"submit\" value=\"Alert Me\">\n  </form>\n</div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport countdown from 'countdown'\nimport 'moment-countdown'\nexport default {\n  data () {\n    return {\n      countdown: '',\n      countdownFunction: countdown\n    }\n  },\n  methods: {\n    updateCountdown () {\n      this.countdown = moment('2016-10-8').countdown().toString()\n    }\n  },\n  ready () {\n    let self = this\n    setInterval(function () {\n      self.updateCountdown()\n    }, 1000)\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../styles/variables.styl'\n\n.countdown-wrapper\n  text-align center\n  border 1px solid bc\n  padding 0.75*x x\n\n  max-width 480px\n\n  .key\n    color txt\n    font-weight bold\n\n  .value\n    color light\n    margin-bottom x\n\n  form\n    display flex\n    flex-flow row\n\n    max-width 320px\n    margin x auto 0.25*x\n\n  input\n    -webkit-appearance none\n    background #fff\n    border-radius 0\n    padding 0 0.5*x\n    margin 0\n    height 2*x\n\n    df()\n    line-height 2*x - 2px\n    border 1px solid light\n  \n\n    &[type=\"email\"]\n      flex 2\n      margin-right 0.5*x\n    &[type=\"submit\"]\n      flex 1\n      background mcolor\n      color #fff\n      font-weight bold\n\n    \n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** Countdown.vue?b15443fc\n **/","<template>\n<div class=\"data-bundle\" v-bind:style=\"bundleStyle\">\n  <div class=\"datastream datastream-top\" v-bind:style=\"streamStyle\">\n    <p v-bind:style=\"pStyle\">&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;&rarr;&nbsp;</p>\n  </div>\n  <div class=\"datastream datastream-bottom\" v-bind:style=\"streamStyle\">\n    <p v-bind:style=\"pStyle\">&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;&larr;&nbsp;</p>\n  </div>\n</div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      smallMult: 0.3,\n      hexString: '2b12fcf1b09288fcaff797d71e950e71ae42b91e8bdb2304758dfcffc2b620e3'\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../styles/variables.styl'\n\ndb-width = 30*s\ndb-height = 6*s\n\n.data-bundle\n  position absolute\n  transform-origin 0% 50%\n  margin-top -0.5*db-height\n\n.datastream\n  overflow hidden\n  position relative\n  color #fff\n  height 0.5*db-height\n  width db-width\n  p\n    position absolute\n    width 100%\n    height 100%\n\n    font-size 3*s\n    line-height 1\n\n  &.datastream-top\n    background lighten(mcolor, 5%)\n    p\n      animation scroll-right 8s linear infinite, glow 2.5s infinite\n      color lighten(mcolor, 40%)\n  &.datastream-bottom\n    background mcolor\n    p\n      animation scroll-left 8s linear infinite, glow-alternate 2.5s infinite\n      color lighten(mcolor, 90%)\n\n.data-bundle.light-color\n  .datastream.datastream-bottom\n    background lighten(mcolor, 33%)\n\n@keyframes scroll-left\n  0%\n    transform translateX(0%)\n  100%\n    transform translateX(-100%)\n\n@keyframes scroll-right\n  0%\n    transform translateX(-100%)\n  100%\n    transform translateX(0%)\n@keyframes glow\n  0%\n    color lighten(mcolor, 40%)\n  45%\n    color lighten(mcolor, 90%)\n  55%\n    color lighten(mcolor, 90%)\n  100%\n    color lighten(mcolor, 40%)\n@keyframes glow-alternate\n  0%\n    color lighten(mcolor, 90%)\n  45%\n    color lighten(mcolor, 40%)\n  55%\n    color lighten(mcolor, 40%)\n  100k\n    color lighten(mcolor, 90%)\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** DataBundle.vue?55fc9162\n **/","<template>\n<div class=\"hubs-wrapper\">\n  <cosmos-hub id=\"hub-one\" hub-name=\"Cosmos Hub\" :spokes=\"spokesOne\"></cosmos-hub>\n  <cosmos-hub id=\"hub-two\" hub-name=\"Peer Hub\" :spokes=\"spokesTwo\"></cosmos-hub>\n  <data-bundle id=\"multiple-hubs-connector\"></data-bundle>\n</div>\n</template>\n\n<script>\nimport CosmosHub from './CosmosHubSmall.vue'\nimport DataBundle from './DataBundle.vue'\n\nexport default {\n  components: {\n    CosmosHub,\n    DataBundle\n  },\n  data () {\n    return {\n      spokesOne: [\n        { key: 'spoke-one', value: 'BTC', color: 'btc-color' },\n        { key: 'spoke-two', value: 'ETH', color: 'eth-color' },\n        { key: 'spoke-three', value: 'XMR', color: 'xmr-color' },\n        { key: 'spoke-four', value: 'MAID', color: 'maid-color' },\n        { key: 'spoke-five', value: 'DOGE', color: 'doge-color' }\n        // { key: 'spoke-six', value: 'DASH', color: 'dash-color' }\n      ],\n      spokesTwo: [\n        { key: 'spoke-one', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-two', value: 'EVM', color: 'eth-color' },\n        // { key: 'spoke-three', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-four', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-five', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-six', value: 'EVM', color: 'eth-color' }\n      ]\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../styles/variables.styl'\n\nspacing = -16*sm\n\n#hub-one\n#hub-two\n  position absolute\n  top 50%\n  margin-top -50*sm\n\n#hub-one\n  left spacing\n\n#hub-two\n  right spacing\n\n#multiple-hubs-connector\n  top 50%\n  left 50%\n\n  margin-left -15*s\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** MultipleHubs.vue?6582a93c\n **/","<template>\n<div class=\"gfx-wrapper height-forty\">\n  <div class=\"one-hub\" template v-if=\"type === 'one-zone'\">\n    <cosmos-hub hub-name=\"Zone\"></cosmos-hub>\n  </div>\n  <div class=\"two-hubs\" v-if=\"type === 'two-zones'\">\n    <cosmos-hub id=\"two-hubs-one\" hub-name=\"Zone 1\"></cosmos-hub>\n    <data-bundle></data-bundle>\n    <cosmos-hub id=\"two-hubs-two\" hub-name=\"Zone 2\"></cosmos-hub>\n  </div>\n  <div class=\"three-hubs\" template v-if=\"type === 'three-zones'\">\n    <cosmos-hub id=\"three-hubs-one\" hub-name=\"EVM 1.0\"></cosmos-hub>\n    <arrow></arrow>\n    <cosmos-hub id=\"three-hubs-two\" hub-name=\"EVM 2.0\"></cosmos-hub>\n    <cosmos-hub id=\"three-hubs-three\" hub-name=\"EVM 3.0\"></cosmos-hub>\n  </div>\n</div>\n</template>\n\n<script>\nimport CosmosHub from './CosmosHub.vue'\nimport DataBundle from './DataBundle.vue'\nimport Arrow from './Arrow.vue'\n\nexport default {\n  components: {\n    CosmosHub,\n    DataBundle,\n    Arrow\n  },\n  props: ['type']\n}\n</script>\n\n<style lang=\"stylus\">\n@import '../styles/variables.styl'\n\nbdw = 0.4*s\nbkw = 1.5*s\n\n.two-hubs\n  #two-hubs-one .hub\n    left 21%\n\n  #two-hubs-two .hub\n    left 79%\n    border-color lighten(mcolor, 50%)\n    color lighten(mcolor, 33%)\n    &:before\n      border-color lighten(mcolor,33%)\n\n  .data-bundle\n    position absolute\n    top 50%\n    left 35%\n\n.three-hubs\n  hub-size = 24*s\n\n  .hub\n    width hub-size\n    height hub-size\n    margin-top -0.5*hub-size\n    margin-left -0.5*hub-size\n    border-radius 0.5*hub-size\n    padding 0 x\n\n    font-size 4*s\n    line-height 1.0\n    font-weight normal\n\n    border-color eth-color\n\n    &:before\n      width hub-size\n      height hub-size\n\n      border-radius hub-size\n      border-color eth-color\n\n      margin-left -1 * bdw\n      margin-top -1 * bdw\n\n  #three-hubs-one .hub\n    left 13%\n\n  #three-hubs-two .hub\n    left 50%\n\n  #three-hubs-three .hub\n    left 87%\n\n  .data-bundle\n    top 50%\n    left 10%\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** Zone.vue?746c668c\n **/","<template>\n<div class=\"article-wrapper\">\n<h1>FAQ</h1>\n\n<ul>\n<li><strong>What is sharding?</strong></li>\n</ul>\n<p>Sharding is about dividing the workload up into pieces for the purpose of\nhorizontal scaling.  There are many ways to handle sharding in SQL databases,\nbut sharding for blockchains is an emerging field.  The closest thing we have\nare the altcoins ecosystem, but this isn&#39;t very good because all the altcoins\nare their own silos with no good way to interoperate except via centralized\nexchanges, or tricks like hashlocked transactions (like the Lightning Network),\nwhich have their own benefits and drawbacks.</p>\n<ul>\n<li><strong>How does Cosmos do sharding?</strong></li>\n</ul>\n<p>Cosmos implements sharding using zones. It&#39;s a sharding solution that preserves\nthe sovereignty of the shard as a self-governing and self-validating system.\nThe Cosmos Hub doesn&#39;t care about the internal state of an Cosmos zone --\nrather, all that matters to the Cosmos Hub is what the zone explicitly\ncommunicates to the Cosmos Hub via IBC packets.</p>\n<ul>\n<li><strong>What&#39;s an IBC packet?</strong></li>\n</ul>\n<p>IBC packets are packets of data that one blockchain wishes to send to another\nblockchain.  But instead of literally sending a packet of bytes via the TCP/IP\nor UDP/IP protocol (which is designed for singular, physical, machines), IBC\npackets require cryptographic proof-of-existence.  Since no single node or\nvalidator has the authority to speak on behalf of the entire blockchain, and,\nsince we don&#39;t want to rely on the integrity of the IP internet infrastructure,\ninstead we rely on a cryptographic proof of a blockchain hash commit (+2/3 of\nsignatures for that blockchain hash) along with a Merkle-proof from the\naforementioned blockhash to a packet in the blockchain&#39;s &quot;application state&quot;,\nwhich proves that the blockchain validators agreed to publish this packet of\ninformation.  So, anyone who sees an IBC packet (regardless of the source of\nthis data) can verify its integrity.</p>\n<ul>\n<li><strong>Isn&#39;t this just sidechains, like what Blockstream proposed?</strong></li>\n</ul>\n<p>Yes. Exactly. Except in Cosmos, the hubs and zones are all powered by Tendermint\nconsensus.  IBC on Tendermint is great because of all the reasons why\nlight-client payment verification is great as compared to proof-of-work --\nsuperior speed, no need to download all the block headers, 1-block finality, and\nsecurity via collateral.  So Cosmos is a bit like Blockstream&#39;s sidechains\nproposal, except with the Cosmos Hub at the center instead of Bitcoin, which\nmakes everything faster and simpler, and arguably more secure.  Also the fact\nthat the Cosmos Hub is a multiasset blockchain is a big advantage.</p>\n<ul>\n<li><strong>How does Cosmos compare to Ethereum sharding?</strong></li>\n</ul>\n<p>Vitalik is working on sharding solutions for Ethereum, but the solutions I&#39;ve\nseen assume that all the shards are running the same VM.  The biggest difference\nbetween what Vitalik&#39;s latest sharding design and Cosmos is that the Cosmos Hub\nlets you plug in any zone, even for entirely different VMs or zones with no VMs\nat all (like Bitcoind).  This works because the Cosmos Hub is about preserving\nthe total number of tokens across zones/shards, whereas Vitalik&#39;s scaling\nsolution is about sharding the general Ethereum state machine state.  The zones\nof the Cosmos Hub don&#39;t care that other zones fail or crash, as long as the\nCosmos Hub continues to function and preserves the total number of tokens across\nall the zones.  Vitalik is trying to create a sharding solution where none of\nthe shards may fail, because the internal state of those shards can mean\nanything at all.  Vitalik is trying to solve a much more difficult problem. If\nwe do our job right, we will be able to implement whatever he comes up within\nCosmos.</p>\n<ul>\n<li><strong>Why are shards called zones?</strong></li>\n</ul>\n<p>Shards are called zones in Cosmos because they really are like sovereign\neconomic zones.  We&#39;ve seen a taste of blockchain governance with the Ethereum\nhard-fork following TheDAO hack.  In Cosmos, all zones are sovereign and can\nconstruct their own governance policies, and yet they can all interoperate on\nthe Cosmos Hub.  That&#39;s the benefit of the IBC abstraction, that it&#39;s about\naccountable and cryptographicaly verifiable communication.</p>\n<ul>\n<li><strong>How does one exchange currencies in this system?</strong></li>\n</ul>\n<p>For tokens outside the Cosmos system, they can only be introduced via pegged\nderivatives (akin to what Blockstream&#39;s sidechains paper was suggesting).  I\nsuppose you could also use other means to track the value of some token inside\nthe Cosmos network by involving prediction markets or betting, but I&#39;m not an\nexpert on those.  They can be supported too by other zones, but I won&#39;t go into\nthem here.</p>\n<p>In the Cosmos Hub, pegs will be tied to a specific zone; that is, a zone and its\nvalidator sets are expected to also be involved in a m-of-n contract on the\ntarget chain, like Bitcoin or Ethereum.</p>\n<pre><code>           _ peg smart contract\n          /\n  [  Ethereum  ] &lt;--&gt; [ EtherCosmos Peg Zone ] &lt;-IBC-&gt; [  Cosmos Hub  ] &lt;-IBC-&gt; (Bitcoin) [ PoW/Casper ]\n                      [      Tendermint      ]         [  Tendermint  ] &lt;-IBC-&gt; (exchange)\n</code></pre><p>Once the tokens are in the hub, its must easier to exchange currencies.  Either\ntrade with another account directly in the Cosmos Hub (a Send transaction with\ntwo inputs and two outputs, with 2 different assets, swapped).  But this\nrequires both parties to the trade to be online.  Instead, you can send your\ntokens to an exchange zone, to take advantage of an order-book.</p>\n<ul>\n<li><strong>So can I trade BTC for ETH using Cosmos?</strong></li>\n</ul>\n<p>You can, if you trust the respective Ethereum and Bitcoin peg zones.  If\nalternatives of Ethereum and Bitcoin (ie. same codebase, different network)\nlaunch on Cosmos, you can trade those directly.</p>\n<ul>\n<li><strong>Does Cosmos involve escrow?</strong></li>\n</ul>\n<p>Not really, though the hub may be thought of as an escrow agent mediating\nbetween two zones, but that&#39;s of course the point.  However, the pegs in\npeg-zones may well utilize escrow to allow, for instance, BTC to move into a\nzone.</p>\n<ul>\n<li><strong>How does one switch blockchains in this system?</strong></li>\n</ul>\n<p>The zone is responsible for committing an IBC packet with outbound coins for\nanother zone.  Zones can do whatever they want, so it&#39;s really up to the logic\nof the zone, as well as the client.  Ideally there will be a standard\nspecification for constructing a transaction to move funds from one zone to\nanother.  So an EVM zone should be implemented such that it can process this\nuniversal transaction format that lets any simple user account send funds to\nanother zone via the Cosmos Hub (or any other hub).  This may be something to be\ndefined as an IETF or W3C specification, but it&#39;s a bit too early for that, so\nwe should forge ahead and document the spec for everyone to see.</p>\n<p>There should be some specification for defining:</p>\n<ul>\n<li>the destination zone</li>\n<li>the intermediary zones (typically the Cosmos Hub)</li>\n<li>the assets and quantity</li>\n<li>the destination account or smart contract</li>\n<li>any other information</li>\n</ul>\n<p>These are specified <a href=\"https://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md#ibcpackettx\">here</a>.</p>\n<p>There will also be way to navigate these zones, whereby nodes or validators of a\nzone can publish their IP endpoints or whatnot, voluntarily.  So zone discovery\nis a thing, but mostly it&#39;s up to the end-client software to understand this\nplumbing.  End-users shouldn&#39;t know all of the details except a few rules for\nsafety, like &quot;don&#39;t send money to zones you don&#39;t know&quot;.</p>\n<ul>\n<li><strong>Is consensus configurable?  When I am switching between blockchains won&#39;t my\nconsensus be different in different scenarios?</strong></li>\n</ul>\n<p>We can accomodate other PoS consensus mechanisms as long as they have a very\nclean and consise light-client verification protocol.  Or, even Tendermint might\nupgrade to support additional features.  It will be up to the Cosmos Foundation\nand the Cosmos governance to decide whether to support them.  It isn&#39;t necessary\nif there can be adapter zones.  That&#39;s what a Bitcoin peg zone is -- an adapter\nzone to sit between PoW and Tendermint.</p>\n<ul>\n<li><strong>What is the maximum number of nodes in Cosmos?  Does each zone or hub have\ntheir own nodes?</strong></li>\n</ul>\n<p>Yes.  Each zone has its own nodes, we don&#39;t re-use public keys (yet, though we\ncould in the future).  Different atoms bonded in each zone, but all the same\natom token.</p>\n<ul>\n<li><strong>Do the validatiors that are chosen, validate transactions for every zone and\nHub?</strong></li>\n</ul>\n<p>No.  Validators for a zone only validate transactions for their zone.</p>\n<ul>\n<li><strong>The whitepaper states &quot;Zones communicate with one another through a hub,\nprimarily in the form of assymetric transfer of some set of tokens from one\nzone to another.&quot; Can you talk about what exactly the asymmetric transfer is?</strong></li>\n</ul>\n<p>It&#39;s maybe not the best term, but we coined it to refer to the kind of\ninter-zone token transfer that happens in the Cosmos Hub.  The transfer of\ntokens was not via any bidirectional or bilateral exchange mechanism, or even\nthrough a peg.  It&#39;s as if the token moved from one zone to another.  The trick\nis that there is a common crypto &quot;depository&quot; -- the Cosmos Hub.</p>\n<ul>\n<li><strong>According to the whitepaper: &quot;Cosmos reflects this position in that it makes\nno distinction between hubs - there is no &quot;top&quot; hub, and the most popular or\nsuccessful hub is a matter of adoption by zones. &quot;  In your view what will make\nhubs more successful and what will make them unsuccessful?</strong></li>\n</ul>\n<p>There will be different features... speed (limiting to 100 validators),\nflexibility (e.g. if implemented on the EVM), or perhaps nation-state\nsponsorship or better integration with the legal system (via traditional banking\npartners), etc.  One could also imagine a much slower, but more distributed\n&quot;slow hub&quot;, or much faster but less decentralized &quot;high-frequency hubs&quot;.</p>\n<ul>\n<li><strong>What will be the process for abandoning validators that misbehave?</strong></li>\n</ul>\n<p>If a validator misbehaves on its own by double-signing at the same height &amp;\nround, then the evidence is very short and simple -- it&#39;s just the two\nconflicting votes.  This evidence can be included in the the CosmosHub as a\nSlash transaction, and the validator will immediately become inactive and\nslashed after the Slash transaction gets committed.</p>\n<p>If there is a zone fork, either of the Cosmos Hub or any of the zones, the two\nconflicting commits also constitute evidence.  This is a much more complicated\ndata structure.  It is guaranteed to slash at least 1/3 of the validators&#39; atoms\nfor that zone.</p>\n<ul>\n<li><strong>Can delegators also be validators?  Or are delegators never validators?</strong></li>\n</ul>\n<p>Delegators are never validators.  If someone who operates validator nodes wishes\nto delegate, they need to do so with their free and unbonded atoms.</p>\n<ul>\n<li><strong>&quot;Validators&#39; voting powers are determined at genesis, or is changed\ndeterministically by the blockchain, depending on the application.&quot;  Any idea\nwhat shape this will take initially what are you thinking for voting powers?</strong></li>\n</ul>\n<p>(Are these two separate questions?  What do you mean &quot;what are you thinking for\nvoting powers?&quot;)</p>\n<p>I have no idea what shape this will take.  We need to reach out to a wide\naudience for the crowdfund, and that will help us get a better distribution,\neven if we don&#39;t know exactly who owns these tokens.</p>\n<p>In some way it doesn&#39;t matter, because even if there are attacks and mishaps\nalong the way, eventually through hard-forks the blockchain can purge the bad\nactors.  It&#39;s antifragile.</p>\n<ul>\n<li><strong>Can you give some details about what you took(derived) from the DLS\nconsensus algorithm?</strong></li>\n</ul>\n<p>The locking mechanism was something that I hadn&#39;t seen in other papers, like\nPBFT.  There&#39;s an equivalence to PBFT&#39;s system, but the locking and unlocking\nmechanics in PBFT happen implicitly.</p>\n<p>Increasing the length of time of a round to circumvent partial-synchrony is\nsomething that the early versions of Tendermint Consensus used.  In the current\nversion of Tendermint Consensus, which is more asynchronous, this &quot;time delay&quot;\nis limited to the timeout period after a 2/3 quorum of any votes for the same\nheight &amp; round.</p>\n<p>The 2/3 quorum of any votes to synchronize validators, a kind of virtual clock\ncycle, was also inspired by DLS&#39;s paper in the later sections (after section 5).</p>\n<ul>\n<li><strong>Why is Cosmos&#39;s governance better than any other options out there?</strong></li>\n</ul>\n<p>One is, the stakeholders are well defined, as is the prior social contract.  ETH\nhad a hard time with the fork because they had to ask the ether holders as well\nas the miners, but the ether holders had no prior social contract or obligation\nto partake in governance, so no quorum could be reached in time.  Asking the\nminers is necessary to ensure that the hard-fork will have support, but after a\nwhile they tend to simply follow the money and incentives.</p>\n<p>Cosmos is different because instead of anonymous miners we have social contract\nbound validators and delegators who have stake, and, they have the obligation to\npartake in governance.</p>\n<ul>\n<li><strong>What use cases do you think are most compelling in the future?</strong></li>\n</ul>\n<p>Cosmos allows everyone to benefit from the network effect of various\ninteroperable tokens and zones.  For example, if anyone creates a peg zone or a\nnew token type, all the other zones can use them if they support the new token\ntype.</p>\n<p>So, the Cosmos Hub has a particular use-case that isn&#39;t filled by anything\ntoday.  The best use-case for Cosmos Zones are for any token-based blockchain\nthat benefit from the new interoperability, speed, and scalability properties.\nIt may be a kind of distributed exchange.</p>\n<ul>\n<li><strong>Do you feel Cosmos and Interledger are complimentary or are you directly\ncompeting with it?</strong></li>\n</ul>\n<p>They&#39;re more complementary than competing.  For one, Interledger will be very\nuseful for creating Cosmos zones that interface with the traditional financial\nsystem.</p>\n<p>Interledger can also be used directly between blockchain zones.  For this\nuse-case, the Cosmos Hub may be a competitive option, as compared to other\noptions for Interledger notary sets.  The Cosmos Hub validators could also offer\ntheir services as an Interledger notary set.</p>\n</div>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <countdown></countdown>\n</div></section> \n</template>\n\n<script>\nimport Countdown from '../Countdown.vue'\n\nexport default {\n  components: {\n    Countdown\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../../styles/variables.styl'\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** FAQ.vue?11aff284\n **/","<template>\n<section-cover></section-cover>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <countdown class=\"countdown-top\"></countdown>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <zone type=\"one-zone\"></zone>\n  <div class=\"section-content\">\n    <p>A Cosmos <a href=\"#\">zone</a> is a distributed ledger (blockchain). Each zone can have differing transaction logic and policies.</p>\n  </div>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <zone type=\"two-zones\"></zone>\n  <div class=\"section-content\">\n    <p>We&rsquo;ve developed a trick that allows zones to communicate with each other directly. It&rsquo;s based on classical BFT algorithms like Tendermint.</p>\n  </div>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <div class=\"gfx-wrapper square\">\n    <cosmos-hub hub-name=\"Cosmos Hub\" :spokes=\"evmSpokes\"></cosmos-hub>\n  </div>\n  <div class=\"section-content\">\n    <p>With this technique, we could make Ethereum scale by constructing a common hub blockchain. All inter-zone token movements go through the hub.</p>\n  </div>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <zone type=\"three-zones\"></zone>\n  <div class=\"section-content\">\n    <p>Upgrading the EVM would be seamless, with less risk of contentious hard-forks. Anyone could plug in a better smart contract system.</p>\n  </div>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <div class=\"gfx-wrapper square\">\n    <cosmos-hub hub-name=\"Cosmos Hub\" :spokes=\"distSpokes\"></cosmos-hub>\n  </div>\n  <div class=\"section-content\">\n    <p>We could import other blockchains and have a distributed exchange on its own zone.</p>\n  </div>\n</div></section>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <div class=\"gfx-wrapper height-seventy\">\n    <multiple-hubs></multiple-hubs>\n  </div>\n  <div class=\"section-content\">\n    <p>The Cosmos hub isn&rsquo;t the center of the universe. Any zone can be a hub.</p>\n  </div>\n</div></section> \n\n<section class=\"section-default\"><div class=\"section-container\">\n  <countdown></countdown>\n</div></section> \n</template>\n\n<script>\nimport Countdown from '../Countdown.vue'\nimport CosmosHub from '../CosmosHub.vue'\nimport MultipleHubs from '../MultipleHubs.vue'\nimport SectionCover from '../SectionCover.vue'\nimport Zone from '../Zone.vue'\n\nexport default {\n  components: {\n    CosmosHub,\n    Countdown,\n    MultipleHubs,\n    SectionCover,\n    Zone\n  },\n  data () {\n    return {\n      evmSpokes: [\n        { key: 'spoke-one', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-two', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-three', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-four', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-five', value: 'EVM', color: 'eth-color' },\n        { key: 'spoke-six', value: 'EVM', color: 'eth-color' }\n      ],\n      distSpokes: [\n        { key: 'spoke-one', value: 'BTC', color: 'btc-color' },\n        { key: 'spoke-two', value: 'ETH', color: 'eth-color' },\n        { key: 'spoke-three', value: 'XMR', color: 'xmr-color' },\n        { key: 'spoke-four', value: 'MAID', color: 'maid-color' },\n        { key: 'spoke-five', value: 'DOGE', color: 'doge-color' },\n        { key: 'spoke-six', value: 'DASH', color: 'dash-color' }\n      ],\n      twoOneSpokes: [\n        { key: 'spoke-one', value: 'BTC', color: 'btc-color' },\n        { key: 'spoke-two', value: 'ETH', color: 'eth-color' },\n        { key: 'spoke-three', value: 'XMR', color: 'xmr-color' },\n        { key: 'spoke-four', value: 'MAID', color: 'maid-color' },\n        { key: 'spoke-five', value: 'DOGE', color: 'doge-color' },\n        { key: 'spoke-six', value: 'DASH', color: 'dash-color' }\n      ],\n      twoTwoSpokes: [\n        { key: 'spoke-one', value: 'BTC', color: 'btc-color' },\n        { key: 'spoke-two', value: 'ETH', color: 'eth-color' },\n        { key: 'spoke-three', value: 'XMR', color: 'xmr-color' },\n        { key: 'spoke-four', value: 'MAID', color: 'maid-color' },\n        { key: 'spoke-five', value: 'DOGE', color: 'doge-color' },\n        { key: 'spoke-six', value: 'DASH', color: 'dash-color' }\n      ]\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../../styles/variables.styl'\n\n.countdown-wrapper\n  margin 0 auto\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** Index.vue?52297b46\n **/","<template>\n<div class=\"article-wrapper\">\n\n<h1>Plan</h1>\n\n<h2 id=\"cosmos-crowdfund-plan\">Cosmos Crowdfund Plan</h2>\n<p>DATE: July 22nd, 2016<br/>\n  LAST UPDATED: Aug 12th, 2016<br/>\n  NOTE: The details in this plan override what is currently in the whitepaper.</p>\n<ul>\n  <li><p>Cosmos Inc will be a for-profit Canadian entity.  Its mission is to\n      create, maintain, and further develop, the Cosmos Ecosystem.</p>\n  </li>\n  <li><p>There will be a Crowdfunding campaign to sell tokens, called &quot;atoms&quot;, that\n      give the holder limited license to use the Cosmos Hub.  The proceeds of the\n      Crowdfunding campaign will go to Cosmos Inc to develop the Essential Cosmos\n      Software and Services.</p>\n  </li>\n  <li>There will be 20,000,000 atoms on Genesis day. On Genesis day, the\n      distribution of atoms will be split between:\n    <ul>\n      <li>Pre-funders (5%)</li>\n      <li>Cosmos Inc (20%)</li>\n      <li>Crowdfund Funders (75%)</li>\n    </ul>\n  </li>\n  <li><p>Upon completion of the Crowdfund, all the atom holders, including Cosmos Inc,\n      play the Delegation Game in a special purpose Ethereum smart contract (which\n      holds no Ether).  The top 100 validators after delegation will be chosen as\n      validators on Genesis.</p>\n  </li>\n  <li><p>Everyone&#39;s atoms will vest over a period of two years after Genesis.  Unvested\n      atoms cannot be transferred until vested.  Unvested atoms will vest over time,\n      at a rate of 1/(24x365x2) of the account&#39;s atoms, every hour.</p>\n  </li>\n  <li><p>Every validator must participate in governance, or else become inactivated and\n      eventually unbonded.  Delegators who delegate atoms to such validators will\n      also likewise get their delegated atoms inactivated and eventually unbonded.</p>\n  </li>\n  <li><p>Anyone may receive more atoms by passing a proposal with an attached award.\n      Such reward atoms will be purely inflationary.</p>\n  </li>\n  <li><p>1/3 of the total number of atoms will be distributed back to the bonded atom\n      holders for having a stake in consensus.  This a tax (disincentive) for not\n      putting atoms at stake, and not participating in governance during the first two\n      years after Genesis.</p>\n  </li>\n</ul>\n<h2 id=\"definitions\">Definitions</h2>\n<p><strong>Cosmos Inc</strong>: Cosmos Inc is a for-profit legal entity that manages the\n  Crowdfund and Genesis of the Cosmos Hub.  Besides the initial development of the\n  Essential Cosmos Software and Services, Cosmos Inc has no further obligations\n  with regards to the Cosmos Ecosystem, Cosmos Hub, or derivatives\n  (forks) of the Cosmos Hub, but instead is a general participant in the network.</p>\n<p><strong>Cosmos Ecosystem</strong>: Includes the Cosmos Network and other software and\n  services, including validator and client software.</p>\n<p><strong>Cosmos Hub</strong>: An Cosmos hub is itself a blockchain, or zone, that connects to\n  many other zones.  The hub facilitates token movement between zones.  The Cosmos\n  Hub will be the first hub, and the first zone.</p>\n<p><strong>Cosmos Hub Block Reward</strong>: The blockchain will reward the Validators and\n  Delegators in proportion to their bonded atoms, and afterwards account for any\n  commissions that delegators pay to delegate validators.  The reward will consist\n  of two categories -- transaction fees, and inflationary atoms.  The transction\n  fees will be any fee collected by a validator.  In addition, there will be\n  inflationary atoms at a rate of 1/3 of the total number of atoms per year.\n  Cosmos holders who do not put their atoms at stake by being a validator or\n  delegating to a validator will not receive any of the Cosmos Hub Block Rewards.</p>\n<p><strong>Cosmos Network</strong>: Includes the Cosmos Hub and all connected zones.</p>\n<p><strong>Crowdfund</strong>: An atom token crowdfund event that happens during a period of 42\n  days.  There will be a website where those who wish to purchase atoms can sign\n  up The crowdfund proceeds will be used to complete the Essential Cosmos Software\n  and Services, starting with the release of TendermintCore. </p>\n<p><strong>Delegator</strong>: An atom holder who puts their atoms at stake by delegating its\n  validating power and voting power to a validator.  They are still responsible\n  for voting on proposals during the vesting period.  If they don&#39;t vote they\n  will be penalized, but they will inherit the vote of the delegated validator.</p>\n<p><strong>Early Funders</strong>: The Early Funders are qualified investors who purchase 5% of\n  the Genesis atoms prior to the crowdfund.  The majority of the proceeds from the\n  early funding will go toward legal and PR fees, and also help pay salary for\n  Cosmos Inc until the crowdfunding is complete.</p>\n<p><strong>Validator</strong>: Validators are full nodes of a Cosmos zone that have the\n  responsibility of committing blocks in that zone.  The Cosmos Hub will start\n  with 100 validator spots.  Due to the limited number of validator spots, not\n  everyone who has atoms can be a validator.  Instead, everyone else can bond\n  atoms and delegate their consensus voting power to any of the 100 validators.\n  Before Genesis, the Cosmos Crowdfund funders will play the Delegation Game to\n  determine the top 100 bonded delegates who will become the genesis validators.</p>\n<h3 id=\"essential-cosmos-software-and-services\">Essential Cosmos Software and Services</h3>\n<p><strong>TendermintCore</strong></p>\n<ul>\n  <li><em>Alpha</em><ul>\n      <li>fix existing issues</li>\n      <li>mempool optimization</li>\n      <li>peer exchange handler</li>\n      <li>validator set changes</li>\n      <li>fork detection and handling</li>\n    </ul>\n  </li>\n  <li><em>Beta</em><ul>\n      <li>tendermint consensus v2</li>\n    </ul>\n  </li>\n</ul>\n<p><strong>Cosmos Hub</strong></p>\n<ul>\n  <li><em>Alpha</em><ul>\n      <li>multiasset accounts</li>\n      <li>atom staking with delegation</li>\n      <li>governance</li>\n      <li>basic wallet client</li>\n    </ul>\n  </li>\n  <li><em>Beta</em><ul>\n      <li>zone support<ul>\n          <li>exchange zone</li>\n          <li>ethereum zone</li>\n          <li>import crypto distributions</li>\n        </ul>\n      </li>\n      <li>Cosmos network explorer client</li>\n    </ul>\n  </li>\n</ul>\n<p><strong>Other</strong></p>\n<ul>\n  <li>hardware wallet integration <em>with sufficient funding</em></li>\n  <li>Ethereum peg <em>with sufficient funding</em></li>\n  <li>Bitcoin peg <em>with partner, if possible</em></li>\n</ul>\n<h2 id=\"funding\">Funding</h2>\n<p>Funds will be raised by Cosmos Inc in 2 phases.</p>\n<h3 id=\"phase-0-the-prefund\">Phase 0: the Prefund</h3>\n<p>During the Prefund, 5% of future Genesis atoms will be sold to qualified\n  investors with a cap and/or discount.  The proceeds from the Early Investors\n  will be used to prepare for and execute the crowdfund, as well as to pay for\n  legal expenses.</p>\n<h3 id=\"phase-1-the-crowdfund\">Phase 1: the Crowdfund</h3>\n<p>During the Crowdfund, 75% of future Genesis atoms will be sold to sophisticated\n  members of the public who wish to support or participate in this project.\n  The crowdfund will happen over a period of 42 days as the Ethereum crowdfund.</p>\n<p>The crowdfund will be capped at $9M equivalent of bitcoins after the first 24\n  hours of the crowfund.  After 24 hours since the beginning of the crowdfund,\n  when the total amount raised exceeds $9M given the price of bitcoin at 9am PDT\n  the morning of, the crowdfund will immediately stop.</p>\n<h3 id=\"funding-milestones\">Funding Milestones</h3>\n<ul>\n  <li>If the crowdfund does not meet the minimum $3M -- 95+% of funds returned</li>\n  <li>If the crowdfund exceeds $3M -- Essential Cosmos Software</li>\n  <li>If the crowdfund exceeds $5M -- Ethereum peg</li>\n  <li>If the crowdfund exceeds $7M -- Open-source hardware wallet (sold separately)</li>\n</ul>\n<h2 id=\"timeline\">Timeline</h2>\n<ol>\n  <li>Prefund for 5% of Genesis atoms</li>\n  <li>Canadian non-profit is created</li>\n  <li>Begin Crowdfund</li>\n  <li>End of Crowdfund after 42 days or cap reache (EoCF)</li>\n  <li>EoCF + 2 months: alpha release candidate of TendermintCore for security audit</li>\n  <li>EoCF + 4 months: alpha release of TendermintCore</li>\n  <li>EoCF + 7 months: alpha release candidate of Cosmos Hub for security audit</li>\n  <li>EoCF + 9 months: alpha release of Cosmos Hub</li>\n  <li>EoCF + 10 months: launch Cosmos Hub alpha</li>\n  <li>EoCF + 12 months: begin sale of open-source hardware wallet (if funding\n    milestone reached)</li>\n  <li>EoCF + 13 months: beta release candidate of Alpha Hub for security audit</li>\n  <li>EoCF + 15 months: launch Cosmos Hub beta</li>\n  <li>EoCF + 15 months+: Continuous development, timeline set by Cosmos Inc</li>\n  <li>Timeline for Bitcoin peg support depends on partnership</li>\n  <li>Timeline for Ethereum peg support set after alpha release of Cosmos Hub</li>\n</ol>\n\n</div>\n\n<section class=\"section-default\"><div class=\"section-container\">\n  <countdown></countdown>\n</div></section> \n</template>\n\n<script>\nimport Countdown from '../Countdown.vue'\n\nexport default {\n  components: {\n    Countdown\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../../styles/variables.styl'\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** Plan.vue?3753bc23\n **/","<template>\n<div class=\"article-wrapper\">\n\n<h1 id=\"cosmos\">Cosmos</h1>\n<p><strong>A Network of Distributed Ledgers</strong></p>\n<p>Jae Kwon jae@tendermint.com<br/>\nEthan Buchman ethan@tendermint.com</p>\n<p>For discussions, <a href=\"http://forum.tendermint.com:3000/\">join our Slack</a>!</p>\n<p><em>NOTE: If you can read this on GitHub, then we&#39;re still actively developing this\ndocument.  Please check regularly for updates!.</em></p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#tendermint\">Tendermint</a><ul>\n<li><a href=\"#validators\">Validators</a></li>\n<li><a href=\"#consensus\">Consensus</a></li>\n<li><a href=\"#light-clients\">Light Clients</a></li>\n<li><a href=\"#preventing-attacks\">Preventing Attacks</a></li>\n<li><a href=\"#tmsp\">TMSP</a></li>\n</ul>\n</li>\n<li><a href=\"#cosmos-overview\">Cosmos Overview</a></li>\n<li><a href=\"#the-hub-and-zones\">The Hub and Zones</a><ul>\n<li><a href=\"#the-hub\">The Hub</a></li>\n<li><a href=\"#the-zones\">The Zones</a></li>\n</ul>\n</li>\n<li><a href=\"#inter-blockchain-communication-ibc\">Inter-blockchain Communication (IBC)</a></li>\n<li><a href=\"#use-cases\">Use Cases</a><ul>\n<li><a href=\"#pegging-to-other-cryptocurrencies\">Pegging to Other Cryptocurrencies</a></li>\n<li><a href=\"#ethereum-scaling\">Ethereum Scaling</a></li>\n<li><a href=\"#multi-application-integration\">Multi-Application Integration</a></li>\n<li><a href=\"#network-partition-mitigation\">Network Partition Mitigation</a></li>\n<li><a href=\"#federated-name-resolution-system\">Federated Name Resolution System</a></li>\n</ul>\n</li>\n<li><a href=\"#issuance-and-incentives\">Issuance and Incentives</a><ul>\n<li><a href=\"#the-atom-token\">The Atom Token</a><ul>\n<li><a href=\"#crowdfund\">Crowdfund</a></li>\n<li><a href=\"#vesting\">Vesting</a></li>\n</ul>\n</li>\n<li><a href=\"#limitations-on-the-number-of-validators\">Limitations on the Number of\nValidators</a></li>\n<li><a href=\"#becoming-a-validator-after-genesis-day\">Becoming a Validator After Genesis\nDay</a></li>\n<li><a href=\"#penalties-for-validators\">Penalties for Validators</a></li>\n<li><a href=\"#transaction-fees\">Transaction Fees</a></li>\n<li><a href=\"#incentivizing-hackers\">Incentivizing Hackers</a></li>\n</ul>\n</li>\n<li><a href=\"#governance\">Governance</a><ul>\n<li><a href=\"#parameter-change-proposal\">Parameter Change Proposal</a></li>\n<li><a href=\"#text-proposal\">Text Proposal</a></li>\n</ul>\n</li>\n<li><a href=\"#roadmap\">Roadmap</a></li>\n<li><a href=\"#related-work\">Related Work</a><ul>\n<li><a href=\"#consensus-systems\">Consensus Systems</a><ul>\n<li><a href=\"#classic-byzantine-fault-tolerance\">Classic Byzantine Fault Tolerance</a></li>\n<li><a href=\"#bitshares-delegated-stake\">BitShares delegated stake</a></li>\n<li><a href=\"#stellar\">Stellar</a></li>\n<li><a href=\"#bitcoinng\">BitcoinNG</a></li>\n<li><a href=\"#casper\">Casper</a></li>\n</ul>\n</li>\n<li><a href=\"#horizontal-scaling\">Horizontal Scaling</a><ul>\n<li><a href=\"#interledger-protocol\">Interledger Protocol</a></li>\n<li><a href=\"#sidechains\">Sidechains</a></li>\n<li><a href=\"#ethereum-scalability-efforts\">Ethereum Scalability Efforts</a></li>\n</ul>\n</li>\n<li><a href=\"#general-scaling\">General Scaling</a><ul>\n<li><a href=\"#lightning-network\">Lightning Network</a></li>\n<li><a href=\"#segregated-witness\">Segregated Witness</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#appendix\">Appendix</a><ul>\n<li><a href=\"#fork-accountability\">Fork Accountability</a></li>\n<li><a href=\"#tendermint-consensus\">Tendermint Consensus</a></li>\n<li><a href=\"#tendermint-light-clients\">Tendermint Light Clients</a></li>\n<li><a href=\"#preventing-long-range-attacks\">Preventing Long Range Attacks</a></li>\n<li><a href=\"#overcoming-forks-and-censorship-attacks\">Overcoming Forks and Censorship\nAttacks</a></li>\n<li><a href=\"#tmsp-specification\">TMSP Specification</a></li>\n<li><a href=\"#ibc-packet-delivery-acknowledgement\">IBC Packet Delivery\nAcknowledgement</a></li>\n<li><a href=\"#merkle-tree--proof-specification\">Merkle tree &amp; proof\nspecification</a></li>\n<li><a href=\"#transaction-types\">Transaction Types</a><ul>\n<li><a href=\"#ibcblockcommittx\">IBCBlockCommitTx</a></li>\n<li><a href=\"#ibcpackettx\">IBCPacketTx</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#acknowledgements\">Acknowledgements</a></li>\n<li><a href=\"#citations\">Citations</a></li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The combined success of the open-source ecosystem, of decentralized\nfile-sharing, and of public cryptocurrencies, has inspired an understanding that\ndecentralized internet protocols can be used to radically improve socio-economic\ninfrastructure.  We have seen specialized blockchain applications like Bitcoin\n<a href=\"https://bitcoin.org/bitcoin.pdf\">[1]</a> (a cryptocurrency), Zerocash <a href=\"http://zerocash-project.org/paper\">[2]</a> (a cryptocurrency for\nprivacy), and generalized smart contract platforms such as Ethereum <a href=\"https://github.com/ethereum/wiki/wiki/White-Paper\">[3]</a>,\nwith countless distributed applications for the EVM such as Augur (a prediction\nmarket) and TheDAO <a href=\"https://download.slock.it/public/DAO/WhitePaper.pdf\">[4]</a> (an investment club).</p>\n<p>To date, however, these blockchains have suffered from a number of drawbacks,\nincluding their gross energy inefficiency, poor or limited performance, and\nimmature governance mechanisms.  A number of proposals have been made to scale\nBitcoin&#39;s transaction throughput such as Segregated-Witness <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\">[5]</a> and\nBitcoinNG <a href=\"https://arxiv.org/pdf/1510.02037v2.pdf\">[6]</a>, but these are vertical scaling solutions that remain\nlimited by the capacity of a single physical machine, lest we sacrifice the\nproperty of complete auditability.  The Lightning Network <a href=\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\">[7]</a> can help\nscale Bitcoin transaction volume by leaving some transactions off the ledger\ncompletely and is well suited for micropayments and privacy preserving payment\nrails, but may not be suitable for more generalized scaling needs.</p>\n<p>An ideal solution would be one that allows multiple parallel blockchains to\ninteroperate while retaining their security properties, but this has proven\ndifficult, if not impossible, with proof-of-work. Merged-mining, for instance,\nallows the work done to secure a parent chain to be re-used on a child chain,\nbut transactions still must be validated, in order, by each node, and a\nmerge-mined blockchain is vulnerable to attack if a majority of the hashing\npower on the parent is not actively merge-mining the child.  An academic review\nof <a href=\"http://vukolic.com/iNetSec_2015.pdf\">alternative blockchain network\narchitectures</a> is provided for additional\ncontext, and we provide more summaries of some proposals and their drawbacks in\n<a href=\"#related-work\">Related Work</a>.</p>\n<p>Here we present Cosmos, a novel blockchain network architecture that addresses all\nof these problems.  Cosmos is a network of many independent blockchains, called\nzones.  The zones are powered by Tendermint Core <a href=\"https://github.com/tendermint/tendermint/wiki\">[8]</a>, which provides a\nhigh-performance, consistent, secure\n<a href=\"http://tendermint.com/blog/tendermint-vs-pbft/\">PBFT-like</a> consensus engine,\nwhere strict <a href=\"#fork-accountability\">fork-accountability</a> guarantees hold over\nthe behaviour of malicious actors.  Tendermint Core&#39;s BFT consensus algorithm is\nwell suited for scaling public proof-of-stake blockchains.</p>\n<p>The first zone on Cosmos is called the Cosmos Hub. The Cosmos Hub is a\nmulti-asset proof-of-stake cryptocurrency with a simple governance mechanism\nenabling the network to adapt and upgrade.  In addition, the Cosmos Hub can be\nextended by connecting other zones.</p>\n<p>The hub and zones of the Cosmos network communicate with each other via an\ninter-blockchain communication (IBC) protocol, a kind of virtual UDP or TCP for\nblockchains.  Tokens can be transferred from one zone to another, securely and\nquickly, without the need for exchange liquidity between zones.  Instead, all\ninter-zone token transfers go through the Cosmos Hub, which keeps track of the\ntotal amount of tokens held by each zone.  The hub isolates each zone from the\nfailure of other zones.  Since anyone can connect a new zone to the Cosmos Hub,\nzones allow for future-compatibility with new blockchain innovations.</p>\n<h2 id=\"tendermint\">Tendermint</h2>\n<p>In this section we describe the Tendermint consensus protocol and the interface\nused to build applications with it. For more details, see the <a href=\"#appendix\">appendix</a>.</p>\n<h3 id=\"validators\">Validators</h3>\n<p>In classical Byzantine fault-tolerant (BFT) algorithms, each node has the same\nweight.  In Tendermint, nodes have a non-negative amount of <em>voting power</em>, and\nnodes that have positive voting power are called <em>validators</em>.  Validators\nparticipate in the consensus protocol by broadcasting cryptographic signatures,\nor <em>votes</em>, to agree upon the next block.</p>\n<p>Validators&#39; voting powers are determined at genesis, or is changed\ndeterministically by the blockchain, depending on the application.  For example,\nin a proof-of-stake application such as the Cosmos Hub, the voting power may be\ndetermined by the amount of staking tokens bonded as collateral.</p>\n<p><em>NOTE: Fractions like ⅔ and ⅓ refer to fractions of the total voting power,\nnever the total number of validators, unless all the validators have equal\nweight.</em>\n<em>NOTE: +⅔ means &quot;more than ⅔&quot;, while ⅓+ means &quot;⅓ or more&quot;.</em></p>\n<h3 id=\"consensus\">Consensus</h3>\n<p>Tendermint is a partially synchronous BFT consensus protocol derived from the\nDLS consensus algorithm <a href=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\">[20]</a>. Tendermint is notable for its simplicity,\nperformance, and <a href=\"#fork-accountability\">fork-accountability</a>.  The protocol\nrequires a fixed, known set of validators, where each validator is identified by\nits public key.  Validators attempt to come to consensus on one block at a time,\nwhere a block is a list of transactions.  Consensus on a block proceeds in\nrounds. Each round has a round-leader, or proposer, who proposes a block. The\nvalidators then vote, in stages, on whether or not to accept the proposed block\nor move on to the next round. The proposer for a round is chosen\ndeterministically from the ordered list of validators, in proportion to their\nvoting power.</p>\n<p>The full details of the protocol are described\n<a href=\"https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm\">here</a>.</p>\n<p>Tendermint’s security derives from its use of optimal Byzantine fault-tolerance\nvia super-majority (+⅔) voting and a locking mechanism.  Together, they ensure\nthat:</p>\n<ul>\n<li>⅓+ voting power must be Byzantine to cause a violation of safety, where more\nthan two values are committed.  </li>\n<li>if ever any set of validators succeeds in violating safety, or even attempts\nto do so, they can be identified by the protocol.  This includes both voting\nfor conflicting blocks and broadcasting unjustified votes.</li>\n</ul>\n<p>Despite its strong guarantees, Tendermint provides exceptional performance.  In\nbenchmarks of 64 nodes distributed across 7 datacenters on 5 continents, on\ncommodity cloud instances, Tendermint consensus can process thousands of\ntransactions per second, with commit latencies on the order of one or two\nseconds.  Notably, performance of well over a thousand transactions per second\nis maintained even in harsh adversarial conditions, with validators crashing or\nbroadcasting maliciously crafted votes.  See figure below for details.</p>\n<p>![Figure of Tendermint throughput performance]\n(<a href=\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png\">https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png</a>)</p>\n<h3 id=\"light-clients\">Light Clients</h3>\n<p>A major benefit of Tendermint&#39;s consensus algorithm is simplified light client\nsecurity, making it an ideal candidate for mobile and internet-of-things use\ncases.  While a Bitcoin light client must sync chains of block headers and find\nthe one with the most proof of work, Tendermint light clients need only to keep\nup with changes to the validator set, and then simply verify the +⅔ PreCommits\nin the latest block to determine the latest state.</p>\n<p>Succinct light client proofs also enable <a href=\"#inter-blockchain-communication-ibc\">inter-blockchain\ncommunication</a>.</p>\n<h3 id=\"preventing-attacks\">Preventing Attacks</h3>\n<p>Tendermint has various protective measures for preventing certain notable\nattacks, like <a href=\"#preventing-long-range-attacks\">long-range-nothing-at-stake double\nspends</a> and\n<a href=\"#overcoming-forks-and-censorship-attacks\">censorship</a>. These are discussed more\nfully in the <a href=\"#appendix\">appendix</a>.</p>\n<h3 id=\"tmsp\">TMSP</h3>\n<p>The Tendermint consensus algorithm is implemented in a program called Tendermint\nCore.  Tendermint Core is an application-agnostic &quot;consensus engine&quot; that can\nturn any deterministic blackbox application into a distributedly replicated\nblockchain.  As the Apache Web Server or Nginx connects to the Wordpress\napplication via CGI or FastCGI, Tendermint Core connects to blockchain\napplications via the Tendermint Socket Protocol (TMSP) <a href=\"https://github.com/tendermint/tmsp\">[17]</a>. Thus, TMSP\nallows for blockchain applications to be programmed in any language, not just\nthe programming language that the consensus engine is written in.  Additionally,\nTMSP makes it possible to easily swap out the consensus layer of any existing\nblockchain stack.</p>\n<p>We draw an analogy with a well-known cryptocurrency, Bitcoin.  Bitcoin is a\ncryptocurrency blockchain where each node maintains a fully audited Unspent\nTransaction Output (UTXO) database. If one wanted to create a Bitcoin-like\nsystem on top of TMSP, Tendermint Core would be responsible for</p>\n<ul>\n<li>Sharing blocks and transactions between nodes</li>\n<li>Establishing a canonical/immutable order of transactions (the blockchain)</li>\n</ul>\n<p>Meanwhile, the TMSP application would be responsible for</p>\n<ul>\n<li>Maintaining the UTXO database</li>\n<li>Validating cryptographic signatures of transactions</li>\n<li>Preventing transactions from spending non-existent transactions</li>\n<li>Allowing clients to query the UTXO database.</li>\n</ul>\n<p>Tendermint is able to decompose the blockchain design by offering a very simple\nAPI between the application process and consensus process.</p>\n<h2 id=\"cosmos-overview\">Cosmos Overview</h2>\n<p>Cosmos is a network of independent parallel blockchains that are each powered by\nclassical BFT consensus algorithms like Tendermint\n<a href=\"http://github.com/tendermint/tendermint\">1</a>.</p>\n<p>The first blockchain in this network will be the Cosmos Hub.  The Cosomos Hub\nconnects to many other blockchains (or <em>zones</em>) via a novel inter-blockchain\ncommunication protocol.  The Cosmos Hub tracks numerous token types, and keeps\nrecord of the total number of tokens in each connected zone.  Tokens can be\ntransferred from one zone to another, securely and quickly, without the need for\na liquid exchange between zones, because all inter-zone coin transfers go\nthrough the Cosmos Hub.</p>\n<p>This architecture solves so many problems that the blockchain space faces today,\nincluding application interoperability, scalability, and seamless upgradability.\nFor example, zones derived from Bitcoind, Go-Ethereum, CryptoNote, ZCash, or any\nblockchain system can be plugged into the Cosmos Hub.  These zones allow Cosmos\nto scale infinitely to meet global transaction demand.  And, zones are a great\nfit for a distributed exchange, which will be supported as well.</p>\n<p>Cosmos is not just a single distributed ledger, and the Cosmos Hub isn&#39;t a\nwalled garden or the center of its universe.  We are designing a protocol for an\nopen network of distributed legers that can serve as a new foundation for our\nfuture financial systems, based on principles of cryptography, sound economics,\nconsensus theory, transparency, and accountability.</p>\n<h3 id=\"tendermint-bft-dpos\">Tendermint-BFT DPoS</h3>\n<p>The Cosmos Hub is the first public blockchain in the Cosmos Network powered by\nTendermint&#39;s BFT consensus algorithm.  The Tendermint open-source project was\nborn in 2014 to address the speed, scalability, and environmental issues of\nBitcoin&#39;s proof-of-work consensus algorithm.  By utilizing and improving upon\nproven BFT algorithms developed at MIT in 1988, the Tendermint team was first to\nconceptually demonstrate a proof-of-stake cryptocurrency that addresses the\nnothing-at-stake problem suffered by first-gen proof-of-stake cryptocurrencies\nsuch as NXT and BitShares.</p>\n<p>Today, practically all Bitcoin mobile wallets use trusted servers to provide\nthem with transaction verification.  This is because proof-of-work requires\nwaiting for many confirmations before a transaction can be considered\nirreversibly committed.  Double-spend attacks have already been demonstrated on\nservices like CoinBase.</p>\n<p>Unlike other blockchain consensus systems, Tendermint offers instant and\nprovably-secure mobile-client payment verification. Since the Tendermint is\ndesigned not to fork at all, mobile wallets can receive instant transaction\nconfirmation, finally making trustless and practical payments a reality on your\nsmartphone.  This has significant ramifications for IoT applications as well.</p>\n<p>Validators in Cosmos (who have a similar role to Bitcoin miners but instead use\ncryptographic signatures to vote) are meant to be secure, dedicated machines\nthat are responsible for committing blocks.  Non-validators can delegate their\nstaking tokens (called &quot;atoms&quot;) to any validator to earn a portion of block fees\nand atom rewards, but incur the risk of getting punished (slashed) if the\ndelegate validator gets hacked or violates the protocol.  The proven safety\nguarantees of Tendermint BFT consensus, and the collateral deposit of\nstakeholders (of validators and delegators) provide provable, quantifiable\nsecurity for nodes and even light clients.</p>\n<h3 id=\"governance\">Governance</h3>\n<p>Distributed public ledgers should have a constitution and a governance system.\nBitcoin relies on the Bitcoin Foundation (to some degree) and mining to\ncoordinate upgrades, but this is a slow process.  Ethereum split into ETH and\nETC after the hard-fork to address TheDAO hack, largely because there was no\nprior social contract nor mechanism for making such decisions.</p>\n<p>Validators and delegators on the Cosmos Hub can vote on proposals that can\nchange preset parameters of the system automatically (such as the block gas\nlimit), coordinate upgrades, as well as vote on amendments to a human-readible\nconstitution that govern the policies of the Cosmos Hub.  The constitution\nallows for cohesion among the stakeholders on issues regarding issues of theft\nand bugs (such as TheDAO incident), allowing for quicker and cleaner resolution.</p>\n<p>Each zone can also have their own constitution and governance mechanism as well.\nFor example, the Cosmos Hub could have a constitution that enforces immutability\nat the Hub (no roll-backs, save for bugs of the Cosmos Hub node implementation),\nwhile each zone can set their own policies regarding roll-backs in the case of\ntheft and bugs.</p>\n<p>By enabling interoperability among differing policy zones, the Cosmos network\ngives the users ultimate freedom and potential for permissionless\nexperimentation.</p>\n<h2 id=\"the-hub-and-zones\">The Hub and Zones</h2>\n<p>Here we describe a novel model of decentralization and scalability.  Cosmos is a\nnetwork of many blockchains powered by Tendermint.  While existing proposals aim\nto create a &quot;single blockchain&quot; with total global transaction ordering, Cosmos\npermits many blockchains to run concurrently with one another and yet retain\ninteroperability.</p>\n<p>At the basis, the Cosmos Hub manages many independent blockchains called &quot;zones&quot;\n(sometimes referred to as &quot;shards&quot;, in reference to the database scaling\ntechnique known as &quot;sharding&quot;).  A constant stream of recent block commits from\nzones posted on the hub allows the hub to keep up with the state of each zone.\nLikewise, each zone keeps up with the state of the hub (but zones do not keep up\nwith each other except indirectly through the hub).  Packets of information are\nthen communicated from one zone to another by posting Merkle-proofs as evidence\nthat the information was sent and received.  This mechanism is called\ninter-blockchain communication, or IBC for short.</p>\n<p><img src=\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/hub_and_zones.png\" alt=\"Figure of hub and zones\nacknowledgement\"></p>\n<p>Any of the zones can themselves be hubs to form an acyclic graph, but\nfor the sake of clarity we will only describe the simple configuration where\nthere is only one hub, and many non-hub zones.</p>\n<h3 id=\"the-hub\">The Hub</h3>\n<p>The Cosmos Hub is a blockchain that hosts a multi-asset distributed ledger,\nwhere tokens can be held by individual users or by zones themselves.  These\ntokens can be moved from one zone to another in a special IBC packet called a\n&quot;coin packet&quot;.  The hub is responsible for preserving the global invariance of\nthe total amount of each token across the zones. IBC coin packet transactions\nmust be committed by the sender, hub, and receiver blockchains.</p>\n<p>Since the Cosmos Hub acts as a central ledger of tokens for the whole\nsystem, the security of the hub is of paramount importance.  While each\nzone may be a Tendermint blockchain that is secured by as few as 4 (or even\nless if BFT consensus is not needed), the hub must be secured by a globally\ndecentralized set of validators that can withstand the most severe attack\nscenarios, such as a continental network partition or a nation-state sponsored\nattack.</p>\n<h3 id=\"the-zones\">The Zones</h3>\n<p>A Cosmos zone is an independent blockchain that exchanges IBC messages with the\nHub.  From the Hub&#39;s perspective, a zone is a multi-asset dynamic-membership\nmulti-signature account that can send and receive tokens using IBC packets. Like\na cryptocurrency account, a zone cannot transfer more tokens than it has, but\ncan receive tokens from others who have them. A zone may be designated as an\n&quot;source&quot; of one or more token types, granting it the power to inflate that token\nsupply.</p>\n<p>Atoms of the Cosmos Hub may be staked by validators of a zone connected to the\nhub.  While double-spend attacks on these zones would result in the slashing of\natoms with Tendermint&#39;s fork-accountability, a zone where +⅔ of the voting power\nare Byzantine can commit invalid state.  The Cosmos Hub does not verify or\nexecute transactions committed on other zones, so it is the responsibility of\nusers to send tokens to zones that they trust.  In the future, the Cosmos Hub&#39;s\ngovernance system may pass Hub improvement proposals that account for zone\nfailures.  For example, outbound token transfers from some (or all) zones may be\nthrottled to allow for the emergency circuit-breaking of zones (a temporary halt\nof token transfers) when an attack is detected.</p>\n<h2 id=\"inter-blockchain-communication-ibc-\">Inter-blockchain Communication (IBC)</h2>\n<p>Now we look at how the hub and zones communicate with each other.  Say that\nthere are three blockchains, &quot;Zone1&quot;, &quot;Zone2&quot;, and &quot;Hub&quot;, and we wish for\n&quot;Zone1&quot; to produce a packet destined for &quot;Zone2&quot; going through &quot;Hub&quot;. For a\npacket to move from one blockchain to another, a proof is posted on the\nreceiving chain that the sending chain published a packet for the alleged\ndestination. For the receiving chain to check this proof, it must be able keep\nup with the sender&#39;s block headers.  This mechanism is similar to that used by\nsidechains, requiring two interacting chains to &quot;be aware&quot; of one another via a\nbidirectional stream of proof-of-existence datagrams (transactions).</p>\n<p>The IBC protocol can naturally be defined using two types of transactions: an\n<code>IBCBlockCommitTx</code> transaction, which allows a blockchain to prove to any\nobserver of its most recent block-hash, and an <code>IBCPacketTx</code> transaction, which\nallows a blockchain to prove to any observer that the given packet was indeed\npublished by the sender&#39;s application via a Merkle-proof to the recent\nblock-hash.</p>\n<p>By splitting the IBC mechanics into two separate transactions <code>IBCBlockCommitTx</code>\nand <code>IBCPacketTx</code>, we allow the native fee market-mechanism of the receiving\nchain to determine which packets get committed (i.e. acknowledged), while\nallowing for complete freedom on the sending chain as to how many outbound\npackets are allowed.</p>\n<p><img src=\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_without_ack.png\" alt=\"Figure of Zone1, Zone2, and Hub IBC without\nacknowledgement\"></p>\n<p><CAPTION on a figure> In the example above, in order to update the block-hash of\n&quot;Zone1&quot; on &quot;Hub&quot; (or of &quot;Hub&quot; on &quot;Zone2&quot;), an <code>IBCBlockCommitTx</code>\ntransaction must be posted on &quot;Hub&quot; with the block-hash of &quot;Zone1&quot; (or on\n&quot;Zone2&quot; with the block-hash of &quot;Hub&quot;).</p>\n<p><em>See <a href=\"#ibcblockcommittx\">IBCBlockCommitTx</a> and <a href=\"#ibcpacketcommit\">IBCPacketTx</a>\nfor for more information on the two IBC transaction types.</em></p>\n<h2 id=\"use-cases\">Use Cases</h2>\n<h3 id=\"pegging-to-other-cryptocurrencies\">Pegging to Other Cryptocurrencies</h3>\n<p>A priveleged zone can act as the source of a pegged token of another\ncryptocurrency. A peg is in essence similar to the relationship between an\nCosmos hub and zone; both must keep up with the latest blocks of the\nother in order to verify proofs that tokens have moved from one to the other.  A\npeg-zone on the Cosmos network keeps up with both the hub as well as the\nother cryptocurrency.  The indirection through the peg-zone allows the logic of\nthe hub to remain simple and agnostic to other blockchain consensus strategies,\nlike Bitcoin&#39;s proof-of-work mining.</p>\n<p>For instance, a Cosmos zone with some validator set, possibly the same as\nthat of the hub, could act as an ether-peg, where the TMSP-application on\nthe zone (the &quot;peg-zone&quot;) has mechanisms to exchange IBC messages with a\npeg-contract on the external Ethereum blockchain (the &quot;origin&quot;).  This contract\nwould allow ether holders to send ether to the peg-zone by sending it to the\npeg-contract on Ethereum.  Once ether is received by the peg-contract, the ether\ncannot be withdrawn unless an appropriate IBC packet is received by the\npeg-contract from the peg-zone. When a peg-zone receives an IBC packet proving\nthat ether was received in the peg-contract for a particular Ethereum account, a\ncorresponding account is created on the peg-zone with that balance.  Ether on\nthe peg-zone (&quot;pegged-ether&quot;) can then be transferred to and from the hub,\nand later be destroyed with a transaction that sends it to a particular\nwithdrawal address on Ethereum; an IBC packet proving that the transaction\noccured on the peg-zone can be posted to the Ethereum peg-contract to allow the\nether to be withdrawn.</p>\n<p>Of course, the risk of such a pegging contract is a rogue validator set.  ⅓+\nByzantine voting power could cause a fork, withdrawing ether from the\npeg-contract on Ethereum while keeping the pegged-ether on the peg-zone. Worse,\n+⅔ Byzantine voting power can steal ether outright from those who sent it to the\npeg-contract by deviating from the original pegging logic of the peg-zone.</p>\n<p>It is possible to address these issues by designing the peg to be &quot;totally\naccountable&quot;.  For example, all IBC packets both from the hub as well as from\nthe origin might require acknowledgement by the peg-zone in such a way that all\nstate transitions of the peg-zone can be efficiently challenged and verified by\neither the hub or the origin&#39;s peg-contract.  The hub and the origin should\nallow the peg-zone validators to post collateral, and token transfers out of the\npeg-contract should be delayed (and collateral unbonding period sufficiently\nlong) to allow for any challenges to be made by independent auditors.  We leave\nthe design of the specification and implementation of this system open as a\nfuture Cosmos improvement proposal, to be passed by the Cosmos Hub&#39;s governance\nsystem.</p>\n<p>While the socio-political atmosphere is not quite evolved enough yet, we can\nextend the mechanism to allow for zones which peg to the fiat currency of a\nnation states by forming a validator set out of some combination of institutions\nresponsible for the nation&#39;s currency, most particularly, its banks. Of course,\nextra precautions must be made to only accept currencies backed by strong legal\nsystems that can enforce auditability of the banks&#39; activities by a sufficiently\nlarge group of trusted notaries and institutions.</p>\n<p>A result of this integration would be, for instance, the ability of anyone with\na bank account at a participating bank to move dollars from their bank account,\nwhich is on the zone, to other accounts on the zone, or to the hub, or to\nanother zone entirely.  In this regard, the Cosmos Hub can act as a seamless\nconduit between fiat currencies and cryptocurrencies, removing the barriers that\nhave until now limitted their interoperabiltiy to the realm of exchanges.</p>\n<h3 id=\"ethereum-scaling\">Ethereum Scaling</h3>\n<p>An open issue for Ethereum is how to solve the scaling problem.  Currently,\nEthereum nodes process every single transaction and also stores all the state.\n<a href=\"https://docs.google.com/presentation/d/1CjD0W4l4-CwHKUvfF5Vlps76fKLEC6pIwu1a_kC_YRQ/mobilepresent?slide=id.gd284b9333_0_28\">link</a>.</p>\n<p>Since Tendermint can commit blocks much faster than Ethereum&#39;s proof-of-work,\nEVM zones powered by Tendermint consensus and operating on pegged-ether can\nprovide higher performance to Ethereum blockchains.  Additionally, though the\nCosmos hub and IBC packet mechanics does not allow for arbitrary contract logic\nexecution per se, it can be used to coordinate token movements between Ethereum\ncontracts running on different zones, providing a foundation for token-centric\nEthereum scaling via sharding.</p>\n<h3 id=\"multi-application-integration\">Multi-Application Integration</h3>\n<p>Cosmos zones run arbitrary application logic, defined at the beginning of the\nzone&#39;s life, and potentially updated over time by governance. Such flexibility\nallows Cosmos zones to act as pegs to other cryptocurrencies, like Ethereum or\nBitcoin, but it also permits derivatives of those blockchains, utilizing the\nsame codebase but with a different validator set and initial distribution. This\nallows many existing cryptocurrency frameworks, such as that of Ethereum,\nZerocash, Bitcoin, CryptoNote, and so on to be used with a higher performance\nconsensus engine (Tendermint Core) on a common network, openning tremendous\nopportunity for interoperability across platforms.  Furthermore, as a\nmulti-asset blockchain, a single transaction may contain multiple inputs and\noutputs, where each input can be any token type, enabling Cosmos to serve\ndirectly as a platform for decentralized exchange, though orders are assumed to\nbe matched via other platforms. Alternatively, a zone can serve as a distributed\nfault-tolerant exchange (with orderbooks), which can be a strict improvement\nover existing centralized cryptocurrency exchanges which tend to get hacked over\ntime. </p>\n<p>Zones can also serve as blockchain-backed versions of enterprise and government\nsystems, where pieces of a particular service, traditionally run by an\norganization or group of organizations, are instead run as a TMSP application on\na certain zone, allowing it to inherit the security and interoperability of the\npublic Cosmos network, without sacrificing control over the underlying service.\nThus, Cosmos may offer the best of both worlds for organizations looking to\nutilize blockchain technology that are wary of relinquishing control completely\nto a (distributed) third party.</p>\n<h3 id=\"network-partition-mitigation\">Network Partition Mitigation</h3>\n<p>Some claim that a major problem with consistency-favouring consensus algorithms\nlike Tendermint is that any network partition which causes there to be no single\npartition with +⅔ voting power (e.g. ⅓+ goign offline) will halt consensus\naltogether.  The Cosmos architecture can mitigate this problem by using a global\nhub with regional autonomous zones, where voting power for each zone are\ndistributed based on a common geographic region.  For instance, a common\nparadigm may be for individual cities, or regions, to operate their own zones\nwhile sharing a common hub (e.g. the Cosmos Hub), enabling municipal activity to\npersist in the event that the hub halts due to a temporary network partition.\nNote that this allows real geological, political, and network-topological\nfeatures to be considered in designing robust federated fault-tolerant systems.</p>\n<h3 id=\"federated-name-resolution-system\">Federated Name Resolution System</h3>\n<p>NameCoin was one of the first blockchains to attempt to solve the\nname-resolution problem by adapting the Bitcoin blockchain.  Unfortunately there\nhave been several issues with this approach.</p>\n<p>With Namecoin, we can verify that say, <em>@satoshi</em> was registered with a\nparticular public key at some point in the past, but we wouldn’t know whether\nthe public key had since been updated recently unless we download all the blocks\nsince the last update of that name.  This is due to the limitation of Bitcoin&#39;s\nUTXO transaction Merkle-ization model where only the transactions (but not\nmutable application state) are Merkle-ized into the block-hash -- which lets us\nprove existence, but not the non-existence of later updates to a name.  Thus, we\ncan&#39;t know for certain the most recent value of a name without trusting a full\nnode, or incurring significant costs in bandwidth by downloading the whole\nblockchain.</p>\n<p>Even if a Merkle-ized search tree were implemented in NameCoin, its dependency\non proof-of-work makes light client verification problematic. Light clients must\ndownload a complete copy of the headers for all blocks in the entire blockchain\n(or at least all the headers since the last update to a name).  This means that\nthe bandwidth requirements scale linearly with the amount of time <a href=\"https://en.bitcoin.it/wiki/Thin_Client_Security\">[21]</a>.\nIn addition, name-changes on a proof-of-work blockchain requires waiting for\nadditional proof-of-work confirmation blocks, which can take up to an hour on\nBitcoin.</p>\n<p>With Tendermint, all we need is the most recent block-hash signed by a quorum of\nvalidators (by voting power), and a Merkle proof to the current value associated\nwith the name.  This makes it possible to have a succinct, quick, and secure\nlight-client verification of name values.</p>\n<p>In Cosmos, we can take this concept and extend it further. Each\nname-registration zone in Cosmos can have an associated top-level-domain\n(TLD) name such as &quot;.com&quot; or &quot;.org&quot;, and each name-registration zone can have\nits own governance and registration rules.</p>\n<h2 id=\"issuance-and-incentives\">Issuance and Incentives</h2>\n<h3 id=\"the-atom-token\">The Atom Token</h3>\n<p>While the Cosmos Hub is a multi-asset distributed ledger, there is a special\nnative token called the <em>atom</em>.  Atoms are the only staking token of the Cosmos\nHub.  Atoms are a license for the holder to vote, validate, or delegate to other\nvalidators.  Like Ethereum&#39;s ether, atoms can also be used to pay for\ntransaction fees to mitigate spam.  Additional inflationary atoms and block\ntransaction fees are rewarded to validators and delegators who delegate to\nvalidators.</p>\n<p>The <code>BurnAtomTx</code> transaction can be used to recover any proportionate amount of\ntokens from the reserve pool.</p>\n<h4 id=\"crowdfund\">Crowdfund</h4>\n<p>The initial distribution of atom tokens and validators on Genesis will go to the\nfunders of the Cosmos Crowdsale (75%), pre-funders (5%), and Cosmos Corp (20%).\nFrom genesis onward, 1/3 of the total amount of atoms will be rewarded to bonded\nvalidators and delegators every year.</p>\n<p>See the <a href=\"https://github.com/cosmos/cosmos/blob/master/PLAN.md\">Crowdfund Plan</a>\nfor additional details.</p>\n<h4 id=\"vesting\">Vesting</h4>\n<p>To prevent the crowdfund from attracting short-term speculators only interested\nin a pump-and-dump scheme, the genesis atoms will not be transferrable until\nthey have vested.  Each account will vest atoms over a period of 2 years at a\nconstant rate every hour, determined by the total number of genesis atoms / (2 <em>\n365 </em> 24) hours.  Atoms earned by the inflationary block reward are pre-vested,\nand can be transferred immediately, so bonded validators and delegators can earn\nmore than 1/2 of their genesis atoms after the first year.</p>\n<h3 id=\"limitations-on-the-number-of-validators\">Limitations on the Number of Validators</h3>\n<p>Unlike Bitcoin or other proof-of-work blockchains, a Tendermint blockchain gets\nslower with more validators due to the increased communication complexity.\nFortunately, we can support enough validators to make for a robust globally\ndistributed blockchain with very fast transaction confirmation times, and, as\nbandwidth, storage, and parallel compute capacity increases, we will be able to\nsupport more validators in the future.</p>\n<p>On genesis day, the maximum number of validators will be set to 100, and this\nnumber will increase at a rate of 13% for 10 years, and settle at 300\nvalidators.</p>\n<pre><code>Year 0: 100\nYear 1: 113\nYear 2: 127\nYear 3: 144\nYear 4: 163\nYear 5: 184\nYear 6: 208\nYear 7: 235\nYear 8: 265\nYear 9: 300\nYear 10: 300\n...\n</code></pre><h3 id=\"becoming-a-validator-after-genesis-day\">Becoming a Validator After Genesis Day</h3>\n<p>Atom holders who are not already validators can become one by signing and\nsubmitting a <code>BondTx</code> transaction.  The amount of atoms provided as collateral\nmust be nonzero.  Anyone can become a validator at any time, except when the\nsize of the current validator set is greater than the maximum number of\nvalidators allowed.  In that case, the transaction is only valid if the amount\nof atoms is greater than the amount of effective atoms held by the smallest\nvalidator, where effective atoms include delegated atoms.  When a new validator\nreplaces an existing validator in such a way, the existing validator becomes\ninactive and all the atoms and delegated atoms enter the unbonding state.</p>\n<h3 id=\"penalties-for-validators\">Penalties for Validators</h3>\n<p>There must be some penalty imposed on the validators for when they intentionally\nor unintentionally deviate from the sanctioned protocol. Some evidence is\nimmediately admissible, such as a double-sign at the same height and round, or a\nviolation of &quot;prevote-the-lock&quot; (a rule of the Tendermint consensus protocol).\nSuch evidence will result in the validator losing its good standing and its\nbonded atoms as well its proportionate share of tokens in the reserve pool --\ncollectively called its &quot;stake&quot; -- will get slashed.</p>\n<p>Sometimes, validators will not be available, either due to regional network\ndisruptions, power failure, or other reasons.  If, at any point in the past\n<code>ValidatorTimeoutWindow</code> blocks, a validator&#39;s commit vote is not included in\nthe blockchain more than <code>ValidatorTimeoutMaxAbsent</code> times, that validator will\nbecome inactive, and lose <code>ValidatorTimeoutPenalty</code> (DEFAULT 1%) of its stake.</p>\n<p>Some &quot;malicious&quot; behavior do not produce obviously discernable evidence on the\nblockchain. In these cases, the validators can coordinate out of band to force\nthe timeout of these malicious validators, if there is a supermajority\nconsensus.</p>\n<p>In situations where the Cosmos Hub halts due to a ⅓+ coalition of voting power\ngoing offline, or in situations where a ⅓+ coalition of voting power censor\nevidence of malicious behavior from entering the blockchain, the hub must\nrecover with a hard-fork reorg-proposal.  (Link to &quot;Forks and Censorship\nAttacks&quot;).</p>\n<h3 id=\"transaction-fees\">Transaction Fees</h3>\n<p>Cosmos Hub validators can accept any token type or combination of types as a fee\nfor processing a transaction.  Each validator can subjectively set whatever\nexchange rate it wants, and choose whatever transactions it wants, as long as\nthe <code>BlockGasLimit</code> is not exceeded.  The collected fees minus any taxes\nspecified below are redistributed to the bonded stakeholders in proportion to\ntheir bonded atoms, every <code>ValidatorPayoutPeriod</code> (DEFAULT 1 hour).</p>\n<p>Of the collected transaction fees, <code>ReserveTax</code> (DEFAULT 2%) will go toward the\nreserve pool to increase the reserve pool and increase the security and value of\nthe Cosmos network.  Also, a <code>CommonsTax</code> (DEFAULT 3%) will go toward the\nfunding of common goods.  These funds will go to the <code>CustodianAddress</code> to be\ndistributed in accordance with whatever is decided by the governance system.</p>\n<p>Atom holders who delegate their voting power to other validators pay a\ncommission to the delegated validator.  The commission can be set by each\nvalidator.</p>\n<h3 id=\"incentivizing-hackers\">Incentivizing Hackers</h3>\n<p>The security of the Cosmos Hub is a function of the security of the underlying\nvalidators and the choice of delegation by delegators.  In order to encourage\nthe discovery and early reporting of found vulnerabilities, the Cosmos Hub\nencourages hackers to publish successful exploits via a <code>ReportHackTx</code>\ntransaction that essentially says, &quot;This validator got hacked.  Please send\nbounty to this address&quot;.  Upon such an exploit, the validator and delegators\nwill become inactive, <code>HackPunishmentRatio</code> (default 5%) of everyone&#39;s atoms\nwill get slashed, and <code>HackRewardRatio</code> (default 5%) of everyone&#39;s atoms will\nget rewarded to the hacker&#39;s bounty address.  The validator must recover the\nremaining atoms by using their backup key.</p>\n<p>In order to prevent this feature from being abused to transfer unvested atoms,\nthe portion of vested vs unvested atoms of validators and delegators before and\nafter the <code>ReportHackTx</code> will remain the same, and the hacker bounty will\ninclude some unvested atoms, if any.</p>\n<h2 id=\"governance\">Governance</h2>\n<p>The Cosmos Hub is operated by a distributed organization that requires a well\ndefined governance mechanism in order to coordinate various changes to the\nblockchain, such as the variable parameters of the system, as well as software\nupgrades and constitutional amendments.</p>\n<p>All validators are responsible for voting on all proposals.  Failing to vote on\na proposal in a timely manner will result in the validator becoming inactivated \nautomatically for a period of time called the <code>AbsenteeismPenaltyPeriod</code>\n(DEFAULT 1 week).</p>\n<p>Delegators automatically inherit the vote of the delegated validator.  This vote\nmay be overridden manually.  Unbonded atoms get no vote.</p>\n<p>Each proposal requires a deposit of <code>MinimumProposalDeposit</code> tokens, which may\nbe a combination one or more tokens including atoms.  For each proposal, the\nvoters may vote to take the deposit. If more than half of the voters choose to\ntake the deposit (e.g. because the proposal was spam), the deposit goes to the\nreserve pool, except any atoms which are burned.</p>\n<p>For each proposal, voters may vote with the following options:</p>\n<ul>\n<li>Yay</li>\n<li>YayWithForce</li>\n<li>Nay</li>\n<li>NayWithForce</li>\n<li>Abstain</li>\n</ul>\n<p>A strict majority of Yay or YayWithForce votes (or Nay or NayWithForce votes) is\nrequired for the proposal to be decided as accepted (or decided as failed), but\n1/3+ can veto the majority decision by voting &quot;with force&quot;.  When a strict\nmajority is vetoed, everyone gets punished by losing <code>VetoPenaltyFeeBlocks</code>\n(DEFAULT 1 day&#39;s worth of blocks) worth of fees (except taxes which will not be\naffected), and the party that vetoed the majority decision will be additionally\npunished by losing <code>VetoPenaltyAtoms</code> (DEFAULT 0.1%) of its atoms.</p>\n<h3 id=\"parameter-change-proposal\">Parameter Change Proposal</h3>\n<p>Any of the parameters defined here can be changed with the acceptance of a\n<code>ParameterChangeProposal</code>.</p>\n<h3 id=\"text-proposal\">Text Proposal</h3>\n<p>All other proposals, such as a proposal to upgrade the protocol, will be\ncoordinated via the generic <code>TextProposal</code>.</p>\n<h2 id=\"roadmap\">Roadmap</h2>\n<p>See <a href=\"https://github.com/cosmos/cosmos/blob/master/PLAN.md\">the Plan</a>.</p>\n<h2 id=\"related-work\">Related Work</h2>\n<p>There have been many innovations in blockchain consensus and scalability in the\npast couple of years.  This section provides a brief survey of a select number\nof important ones.</p>\n<h3 id=\"consensus-systems\">Consensus Systems</h3>\n<h4 id=\"classic-byzantine-fault-tolerance\">Classic Byzantine Fault Tolerance</h4>\n<p>Consensus in the presence of malicious participants is a problem dating back to\nthe early 80s, when Leslie Lamport coined the phrase &quot;Byzantine fault&quot; to refer\nto arbitrary process behavior that deviates from the intended behavior, in\ncontrast to a &quot;crash fault&quot;, wherein a process simply crashes.  Early solutions\nwere discovered for synchronous networks where there is an upper bound on\nmessage latency, though pratical use was limited to highly controlled\nenvironments such as airplane controllers and datacenters synchronized via\natomic clocks.  It was not until the late 90s that Practical Byzantine Fault\nTolerance (PBFT) <a href=\"http://pmg.csail.mit.edu/papers/osdi99.pdf\">[11]</a> was introduced as an efficient partially\nsynchronous consensus algorithm able to tolerate up to ⅓ of processes behaving\narbitrarily.  PBFT became the standard algorithm, spawning many variations,\nincluding most recently by IBM as part of their contribution to Hyperledger.</p>\n<p>The main benefit of Tendermint consensus over PBFT is that Tendermint has an\nimproved and simplified underlying structure, some of which is a result of\nembracing the blockchain paradigm.  Tendermint blocks must commit in order,\nwhich obviates the complexity and communication overhead associated with PBFT&#39;s\nview-changes.  In Cosmos and many cryptocurrencies, there is no need to allow\nfor block <em>N+i</em> where <em>i &gt;= 1</em> to commit, when block <em>N</em>\nitself hasn&#39;t yet committed. If bandwidth is the reason why block <em>N</em>\nhasn&#39;t committed in a Cosmos zone, then it doesn&#39;t help to use bandwidth sharing\nvotes for blocks <em>N+i</em>. If a network partition or offline nodes is the\nreason why block <em>N</em> hasn&#39;t committed, then <em>N+i</em> won&#39;t commit\nanyway.</p>\n<p>In addition, the batching of transactions into blocks allows for regular\nMerkle-hashing of the application state, rather than periodic digests as with\nPBFT&#39;s checkpointing scheme.  This allows for faster provable transaction\ncommits for light-clients and faster inter-blockchain communication.</p>\n<p>Tendermint Core also includes many optimizations and features that go above and\nbeyond what is specified in PBFT.  For example, the blocks proposed by\nvalidators are split into parts, Merkle-ized, and gossipped in such a way that\nimproves broadcasting performance (see LibSwift <a href=\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\">[19]</a> for inspiration).\nAlso, Tendermint Core doesn&#39;t make any assumption about point-to-point\nconnectivity, and functions for as long as the P2P network is weakly connected.</p>\n<h4 id=\"bitshares-delegated-stake\">BitShares delegated stake</h4>\n<p>While not the first to deploy proof-of-stake (PoS), BitShares <a href=\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\">[12]</a>\ncontributed considerably to research and adoption of PoS blockchains,\nparticularly those known as &quot;delegated&quot; PoS.  In BitShares, stake holders elect\n&quot;witnesses&quot;, responsible for ordering and committing transactions, and\n&quot;delegates&quot;, responsible for co-ordinating software updates and parameter\nchanges.  Though BitShares achieves high performance (100k tx/s, 1s latency) in\nideal conditions, it is subject to double spend attacks by malicious witnesses\nwhich fork the blockchain without suffering an explicit economic punishment --\nit suffers from the &quot;nothing-at-stake&quot; problem. BitShares attempts to mitigate\nthe problem by allowing transactions to refer to recent block-hashes.\nAdditionally, stakeholders can remove or replace misbehaving witnesses on a\ndaily basis, though this does nothing to explicitly punish a double-spend attack\nthat was successful.</p>\n<h4 id=\"stellar\">Stellar</h4>\n<p>Building on an approach pioneered by Ripple, Stellar <a href=\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\">[13]</a> refined a\nmodel of Federated Byzantine Agreement wherein the processes participating in\nconsensus do not constitute a fixed and globally known set.  Rather, each\nprocess node curates one or more &quot;quorum slices&quot; each constituting a set of\ntrusted processes. A &quot;quorum&quot; in Stellar is defined to be a set of nodes that\ncontain (is a superset of) at least one quorum slice for each node in the set,\nsuch that agreement can be reached.</p>\n<p>The security of the Stellar mechanism relies on the assumption that the\nintersection of <em>any</em> two quorums is non-empty, while the availability of a node\nrequires at least one of its quorum slices to consist entirely of correct nodes,\ncreating a trade-off between using large or small quorum-slices that may be\ndifficult to balance without imposing significant assumptions about trust.\nUltimately, nodes must somehow choose adequate quorum slices for there to be\nsufficient fault-tolerance (or any &quot;intact nodes&quot; at all, of which much of the\nresults of the paper depend on), and the only provided strategy for ensuring\nsuch a configuration is heirarchical and similar to the Border Gateway Protocol\n(BGP), used by top-tier ISPs on the internet to establish global routing tables,\nand by that used by browsers to manage TLS certificates; both notorious for\ntheir insecurity.</p>\n<p>The criticism in the Stellar paper of the Tendermint-based proof-of-stake\nsystems is mitigated by the token strategy described here, wherein a new type of\ntoken called the <em>atom</em> is issued that represent claims to future portions of\nfees and rewards. The advantage of Tendermint-based proof-of-stake, then, is its\nrelative simplicity, while still providing sufficient, and provable security\nguarantees.</p>\n<h4 id=\"bitcoinng\">BitcoinNG</h4>\n<p>BitcoinNG is a proposed improvement to Bitcoin that would allow for forms of\nvertical scalability, such as increasing the block size, without the negative\neconomic consequences typically associated with such a change, such as the\ndisproportionately large impact on small miners.  This improvement is achieved\nby separating leader election from transaction broadcast: leaders are first\nelected by proof-of-work in &quot;micro-blocks&quot;, and then able to broadcast\ntransactions to be committed until a new micro-block is found. This reduces the\nbandwidth requirements necessary to win the PoW race, allowing small miners to\nmore fairly compete, and allowing transactions to be committed more regularly by\nthe last miner to find a micro-block.</p>\n<h4 id=\"casper\">Casper</h4>\n<p>Casper <a href=\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\">[16]</a> is a proposed proof-of-stake consensus algorithm for\nEthereum.  Its prime mode of operation is &quot;consensus-by-bet&quot;.  The idea is that\nby letting validators iteratively bet on which block it believes will become\ncommitted into the blockchain based on the other bets that it&#39;s seen so far,\nfinality can be achieved eventually.\n<a href=\"https://blog.ethereum.org/2015/12/28/understanding-serenity-part-2-casper/\">link</a>.\nThis is an active area of research by the Casper team.  The challenge is in\nconstructing a betting mechanism that can be proven to be an evolutionarily\nstable strategy.  The main benefit of Casper as compared to Tendermint may be in\noffering &quot;availability over consistency&quot; -- consensus does not require a +⅔\nquorum of voting power -- perhaps at the cost of commit speed or\nimplementation complexity.</p>\n<h3 id=\"horizontal-scaling\">Horizontal Scaling</h3>\n<h4 id=\"interledger-protocol\">Interledger Protocol</h4>\n<p>The Interledger protocol <a href=\"https://interledger.org/rfcs/0001-interledger-architecture/\">[14]</a> is not strictly a scalability solution. It\nprovides an adhoc interoperation between different ledger systems through a\nloosely coupled bilateral relationship network.  Like the Lightning Network, the\npurpose of ILP is to facilitate payments, but it specifically focuses on\npayments across disparate ledger types, and extends the atomic transaction\nmechanism to include not only hash-locks, but also a quroum of notaries (called\nthe Atomic Transport Protocol).  The latter mechanism for enforcing atomicity in\ninter-ledger transactions is similar to Tendermint&#39;s light-client SPV echanism,\nso an illustration of the distinction between ILP and Cosmos/IBC is warranted,\nand provided below.</p>\n<ol>\n<li><p>The notaries of a connector in ILP does not support membership changes, and\ndoes not allow for flexible weighting between notaries.  On the other hand,\nIBC is designed specifically for blockchains, where validators can have\ndifferent weights, and where membership can change over the course of the\nblockchain.</p>\n</li>\n<li><p>As in the Lightning Network, the receiver of payment in ILP must online to\nsend a confirmation back to the sender.  In a token transfer over IBC, the\nvalidator-set of the receiver&#39;s blockchain is responsible for providing\nconfirmation, not the receiving user.</p>\n</li>\n<li><p>The most striking difference is that ILP&#39;s connectors are not responsible or\nkeeping authoritative state about payments, whereas in Cosmos, the validators\nof a hub are the authority of the state of IBC token transfers as well as the\nauthority of the amount of tokens held by each zone (but not the amount of\ntokens held by each account within a zone).  This is he fundamental innovation\nthat allows for secure asymmetric tranfer of tokens from zone to zone; the\nanalog to ILP&#39;s connector in Cosmos is a persistent and maximally secure\nblockchain ledger, the Cosmos Hub.</p>\n</li>\n<li><p>The inter-ledger payments in ILP need to be backed by an exchange orderbook,\nas there is no asymmetric transfer of coins from one ledger to another, only\nthe transfer of value or market equivalents.</p>\n</li>\n</ol>\n<h4 id=\"sidechains\">Sidechains</h4>\n<p>Sidechains <a href=\"https://blockstream.com/sidechains.pdf\">[15]</a> are a proposed mechanism for scaling the Bitcoin network\nvia alternative blockchains that are &quot;pegged&quot; to the Bitcoin blockchain.\nSidechains allow bitcoins to effectively move from the Bitcoin blockchain to the\nsidechain and back, and allow for experimentation in new features on the\nsidechain.  As in the Cosmos Hub, the sidechain and Bitcoin serve as\nlight-clients of each other, using SPV proofs to determine when coins should be\ntransferred to the sidechain and back.  Of course, since Bitcoin uses\nproof-of-work, sidechains centered around Bitcoin suffer from the many problems\nand risks of proof-of-work as a consensus mechanism.  Furthermore, this is a\nBitcoin-maximalist solution that doesn&#39;t natively support a variety of tokens\nand inter-zone network topology as Cosmos does. That said, the core mechanism of\nthe two-way peg is in principle the same as that employed by the Cosmos network.</p>\n<h4 id=\"ethereum-scalability-efforts\">Ethereum Scalability Efforts</h4>\n<p>Ethereum is currently researching a number of different strategies to shard the\nstate of the Ethereum blockchain to address scalability needs. These efforts\nhave the goal of maintaining the abstraction layer offered by the current\nEthereum Virtual Machine across the shared state space. Multiple research\nefforts are underway at this time. <a href=\"https://github.com/ethereum/EIPs/issues/53\">[18]</a><a href=\"http://vitalik.ca/files/mauve_paper.html\">[22]</a></p>\n<h5 id=\"cosmos-vs-ethereum-2-0-mauve\">Cosmos vs Ethereum 2.0 Mauve</h5>\n<p>Cosmos and Ethereum 2.0 Mauve <a href=\"http://vitalik.ca/files/mauve_paper.html\">[22]</a> have different design goals.</p>\n<ul>\n<li>Cosmos is specifically about tokens.  Mauve is about scaling general computation.</li>\n<li>Cosmos is not bound to the EVM, so even different VMs can interoperate.</li>\n<li>Cosmos lets the zone creator determine who validates the zone.</li>\n<li>Anyone can start a new zone in Cosmos (unless governance decides otherwise).</li>\n<li>The hub isolates zone failures so global token invariants are preserved.</li>\n</ul>\n<h3 id=\"general-scaling\">General Scaling</h3>\n<h4 id=\"lightning-network\">Lightning Network</h4>\n<p>The Lightning Network is a proposed token transfer network operating at a layer\nabove the Bitcoin blockchain (and other public blockchains), enabling many\norders of magnitude improvement in transaction throughput by moving the majority\nof transactions outside of the consensus ledger into so-called &quot;payment\nchannels&quot;. This is made possible by on-chain cryptocurrency scripts, which\nenables parties to enter into bilateral stateful contracts where the state can\nbe updated by sharing digital signatures, and contracts can be closed by finally\npublishing evidence onto the blockchain, a mechanism first popularized by\ncross-chain atomic swaps.  By openning payment channels with many parties,\nparticipants in the Lightning Network can become focal points for routing the\npayments of others, leading to a fully connected payment channel network, at the\ncost of capital being tied up on payment channels.</p>\n<p>While the Lightning Network can also easily extend across multiple independent\nblockchains to allow for the transfer of <em>value</em> via an exchange market, it\ncannot be used to assymetrically transfer <em>tokens</em> from one blockchain to\nanother.  The main benefit of the Cosmos network described here is to enable\nsuch direct token transfers.  That said, we expect payment channels and the\nLightning Network to become widely adopted along with our token transfer\nmechanism, for cost-saving and privacy reasons.</p>\n<h4 id=\"segregated-witness\">Segregated Witness</h4>\n<p>Segregated Witness is a Bitcoin improvement proposal\n<a href=\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\">link</a> that aims\nto increase the per-block tranasction throughput 2X or 3X, while simultaneously\nmaking block syncing faster for new nodes.  The brilliance of this solution is\nin how it works within the limitations of Bitcoin&#39;s current protocol and allows\nfor a soft-fork upgrade (i.e. clients with older versions of the software will\ncontinue to function after the upgrade).  Tendermint being a new protocol has no\ndesign restrictions, so it has a different scaling priorities.  Primarily,\nTendermint uses a BFT round-robin algorithm based on cryptographic signatures\ninstead of mining, which trivially allows horizontal scaling through multiple\nparallel blockchains, while regular, more frequent block commits allow for\nvertical scaling as well.</p>\n<hr/>\n\n<h2 id=\"appendix\">Appendix</h2>\n<h3 id=\"fork-accountability\">Fork Accountability</h3>\n<p>A well designed consensus protocol should provide some guarantees in the event that the tolerance\ncapacity is exceeded and the consensus fails.  This is especially necessary in\neconomic systems, where Byzantine behaviour can have substantial financial\nreward.  The most important such guarantee is a form of <em>fork-accountability</em>,\nwhere the processes that caused the consensus to fail (ie.  caused clients of\nthe protocol to accept different values - a fork) can be identified and punished\naccording to the rules of the protocol, or, possibly, the legal system.  When\nthe legal system is unreliable or excessively expensive to invoke, validators can be forced to make security\ndeposits in order to participate, and those deposits can be revoked, or slashed,\nwhen malicious behaviour is detected <a href=\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\">[10]</a>.</p>\n<p>Note this is much unlike Bitcoin, where forking is a regular occurence due to\nnetwork asynchrony and the probabilistic nature of finding partial hash\ncollissions.  Since in many cases, a malicious fork is indistinguishable from a\nfork due to asynchrony, Bitcoin can not reliably implement fork-accountability,\nother than the implicit opportunity cost paid by miners for mining an orphaned\nblock.</p>\n<h3 id=\"tendermint-consensus\">Tendermint Consensus</h3>\n<p>We call the voting stages <em>PreVote</em> and <em>PreCommit</em>. A vote can be for a\nparticular block or for <em>Nil</em>.  We call a collection of +⅔ PreVotes for a single\nblock in the same round a <em>Polka</em>, and a collection of +⅔ PreCommits for a\nsingle block in the same round a <em>Commit</em>.  If +⅔ PreCommit for Nil in the same\nround, they move to the next round.</p>\n<p>Note that strict determinism in the protocol incurs a weak synchrony assumption\nas faulty leaders must be detected and skipped.  Thus, validators wait some\namount of time <em>TimeoutPropose</em> before they Prevote Nil, and the value of\nTimeoutPropose increases with each round.  Progression through the rest of a\nround is fully asychronous, in that progress is only made once a validator hears\nfrom +⅔ of the network.  In practice, it would take an extremely strong\nadversary to indefinetely thwart the weak synchrony assumption (causing the\nconsensus to fail to ever commit a block), and doing so can be made even more\ndifficult by using randomized values of TimeoutPropose on each validator.</p>\n<p>An additional set of constraints, or Locking Rules, ensure that the network will\neventually commit just one block at each height. Any malicious attempt to cause\nmore than one block to be committed at a given height can be identified.  First,\na PreCommit for a block must come with justification, in the form of a Polka for\nthat block. If the validator has already PreCommit a block at round\n<em>R_1</em>, we say they are <em>locked</em> on that block, and the Polka used to\njustify the new PreCommit at round <em>R_2</em> must come in a round\n<em>R_polka</em> where <em>R_1 &lt; R_polka &lt;= R_2</em>.  Second, validators\nmust Propose and/or PreVote the block they are locked on.  Together, these\nconditions ensure that a validator does not PreCommit without sufficient\nevidence as justification, and that validators which have already PreCommit\ncannot contribute to evidence to PreCommit something else.  This ensures both\nsafety and liveness of the consensus algorithm.</p>\n<p>The full details of the protocol are described\n<a href=\"https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm\">here</a>.</p>\n<h3 id=\"tendermint-light-clients\">Tendermint Light Clients</h3>\n<p>The need to sync all block headers is eliminated in Tendermint-PoS as the\nexistence of an alternative chain (a fork) means ⅓+ of bonded stake can be\nslashed.  Of course, since slashing requires that <em>someone</em> share evidence of a\nfork, light clients should store any block-hash commits that it sees.\nAdditionally, light clients could periodically stay synced with changes to the\nvalidator set, in order to avoid <a href=\"#preventing-long-range-attacks\">long range\nattacks</a> (but other solutions are possible).</p>\n<p>In spirit similar to Ethereum, Tendermint enables applications to embed a\nglobal Merkle root hash in each block, allowing easily verifiable state queries\nfor things like account balances, the value stored in a contract, or the\nexistence of an unspent transaction output, depending on the nature of the\napplication.</p>\n<h3 id=\"preventing-long-range-attacks\">Preventing Long Range Attacks</h3>\n<p>Assuming a sufficiently resilient collection of broadcast networks and a static\nvalidator set, any fork in the blockchain can be detected and the deposits of\nthe offending validators slashed.  This innovation, first suggested by Vitalik\nButerin in early 2014, solves the nothing-at-stake problem of other\nproof-of-stake cryptocurrencies (see <a href=\"#related-work\">Related Work</a>). However,\nsince validator sets must be able to change, over a long range of time the\noriginal validators may all become unbonded, and hence would be free to create a\nnew chain, from the genesis block, incurring no cost as they no longer have\ndeposits locked up.  This attack came to be known as the Long Range Attack (LRA)\nin contrast to a Short Range Attack, where validators who are currently bonded\ncause a fork and are hence punishable (assuming a fork-accountable BFT algorithm\nlike Tendermint consensus). Long Range Attacks are often thought to be a\ncritical blow to proof-of-stake.</p>\n<p>Fortunately, the LRA can be mitigated as follows.  First, for a validator to\nunbond (thereby recovering their collateral deposit and no longer earning fees\nto participate in the consensus), the deposit must be made untransferable for an\namount of time known as the &quot;unbonding period&quot;, which may be on the order of\nweeks or months.  Second, for a light client to be secure, the first time it\nconnects to the network it must verify a recent block-hash against a trusted\nsource, or preferably multiple of them.  This condition is sometimes referred to\nas &quot;weak subjectivity&quot;.  Finally, to remain secure, it must sync up with the\nlatest validator set at least as frequently as the length of the unbonding\nperiod. This ensures that the light client knows about changes to the validator\nset before a validator has its capital unbonded and thus no longer at stake,\nwhich would allow it to deceive the client by carrying out a long range attack\nby creating new blocks beginning back at a height where it was bonded (assuming\nit has control of sufficiently many of the early private keys).</p>\n<p>Note that overcoming the LRA in this way requires an overhaul of the original\nsecurity model of proof-of-work. In PoW, it is assumed that a light client can\nsync to the current height from the trusted genesis block at any time simply by\nprocessing the proof-of-work in every block header.  To overcome the LRA,\nhowever, we require that a light client come online with some regularity to\ntrack changes in the validator set, and that the first time they come online\nthey must be particularly careful to authenticate what they hear from the\nnetwork against trusted sources. Of course, this latter requirement is similar\nto that of Bitcoin, where the protocol and software must also be obtained from a\ntrusted source.</p>\n<p>The above method for preventing LRA is well suited for validators and full nodes\nof a Tendermint-powered blockchain because these nodes are meant to remain\nconnected to the network.  The method is also suitable for light clients that\ncan be expected to sync with the network frequently.  However, for light clients\nthat are not expected to have frequent access to the internet or the blockchain\nnetwork, yet another solution can be used to overcome the LRA.  Non-validator\ntoken holders can post their tokens as collateral with a very long unbonding\nperiod (e.g. much longer than the unbonding period for validators) and serve\nlight clients with a secondary method of attesting to the validity of current\nand past block-hashes. While these tokens do not count toward the security of\nthe blockchain&#39;s consensus, they nevertheless can provide strong guarantees for\nlight clients.  If historical block-hash querying were supported in Ethereum,\nanyone could bond their tokens in a specially designed smart contract and\nprovide attestation services for pay, effectively creating a market for\nlight-client LRA security.</p>\n<h3 id=\"overcoming-forks-and-censorship-attacks\">Overcoming Forks and Censorship Attacks</h3>\n<p>Due to the definition of a block commit, any ⅓+ coalition of voting power can\nhalt the blockchain by going offline or not broadcasting their votes. Such a\ncoalition can also censor particular transactions by rejecting blocks that\ninclude these transactions, though this would result in a significant proportion\nof block proposals to be rejected, which would slow down the rate of block\ncommits of the blockchain, reducing its utility and value. The malicious\ncoalition might also broadcast votes in a trickle so as to grind blockchain\nblock commits to a near halt, or engage in any combination of these attacks.\nFinally, it can cause the blockchain to fork, by double-signing or violating the\nlocking rules.</p>\n<p>If a global active adversary were also involved, it can partition the network in\nsuch a way that it may appear that the wrong subset of validators were\nresponsible for the slowdown. This is not just a limitation of Tendermint, but\nrather a limitation of all consensus protocols whose network is potentially\ncontrolled by an active adversary.</p>\n<p>For these types of attacks, a subset of the validators should coordinate through\nexternal means to sign a reorg-proposal that chooses a fork (and any evidence\nthereof) and the initial subset of validators with their signatures. Validators\nwho sign such a reorg-proposal forego their collateral on all other forks.\nClients should verify the signatures on the reorg-proposal, verify any evidence,\nand make a judgement or prompt the end-user for a decision.  For example, a\nphone wallet app may prompt the user with a security warning, while a\nrefrigerator may accept any reorg-proposal signed by +½ of the original\nvalidators by voting power.</p>\n<p>No non-synchronous Byzantine fault-tolerant algorithm can come to consensus when\n⅓+ of voting power are dishonest, yet a fork assumes that ⅓+ of voting power\nhave already been dishonest by double-signing or lock-changing without\njustification.  So, signing the reorg-proposal is a coordination problem that\ncannot be solved by any non-synchronous protocol (i.e. automatically, and\nwithout making assumptions about the reliability of the underlying network).\nFor now, we leave the problem of reorg-proposal coordination to human\ncoordination via social consensus on internet media.  Validators must take care\nto ensure that there are no remaining network partitions prior to signing a\nreorg-proposal, to avoid situations where two conflicting reorg-proposals are\nsigned.</p>\n<p>Assuming that the external coordination medium and protocol is robust, it\nfollows that forks are less of a concern than censorship attacks.</p>\n<p>In addition to forks and censorship, which require ⅓+ Byzantine voting power, a\ncoalition of +⅔ voting power may commit arbitrary, invalid state.  This is\ncharacteristic of any (BFT) consensus system. Unlike double-signing, which\ncreates forks with easily verifiable evidence, detecting committment of an\ninvalid state requires non-validating peers to verify whole blocks, which\nimplies that they keep a local copy of the state and execute each transaction,\ncomputing the state root independently for themselves.  Once detected, the only\nway to handle such a failure is via social consensus.  For instance, in\nsituations where Bitcoin has failed, whether forking due to software bugs (as in\nMarch 2013), or committing invalid state due to Byzantine behavior of miners (as\nin July 2015), the well connected community of businesses, developers, miners,\nand other organizations established a social consensus as to what manual actions\nwere required by participants to heal the network.  Furthermore, since\nvalidators of a Tendermint blockchain may be expected to be identifiable,\ncommitment of an invalid state may even be punishable by law or some external\njurisprudence, if desired.</p>\n<h3 id=\"tmsp-specification\">TMSP specification</h3>\n<p>TMSP consists of 3 primary message types that get delivered from the core to the\napplication. The application replies with corresponding response messages.</p>\n<p>The <code>AppendTx</code> message is the work horse of the application. Each transaction in\nthe blockchain is delivered with this message. The application needs to validate\neach transactions received with the AppendTx message against the current state,\napplication protocol, and the cryptographic credentials of the transaction. A\nvalidated transaction then needs to update the application state — by binding a\nvalue into a key values store, or by updating the UTXO database.</p>\n<p>The <code>CheckTx</code> message is similar to AppendTx, but it’s only for validating\ntransactions. Tendermint Core’s mempool first checks the validity of a\ntransaction with CheckTx, and only relays valid transactions to its peers.\nApplications may check an incrementing nonce in the transaction and return an\nerror upon CheckTx if the nonce is old.</p>\n<p>The <code>Commit</code> message is used to compute a cryptographic commitment to the\ncurrent application state, to be placed into the next block header. This has\nsome handy properties. Inconsistencies in updating that state will now appear as\nblockchain forks which catches a whole class of programming errors. This also\nsimplifies the development of secure lightweight clients, as Merkle-hash proofs\ncan be verified by checking against the block-hash, and the block-hash is signed\nby a quorum of validators (by voting power).</p>\n<p>Additional TMSP messages allow the application to keep track of and change the\nvalidator set, and for the application to receive the block information, such as\nthe height and the commit votes.  </p>\n<p>TMSP requests/responses are simple Protobuf messages.  Check out the <a href=\"https://github.com/tendermint/tmsp/blob/master/types/types.proto\">schema\nfile</a>.</p>\n<h4 id=\"appendtx\">AppendTx</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Data ([]byte)</code>: The request transaction bytes</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:<ul>\n<li><code>Code (uint32)</code>: Response code</li>\n<li><code>Data ([]byte)</code>: Result bytes, if any</li>\n<li><code>Log (string)</code>: Debug or error message</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nAppend and run a transaction.  If the transaction is valid, returns\nCodeType.OK</li>\n</ul>\n<h4 id=\"checktx\">CheckTx</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Data ([]byte)</code>: The request transaction bytes</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:<ul>\n<li><code>Code (uint32)</code>: Response code</li>\n<li><code>Data ([]byte)</code>: Result bytes, if any</li>\n<li><code>Log (string)</code>: Debug or error message</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nValidate a transaction.  This message should not mutate the state.\nTransactions are first run through CheckTx before broadcast to peers in the\nmempool layer.\nYou can make CheckTx semi-stateful and clear the state upon <code>Commit</code> or\n<code>BeginBlock</code>,\nto allow for dependent sequences of transactions in the same block.</li>\n</ul>\n<h4 id=\"commit\">Commit</h4>\n<ul>\n<li><strong>Returns</strong>:<ul>\n<li><code>Data ([]byte)</code>: The Merkle root hash</li>\n<li><code>Log (string)</code>: Debug or error message</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nReturn a Merkle root hash of the application state.</li>\n</ul>\n<h4 id=\"query\">Query</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Data ([]byte)</code>: The query request bytes</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:<ul>\n<li><code>Code (uint32)</code>: Response code</li>\n<li><code>Data ([]byte)</code>: The query response bytes</li>\n<li><code>Log (string)</code>: Debug or error message</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flush\">Flush</h4>\n<ul>\n<li><strong>Usage</strong>:<br/>\nFlush the response queue.  Applications that implement <code>types.Application</code>\nneed not implement this message -- it&#39;s handled by the project.</li>\n</ul>\n<h4 id=\"info\">Info</h4>\n<ul>\n<li><strong>Returns</strong>:<ul>\n<li><code>Data ([]byte)</code>: The info bytes</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nReturn information about the application state.  Application specific.</li>\n</ul>\n<h4 id=\"setoption\">SetOption</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Key (string)</code>: Key to set</li>\n<li><code>Value (string)</code>: Value to set for key</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:<ul>\n<li><code>Log (string)</code>: Debug or error message</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nSet application options.  E.g. Key=&quot;mode&quot;, Value=&quot;mempool&quot; for a mempool\nconnection, or Key=&quot;mode&quot;, Value=&quot;consensus&quot; for a consensus connection.\nOther options are application specific.</li>\n</ul>\n<h4 id=\"initchain\">InitChain</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Validators ([]Validator)</code>: Initial genesis-validators</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nCalled once upon genesis</li>\n</ul>\n<h4 id=\"beginblock\">BeginBlock</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Height (uint64)</code>: The block height that is starting</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nSignals the beginning of a new block. Called prior to any AppendTxs.</li>\n</ul>\n<h4 id=\"endblock\">EndBlock</h4>\n<ul>\n<li><strong>Arguments</strong>:<ul>\n<li><code>Height (uint64)</code>: The block height that ended</li>\n</ul>\n</li>\n<li><strong>Returns</strong>:<ul>\n<li><code>Validators ([]Validator)</code>: Changed validators with new voting powers (0\nto remove)</li>\n</ul>\n</li>\n<li><strong>Usage</strong>:<br/>\nSignals the end of a block.  Called prior to each Commit after all\ntransactions</li>\n</ul>\n<p>See <a href=\"https://github.com/tendermint/tmsp#message-types\">the TMSP repository</a> for more details.</p>\n<h3 id=\"ibc-packet-delivery-acknowledgement\">IBC Packet Delivery Acknowledgement</h3>\n<p>There are several reasons why a sender may want the acknowledgement of delivery\nof a packet by the receiving chain.  For example, the sender may not know the\nstatus of the destination chain, if it is expected to be faulty.  Or, the sender\nmay want to impose a timeout on the packet (with the <code>MaxHeight</code> packet field),\nwhile any destination chain may suffer from a denial-of-service attack with a\nsudden spike in the number of incoming packets.</p>\n<p>In these cases, the sender can require delivery acknowledgement by setting the\ninitial packet status to <code>AckPending</code>.  Then, it is the receiving chain&#39;s\nresponsibility to confirm delivery by including an abbreviated<code>IBCPacket</code> in the\napp Merkle hash.</p>\n<p><img src=\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack.png\" alt=\"Figure of Zone1, Zone2, and Hub IBC with\nacknowledgement\"></p>\n<p>First, an <code>IBCBlockCommit</code> and <code>IBCPacketTx</code> are posted on &quot;Hub&quot; that proves\nthe existence of an <code>IBCPacket</code> on &quot;Zone1&quot;.  Say that <code>IBCPacketTx</code> has the\nfollowing value:</p>\n<ul>\n<li><code>FromChainID</code>: &quot;Zone1&quot;</li>\n<li><code>FromBlockHeight</code>: 100 (say)</li>\n<li><code>Packet</code>: an <code>IBCPacket</code>:<ul>\n<li><code>Header</code>: an <code>IBCPacketHeader</code>:<ul>\n<li><code>SrcChainID</code>: &quot;Zone1&quot;</li>\n<li><code>DstChainID</code>: &quot;Zone2&quot;</li>\n<li><code>Number</code>: 200 (say)</li>\n<li><code>Status</code>: <code>AckPending</code></li>\n<li><code>Type</code>: &quot;coin&quot;</li>\n<li><code>MaxHeight</code>: 350 (say &quot;Hub&quot; is currently at height 300)</li>\n</ul>\n</li>\n<li><code>Payload</code>: &lt;The bytes of a &quot;coin&quot; payload&gt;</li>\n</ul>\n</li>\n</ul>\n<p>Next, an <code>IBCBlockCommit</code> and <code>IBCPacketTx</code> are posted on &quot;Zone2&quot; that proves\nthe existence of an <code>IBCPacket</code> on &quot;Hub&quot;.  Say that <code>IBCPacketTx</code> has the\nfollowing value:</p>\n<ul>\n<li><code>FromChainID</code>: &quot;Hub&quot;</li>\n<li><code>FromBlockHeight</code>: 300</li>\n<li><code>Packet</code>: an <code>IBCPacket</code>:<ul>\n<li><code>Header</code>: an <code>IBCPacketHeader</code>:<ul>\n<li><code>SrcChainID</code>: &quot;Zone1&quot;</li>\n<li><code>DstChainID</code>: &quot;Zone2&quot;</li>\n<li><code>Number</code>: 200</li>\n<li><code>Status</code>: <code>AckPending</code></li>\n<li><code>Type</code>: &quot;coin&quot;</li>\n<li><code>MaxHeight</code>: 350</li>\n</ul>\n</li>\n<li><code>Payload</code>: &lt;The same bytes of a &quot;coin&quot; payload&gt;</li>\n</ul>\n</li>\n</ul>\n<p>Next, &quot;Zone2&quot; must include in its app-hash an abbreviated packet that shows the\nnew status of <code>AckSent</code>.  An <code>IBCBlockCommit</code> and <code>IBCPacketTx</code> are posted back\non &quot;Hub&quot; that proves the existence of an abbreviated <code>IBCPacket</code> on\n&quot;Zone2&quot;.  Say that <code>IBCPacketTx</code> has the following value:</p>\n<ul>\n<li><code>FromChainID</code>: &quot;Zone2&quot;</li>\n<li><code>FromBlockHeight</code>: 400 (say)</li>\n<li><code>Packet</code>: an <code>IBCPacket</code>:<ul>\n<li><code>Header</code>: an <code>IBCPacketHeader</code>:<ul>\n<li><code>SrcChainID</code>: &quot;Zone1&quot;</li>\n<li><code>DstChainID</code>: &quot;Zone2&quot;</li>\n<li><code>Number</code>: 200</li>\n<li><code>Status</code>: <code>AckSent</code></li>\n<li><code>Type</code>: &quot;coin&quot;</li>\n<li><code>MaxHeight</code>: 350</li>\n</ul>\n</li>\n<li><code>PayloadHash</code>: &lt;The hash bytes of the same &quot;coin&quot; payload&gt;</li>\n</ul>\n</li>\n</ul>\n<p>Finally, &quot;Hub&quot; must update the status of the packet from <code>AckPending</code> to\n<code>AckReceived</code>.  Evidence of this new finalized status should go back to\n&quot;Zone2&quot;.  Say that <code>IBCPacketTx</code> has the following value:</p>\n<ul>\n<li><code>FromChainID</code>: &quot;Hub&quot;</li>\n<li><code>FromBlockHeight</code>: 301</li>\n<li><code>Packet</code>: an <code>IBCPacket</code>:<ul>\n<li><code>Header</code>: an <code>IBCPacketHeader</code>:<ul>\n<li><code>SrcChainID</code>: &quot;Zone1&quot;</li>\n<li><code>DstChainID</code>: &quot;Zone2&quot;</li>\n<li><code>Number</code>: 200</li>\n<li><code>Status</code>: <code>AckReceived</code></li>\n<li><code>Type</code>: &quot;coin&quot;</li>\n<li><code>MaxHeight</code>: 350</li>\n</ul>\n</li>\n<li><code>PayloadHash</code>: &lt;The hash bytes of the same &quot;coin&quot; payload&gt;</li>\n</ul>\n</li>\n</ul>\n<p>Meanwhile, &quot;Zone1&quot; may optimistically assume successful delivery of a &quot;coin&quot;\npacket unless evidence to the contrary is proven on &quot;Hub&quot;.  In the example\nabove, if &quot;Hub&quot; had not received an <code>AckSent</code> status from &quot;Zone2&quot; by block\n350, it would have set the status automatically to <code>Timeout</code>.  This evidence of\na timeout can get posted back on &quot;Zone1&quot;, and any tokens can be returned.</p>\n<p><img src=\"https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack_timeout.png\" alt=\"Figure of Zone1, Zone2, and Hub IBC with acknowledgement and\ntimeout\"></p>\n<h3 id=\"merkle-tree-proof-specification\">Merkle Tree &amp; Proof Specification</h3>\n<p>There are two types of Merkle trees supported in the Tendermint/Cosmos\necosystem: The Simple Tree, and the IAVL+ Tree.</p>\n<h4 id=\"simple-tree\">Simple Tree</h4>\n<p>The Simple Tree is a Merkle tree for a static list of elements.  If the number\nof items is not a power of two, some leaves will be at different levels.  Simple\nTree tries to keep both sides of the tree the same height, but the left may be\none greater.  This Merkle tree is used to Merkle-ize the transactions of a\nblock, and the top level elements of the application state root.</p>\n<pre><code>                *\n               / \\\n             /     \\\n           /         \\\n         /             \\\n        *               *\n       / \\             / \\\n      /   \\           /   \\\n     /     \\         /     \\\n    *       *       *       h6\n   / \\     / \\     / \\\n  h0  h1  h2  h3  h4  h5\n\n  A SimpleTree with 7 elements\n</code></pre><h4 id=\"iavl-tree\">IAVL+ Tree</h4>\n<p>The purpose of the IAVL+ data structure is to provide persistent storage for\nkey-value pairs in the application state such that a deterministic Merkle root\nhash can be computed efficiently.  The tree is balanced using a variant of the\n<a href=\"http://en.wikipedia.org/wiki/AVL_tree\">AVL algortihm</a>, and all operations are\nO(log(n)).</p>\n<p>In an AVL tree, the heights of the two child subtrees of any node differ by at\nmost one.  Whenever this condition is violated upon an update, the tree is\nrebalanced by creating O(log(n)) new nodes that point to unmodified nodes of the\nold tree.  In the original AVL algorithm, inner nodes can also hold key-value\npairs.  The AVL+ algorithm (note the plus) modifies the AVL algorithm to keep\nall values on leaf nodes, while only using branch-nodes to store keys.  This\nsimplifies the algorithm while keeping the merkle hash trail short.</p>\n<p>The AVL+ Tree is analogous to Ethereum&#39;s <a href=\"http://en.wikipedia.org/wiki/Radix_tree\">Patricia\ntries</a>.  There are tradeoffs.  Keys do\nnot need to be hashed prior to insertion in IAVL+ trees, so this provides faster\nordered iteration in the key space which may benefit some applications.  The\nlogic is simpler to implement, requiring only two types of nodes -- inner nodes\nand leaf nodes.  The Merkle proof is on average shorter, being a balanced binary\ntree.  On the other hand, the Merkle root of an IAVL+ tree depends on the order\nof updates.</p>\n<p>We will support additional efficient Merkle trees, such as Ethereum&#39;s Patricia\nTrie when the binary variant becomes available.</p>\n<h3 id=\"transaction-types\">Transaction Types</h3>\n<p>In the canonical implementation, transactions are streamed to the Cosmos hub\napplication via the TMSP interface.</p>\n<p>The Cosmos Hub will accept a number of primary transaction types, including\n<code>SendTx</code>, <code>BondTx</code>, <code>UnbondTx</code>, <code>ReportHackTx</code>, <code>SlashTx</code>, <code>BurnAtomTx</code>,\n<code>ProposalCreateTx</code>, and <code>ProposalVoteTx</code>, which are fairly self-explanatory and\nwill be documented in a future revision of this paper.  Here we document the two\nprimary transaction types for IBC: <code>IBCBlockCommitTx</code> and <code>IBCPacketTx</code>.</p>\n<h4 id=\"ibcblockcommittx\">IBCBlockCommitTx</h4>\n<p>An <code>IBCBlockCommitTx</code> transaction is composed of:</p>\n<ul>\n<li><code>ChainID (string)</code>: The ID of the blockchain</li>\n<li><code>BlockHash ([]byte)</code>: The block-hash bytes, the Merkle root which includes the\napp-hash</li>\n<li><code>BlockPartsHeader (PartSetHeader)</code>: The block part-set header bytes, only\nneeded to verify vote signatures</li>\n<li><code>BlockHeight (int)</code>: The height of the commit</li>\n<li><code>BlockRound (int)</code>: The round of the commit</li>\n<li><code>Commit ([]Vote)</code>: The +⅔ Tendermint <code>Precommit</code> votes that comprise a block\ncommit</li>\n<li><code>ValidatorsHash ([]byte)</code>: A Merkle-tree root hash of the new validator set</li>\n<li><code>ValidatorsHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the\n<code>ValidatorsHash</code> against the <code>BlockHash</code></li>\n<li><code>AppHash ([]byte)</code>: A IAVLTree Merkle-tree root hash of the application state</li>\n<li><code>AppHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the\n<code>AppHash</code> against the <code>BlockHash</code></li>\n</ul>\n<h4 id=\"ibcpackettx\">IBCPacketTx</h4>\n<p>An <code>IBCPacket</code> is composed of:</p>\n<ul>\n<li><code>Header (IBCPacketHeader)</code>: The packet header</li>\n<li><code>Payload ([]byte)</code>: The bytes of the packet payload. <em>Optional</em></li>\n<li><code>PayloadHash ([]byte)</code>: The hash for the bytes of the packet. <em>Optional</em></li>\n</ul>\n<p>Either one of <code>Payload</code> or <code>PayloadHash</code> must be present.  The hash of an\n<code>IBCPacket</code> is a simple Merkle root of the two items, <code>Header</code> and <code>Payload</code>.\nAn <code>IBCPacket</code> without the full payload is called an <em>abbreviated packet</em>.</p>\n<p>An <code>IBCPacketHeader</code> is composed of:</p>\n<ul>\n<li><code>SrcChainID (string)</code>: The source blockchain ID</li>\n<li><code>DstChainID (string)</code>: The destination blockchain ID</li>\n<li><code>Number (int)</code>: A unique number for all packets</li>\n<li><code>Status (enum)</code>: Can be one of <code>AckPending</code>, <code>AckSent</code>, <code>AckReceived</code>,\n<code>NoAck</code>, or <code>Timeout</code></li>\n<li><code>Type (string)</code>: The types are application-dependent.  Cosmos reserves the\n&quot;coin&quot; packet type</li>\n<li><code>MaxHeight (int)</code>: If status is not <code>NoAckWanted</code> or <code>AckReceived</code> by this\nheight, status becomes <code>Timeout</code>. <em>Optional</em></li>\n</ul>\n<p>An <code>IBCPacketTx</code> transaction is composed of:</p>\n<ul>\n<li><code>FromChainID (string)</code>: The ID of the blockchain which is providing this\npacket; not necessarily the source</li>\n<li><code>FromBlockHeight (int)</code>: The blockchain height in which the following packet\nis included (Merkle-ized) in the block-hash of the source chain</li>\n<li><code>Packet (IBCPacket)</code>: A packet of data, whose status may be one of\n<code>AckPending</code>, <code>AckSent</code>, <code>AckReceived</code>, <code>NoAck</code>, or <code>Timeout</code></li>\n<li><code>PacketProof (IAVLProof)</code>: A IAVLTree Merkle-proof for proving the packet&#39;s\nhash against the <code>AppHash</code> of the source chain at given height</li>\n</ul>\n<p>The sequence for sending a packet from &quot;Zone1&quot; to &quot;Zone2&quot; through the\n&quot;Hub&quot; is depicted in {Figure X}.  First, an <code>IBCPacketTx</code> proves to\n&quot;Hub&quot; that the packet is included in the app-state of &quot;Zone1&quot;.  Then,\nanother <code>IBCPacketTx</code> proves to &quot;Zone2&quot; that the packet is included in the\napp-state of &quot;Hub&quot;.  During this procedure, the <code>IBCPacket</code> fields are\nidentical: the <code>SrcChainID</code> is always &quot;Zone1&quot;, and the <code>DstChainID</code> is always\n&quot;Zone2&quot;.</p>\n<p>The <code>PacketProof</code> must have the correct Merkle-proof path, as follows:</p>\n<pre><code>IBC/&lt;SrcChainID&gt;/&lt;DstChainID&gt;/&lt;Number&gt;\n</code></pre><p>When &quot;Zone1&quot; wants to send a packet to &quot;Zone2&quot; through &quot;Hub&quot;, the\n<code>IBCPacket</code> data are identical whether the packet is Merkle-ized on &quot;Zone1&quot;,\nthe &quot;Hub&quot;, or &quot;Zone2&quot;.  The only mutable field is <code>Status</code> for tracking\ndelivery, as shown below.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>We thank our friends and peers for assistance in conceptualizing, reviewing, and\nproviding support for our work with Tendermint and Cosmos.</p>\n<ul>\n<li><a href=\"https://github.com/zmanian\">Zaki Manian</a> of\n<a href=\"https://www.skuchain.com/\">SkuChain</a> provided much help in formatting and\nwording, especially under the TMSP section</li>\n<li><a href=\"https://github.com/jtremback\">Jehan Tremback</a> of Althea and Dustin Byington\nfor helping with initial iterations</li>\n<li><a href=\"http://soc1024.com/\">Andrew Miller</a> of <a href=\"https://eprint.iacr.org/2016/199\">Honey\nBadger</a> for feedback on consensus</li>\n<li><a href=\"https://fixingtao.com/\">Greg Slepak</a> for feedback on consensus and wording</li>\n<li>Also thanks to <a href=\"https://github.com/gleim\">Bill Gleim</a> and <a href=\"http://www.seunghwanhan.com\">Seunghwan\nHan</a> for various contributions.</li>\n<li><strong>Your name and organization here for your contribution</strong></li>\n</ul>\n<h2 id=\"citations\">Citations</h2>\n<ul>\n<li><a href=\"https://bitcoin.org/bitcoin.pdf\">1</a> Bitcoin: <a href=\"https://bitcoin.org/bitcoin.pdf\">https://bitcoin.org/bitcoin.pdf</a></li>\n<li><a href=\"http://zerocash-project.org/paper\">2</a> ZeroCash: <a href=\"http://zerocash-project.org/paper\">http://zerocash-project.org/paper</a></li>\n<li><a href=\"https://github.com/ethereum/wiki/wiki/White-Paper\">3</a> Ethereum: <a href=\"https://github.com/ethereum/wiki/wiki/White-Paper\">https://github.com/ethereum/wiki/wiki/White-Paper</a></li>\n<li><a href=\"https://download.slock.it/public/DAO/WhitePaper.pdf\">4</a> TheDAO: <a href=\"https://download.slock.it/public/DAO/WhitePaper.pdf\">https://download.slock.it/public/DAO/WhitePaper.pdf</a></li>\n<li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\">5</a> Segregated Witness: <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\">https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki</a></li>\n<li><a href=\"https://arxiv.org/pdf/1510.02037v2.pdf\">6</a> BitcoinNG: <a href=\"https://arxiv.org/pdf/1510.02037v2.pdf\">https://arxiv.org/pdf/1510.02037v2.pdf</a></li>\n<li><a href=\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\">7</a> Lightning Network: <a href=\"https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf\">https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf</a></li>\n<li><a href=\"https://github.com/tendermint/tendermint/wiki\">8</a> Tendermint: <a href=\"https://github.com/tendermint/tendermint/wiki\">https://github.com/tendermint/tendermint/wiki</a></li>\n<li><a href=\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\">9</a> FLP Impossibility: <a href=\"https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\">https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf</a></li>\n<li><a href=\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\">10</a> Slasher: <a href=\"https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\">https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/</a></li>\n<li><a href=\"http://pmg.csail.mit.edu/papers/osdi99.pdf\">11</a> PBFT: <a href=\"http://pmg.csail.mit.edu/papers/osdi99.pdf\">http://pmg.csail.mit.edu/papers/osdi99.pdf</a></li>\n<li><a href=\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\">12</a> BitShares: <a href=\"https://bitshares.org/technology/delegated-proof-of-stake-consensus/\">https://bitshares.org/technology/delegated-proof-of-stake-consensus/</a></li>\n<li><a href=\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\">13</a> Stellar: <a href=\"https://www.stellar.org/papers/stellar-consensus-protocol.pdf\">https://www.stellar.org/papers/stellar-consensus-protocol.pdf</a></li>\n<li><a href=\"https://interledger.org/rfcs/0001-interledger-architecture/\">14</a> Interledger: <a href=\"https://interledger.org/rfcs/0001-interledger-architecture/\">https://interledger.org/rfcs/0001-interledger-architecture/</a></li>\n<li><a href=\"https://blockstream.com/sidechains.pdf\">15</a> Sidechains: <a href=\"https://blockstream.com/sidechains.pdf\">https://blockstream.com/sidechains.pdf</a></li>\n<li><a href=\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\">16</a> Casper: <a href=\"https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/\">https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/</a></li>\n<li><a href=\"https://github.com/tendermint/tmsp\">17</a> TMSP: <a href=\"https://github.com/tendermint/tmsp\">https://github.com/tendermint/tmsp</a></li>\n<li><a href=\"https://github.com/ethereum/EIPs/issues/53\">18</a> Ethereum Sharding: <a href=\"https://github.com/ethereum/EIPs/issues/53\">https://github.com/ethereum/EIPs/issues/53</a></li>\n<li><a href=\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\">19</a> LibSwift: <a href=\"http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf\">http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf</a></li>\n<li><a href=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\">20</a> DLS: <a href=\"http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf\">http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf</a></li>\n<li><a href=\"https://en.bitcoin.it/wiki/Thin_Client_Security\">21</a> Thin Client Security: <a href=\"https://en.bitcoin.it/wiki/Thin_Client_Security\">https://en.bitcoin.it/wiki/Thin_Client_Security</a></li>\n<li><a href=\"http://vitalik.ca/files/mauve_paper.html\">22</a> Ethereum 2.0 Mauve Paper: <a href=\"http://vitalik.ca/files/mauve_paper.html\">http://vitalik.ca/files/mauve_paper.html</a></li>\n</ul>\n<h4 id=\"unsorted-links\">Unsorted links</h4>\n<ul>\n<li><a href=\"https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html\">https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html</a></li>\n\n</ul>\n\n</div>\n<section class=\"section-default\"><div class=\"section-container\">\n  <countdown></countdown>\n</div></section> \n</template>\n\n<script>\nimport Countdown from '../Countdown.vue'\n\nexport default {\n  components: {\n    Countdown\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n@import '../../styles/variables.styl'\n</style>\n\n\n\n/** WEBPACK FOOTER **\n ** WhitePaper.vue?783c173e\n **/","var map = {\n\t\"./af\": 5,\n\t\"./af.js\": 5,\n\t\"./ar\": 9,\n\t\"./ar-ma\": 6,\n\t\"./ar-ma.js\": 6,\n\t\"./ar-sa\": 7,\n\t\"./ar-sa.js\": 7,\n\t\"./ar-tn\": 8,\n\t\"./ar-tn.js\": 8,\n\t\"./ar.js\": 9,\n\t\"./az\": 10,\n\t\"./az.js\": 10,\n\t\"./be\": 11,\n\t\"./be.js\": 11,\n\t\"./bg\": 12,\n\t\"./bg.js\": 12,\n\t\"./bn\": 13,\n\t\"./bn.js\": 13,\n\t\"./bo\": 14,\n\t\"./bo.js\": 14,\n\t\"./br\": 15,\n\t\"./br.js\": 15,\n\t\"./bs\": 16,\n\t\"./bs.js\": 16,\n\t\"./ca\": 17,\n\t\"./ca.js\": 17,\n\t\"./cs\": 18,\n\t\"./cs.js\": 18,\n\t\"./cv\": 19,\n\t\"./cv.js\": 19,\n\t\"./cy\": 20,\n\t\"./cy.js\": 20,\n\t\"./da\": 21,\n\t\"./da.js\": 21,\n\t\"./de\": 23,\n\t\"./de-at\": 22,\n\t\"./de-at.js\": 22,\n\t\"./de.js\": 23,\n\t\"./dv\": 24,\n\t\"./dv.js\": 24,\n\t\"./el\": 25,\n\t\"./el.js\": 25,\n\t\"./en-au\": 26,\n\t\"./en-au.js\": 26,\n\t\"./en-ca\": 27,\n\t\"./en-ca.js\": 27,\n\t\"./en-gb\": 28,\n\t\"./en-gb.js\": 28,\n\t\"./en-ie\": 29,\n\t\"./en-ie.js\": 29,\n\t\"./en-nz\": 30,\n\t\"./en-nz.js\": 30,\n\t\"./eo\": 31,\n\t\"./eo.js\": 31,\n\t\"./es\": 33,\n\t\"./es-do\": 32,\n\t\"./es-do.js\": 32,\n\t\"./es.js\": 33,\n\t\"./et\": 34,\n\t\"./et.js\": 34,\n\t\"./eu\": 35,\n\t\"./eu.js\": 35,\n\t\"./fa\": 36,\n\t\"./fa.js\": 36,\n\t\"./fi\": 37,\n\t\"./fi.js\": 37,\n\t\"./fo\": 38,\n\t\"./fo.js\": 38,\n\t\"./fr\": 41,\n\t\"./fr-ca\": 39,\n\t\"./fr-ca.js\": 39,\n\t\"./fr-ch\": 40,\n\t\"./fr-ch.js\": 40,\n\t\"./fr.js\": 41,\n\t\"./fy\": 42,\n\t\"./fy.js\": 42,\n\t\"./gd\": 43,\n\t\"./gd.js\": 43,\n\t\"./gl\": 44,\n\t\"./gl.js\": 44,\n\t\"./he\": 45,\n\t\"./he.js\": 45,\n\t\"./hi\": 46,\n\t\"./hi.js\": 46,\n\t\"./hr\": 47,\n\t\"./hr.js\": 47,\n\t\"./hu\": 48,\n\t\"./hu.js\": 48,\n\t\"./hy-am\": 49,\n\t\"./hy-am.js\": 49,\n\t\"./id\": 50,\n\t\"./id.js\": 50,\n\t\"./is\": 51,\n\t\"./is.js\": 51,\n\t\"./it\": 52,\n\t\"./it.js\": 52,\n\t\"./ja\": 53,\n\t\"./ja.js\": 53,\n\t\"./jv\": 54,\n\t\"./jv.js\": 54,\n\t\"./ka\": 55,\n\t\"./ka.js\": 55,\n\t\"./kk\": 56,\n\t\"./kk.js\": 56,\n\t\"./km\": 57,\n\t\"./km.js\": 57,\n\t\"./ko\": 58,\n\t\"./ko.js\": 58,\n\t\"./ky\": 59,\n\t\"./ky.js\": 59,\n\t\"./lb\": 60,\n\t\"./lb.js\": 60,\n\t\"./lo\": 61,\n\t\"./lo.js\": 61,\n\t\"./lt\": 62,\n\t\"./lt.js\": 62,\n\t\"./lv\": 63,\n\t\"./lv.js\": 63,\n\t\"./me\": 64,\n\t\"./me.js\": 64,\n\t\"./mk\": 65,\n\t\"./mk.js\": 65,\n\t\"./ml\": 66,\n\t\"./ml.js\": 66,\n\t\"./mr\": 67,\n\t\"./mr.js\": 67,\n\t\"./ms\": 69,\n\t\"./ms-my\": 68,\n\t\"./ms-my.js\": 68,\n\t\"./ms.js\": 69,\n\t\"./my\": 70,\n\t\"./my.js\": 70,\n\t\"./nb\": 71,\n\t\"./nb.js\": 71,\n\t\"./ne\": 72,\n\t\"./ne.js\": 72,\n\t\"./nl\": 73,\n\t\"./nl.js\": 73,\n\t\"./nn\": 74,\n\t\"./nn.js\": 74,\n\t\"./pa-in\": 75,\n\t\"./pa-in.js\": 75,\n\t\"./pl\": 76,\n\t\"./pl.js\": 76,\n\t\"./pt\": 78,\n\t\"./pt-br\": 77,\n\t\"./pt-br.js\": 77,\n\t\"./pt.js\": 78,\n\t\"./ro\": 79,\n\t\"./ro.js\": 79,\n\t\"./ru\": 80,\n\t\"./ru.js\": 80,\n\t\"./se\": 81,\n\t\"./se.js\": 81,\n\t\"./si\": 82,\n\t\"./si.js\": 82,\n\t\"./sk\": 83,\n\t\"./sk.js\": 83,\n\t\"./sl\": 84,\n\t\"./sl.js\": 84,\n\t\"./sq\": 85,\n\t\"./sq.js\": 85,\n\t\"./sr\": 87,\n\t\"./sr-cyrl\": 86,\n\t\"./sr-cyrl.js\": 86,\n\t\"./sr.js\": 87,\n\t\"./ss\": 88,\n\t\"./ss.js\": 88,\n\t\"./sv\": 89,\n\t\"./sv.js\": 89,\n\t\"./sw\": 90,\n\t\"./sw.js\": 90,\n\t\"./ta\": 91,\n\t\"./ta.js\": 91,\n\t\"./te\": 92,\n\t\"./te.js\": 92,\n\t\"./th\": 93,\n\t\"./th.js\": 93,\n\t\"./tl-ph\": 94,\n\t\"./tl-ph.js\": 94,\n\t\"./tlh\": 95,\n\t\"./tlh.js\": 95,\n\t\"./tr\": 96,\n\t\"./tr.js\": 96,\n\t\"./tzl\": 97,\n\t\"./tzl.js\": 97,\n\t\"./tzm\": 99,\n\t\"./tzm-latn\": 98,\n\t\"./tzm-latn.js\": 98,\n\t\"./tzm.js\": 99,\n\t\"./uk\": 100,\n\t\"./uk.js\": 100,\n\t\"./uz\": 101,\n\t\"./uz.js\": 101,\n\t\"./vi\": 102,\n\t\"./vi.js\": 102,\n\t\"./x-pseudo\": 103,\n\t\"./x-pseudo.js\": 103,\n\t\"./zh-cn\": 104,\n\t\"./zh-cn.js\": 104,\n\t\"./zh-tw\": 105,\n\t\"./zh-tw.js\": 105\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 138;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/moment/locale ^\\.\\/.*$\n ** module id = 138\n ** module chunks = 2\n **/","module.exports = \" <site-header></site-header> <router-view></router-view> <site-footer></site-footer> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n ** module id = 139\n ** module chunks = 2\n **/","module.exports = \" <div class=hub-container> <div class=hub>{{ hubName }}</div> <template v-for=\\\"spoke in spokes\\\"> <div class=\\\"spoke {{ spoke.key }} {{ spoke.color }}\\\"> {{ spoke.value }} </div> <data-bundle></data-bundle> </template> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/CosmosHub.vue\n ** module id = 140\n ** module chunks = 2\n **/","module.exports = \" <div class=\\\"gfx-wrapper height-forty\\\"> <div class=one-hub template v-if=\\\"type === 'one-zone'\\\"> <cosmos-hub hub-name=Zone></cosmos-hub> </div> <div class=two-hubs v-if=\\\"type === 'two-zones'\\\"> <cosmos-hub id=two-hubs-one hub-name=\\\"Zone 1\\\"></cosmos-hub> <data-bundle></data-bundle> <cosmos-hub id=two-hubs-two hub-name=\\\"Zone 2\\\"></cosmos-hub> </div> <div class=three-hubs template v-if=\\\"type === 'three-zones'\\\"> <cosmos-hub id=three-hubs-one hub-name=\\\"EVM 1.0\\\"></cosmos-hub> <arrow></arrow> <cosmos-hub id=three-hubs-two hub-name=\\\"EVM 2.0\\\"></cosmos-hub> <cosmos-hub id=three-hubs-three hub-name=\\\"EVM 3.0\\\"></cosmos-hub> </div> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Zone.vue\n ** module id = 141\n ** module chunks = 2\n **/","module.exports = \" <div class=countdown-wrapper _v-13cb49dc=\\\"\\\"> <div class=key _v-13cb49dc=\\\"\\\">Crowd sale on October 8th</div> <div class=value _v-13cb49dc=\\\"\\\">{{ countdown }}</div> <form _v-13cb49dc=\\\"\\\"> <input type=email placeholder=your@email.com _v-13cb49dc=\\\"\\\"> <input type=submit value=\\\"Alert Me\\\" _v-13cb49dc=\\\"\\\"> </form> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-13cb49dc!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Countdown.vue\n ** module id = 142\n ** module chunks = 2\n **/","module.exports = \" <header id=site-header _v-241f4194=\\\"\\\"> <a v-link=\\\"{ path: '/' }\\\" id=nav-home _v-241f4194=\\\"\\\">Cosmos</a> <nav id=nav-site _v-241f4194=\\\"\\\"> <a v-link=\\\"{ path: '/whitepaper' }\\\" _v-241f4194=\\\"\\\">Whitepaper</a> <a v-link=\\\"{ path: '/plan' }\\\" _v-241f4194=\\\"\\\">Plan</a> <a v-link=\\\"{ path: '/faq' }\\\" _v-241f4194=\\\"\\\">FAQ</a> </nav> </header> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-241f4194!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/site/Header.vue\n ** module id = 143\n ** module chunks = 2\n **/","module.exports = \" <div class=article-wrapper _v-3ada8d83=\\\"\\\"> <h1 _v-3ada8d83=\\\"\\\">Plan</h1> <h2 id=cosmos-crowdfund-plan _v-3ada8d83=\\\"\\\">Cosmos Crowdfund Plan</h2> <p _v-3ada8d83=\\\"\\\">DATE: July 22nd, 2016<br _v-3ada8d83=\\\"\\\"> LAST UPDATED: Aug 12th, 2016<br _v-3ada8d83=\\\"\\\"> NOTE: The details in this plan override what is currently in the whitepaper.</p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Cosmos Inc will be a for-profit Canadian entity. Its mission is to create, maintain, and further develop, the Cosmos Ecosystem.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">There will be a Crowdfunding campaign to sell tokens, called \\\"atoms\\\", that give the holder limited license to use the Cosmos Hub. The proceeds of the Crowdfunding campaign will go to Cosmos Inc to develop the Essential Cosmos Software and Services.</p> </li> <li _v-3ada8d83=\\\"\\\">There will be 20,000,000 atoms on Genesis day. On Genesis day, the distribution of atoms will be split between: <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">Pre-funders (5%)</li> <li _v-3ada8d83=\\\"\\\">Cosmos Inc (20%)</li> <li _v-3ada8d83=\\\"\\\">Crowdfund Funders (75%)</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Upon completion of the Crowdfund, all the atom holders, including Cosmos Inc, play the Delegation Game in a special purpose Ethereum smart contract (which holds no Ether). The top 100 validators after delegation will be chosen as validators on Genesis.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Everyone's atoms will vest over a period of two years after Genesis. Unvested atoms cannot be transferred until vested. Unvested atoms will vest over time, at a rate of 1/(24x365x2) of the account's atoms, every hour.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Every validator must participate in governance, or else become inactivated and eventually unbonded. Delegators who delegate atoms to such validators will also likewise get their delegated atoms inactivated and eventually unbonded.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">Anyone may receive more atoms by passing a proposal with an attached award. Such reward atoms will be purely inflationary.</p> </li> <li _v-3ada8d83=\\\"\\\"><p _v-3ada8d83=\\\"\\\">1/3 of the total number of atoms will be distributed back to the bonded atom holders for having a stake in consensus. This a tax (disincentive) for not putting atoms at stake, and not participating in governance during the first two years after Genesis.</p> </li> </ul> <h2 id=definitions _v-3ada8d83=\\\"\\\">Definitions</h2> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Inc</strong>: Cosmos Inc is a for-profit legal entity that manages the Crowdfund and Genesis of the Cosmos Hub. Besides the initial development of the Essential Cosmos Software and Services, Cosmos Inc has no further obligations with regards to the Cosmos Ecosystem, Cosmos Hub, or derivatives (forks) of the Cosmos Hub, but instead is a general participant in the network.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Ecosystem</strong>: Includes the Cosmos Network and other software and services, including validator and client software.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub</strong>: An Cosmos hub is itself a blockchain, or zone, that connects to many other zones. The hub facilitates token movement between zones. The Cosmos Hub will be the first hub, and the first zone.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub Block Reward</strong>: The blockchain will reward the Validators and Delegators in proportion to their bonded atoms, and afterwards account for any commissions that delegators pay to delegate validators. The reward will consist of two categories -- transaction fees, and inflationary atoms. The transction fees will be any fee collected by a validator. In addition, there will be inflationary atoms at a rate of 1/3 of the total number of atoms per year. Cosmos holders who do not put their atoms at stake by being a validator or delegating to a validator will not receive any of the Cosmos Hub Block Rewards.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Network</strong>: Includes the Cosmos Hub and all connected zones.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Crowdfund</strong>: An atom token crowdfund event that happens during a period of 42 days. There will be a website where those who wish to purchase atoms can sign up The crowdfund proceeds will be used to complete the Essential Cosmos Software and Services, starting with the release of TendermintCore. </p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Delegator</strong>: An atom holder who puts their atoms at stake by delegating its validating power and voting power to a validator. They are still responsible for voting on proposals during the vesting period. If they don't vote they will be penalized, but they will inherit the vote of the delegated validator.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Early Funders</strong>: The Early Funders are qualified investors who purchase 5% of the Genesis atoms prior to the crowdfund. The majority of the proceeds from the early funding will go toward legal and PR fees, and also help pay salary for Cosmos Inc until the crowdfunding is complete.</p> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Validator</strong>: Validators are full nodes of a Cosmos zone that have the responsibility of committing blocks in that zone. The Cosmos Hub will start with 100 validator spots. Due to the limited number of validator spots, not everyone who has atoms can be a validator. Instead, everyone else can bond atoms and delegate their consensus voting power to any of the 100 validators. Before Genesis, the Cosmos Crowdfund funders will play the Delegation Game to determine the top 100 bonded delegates who will become the genesis validators.</p> <h3 id=essential-cosmos-software-and-services _v-3ada8d83=\\\"\\\">Essential Cosmos Software and Services</h3> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">TendermintCore</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Alpha</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">fix existing issues</li> <li _v-3ada8d83=\\\"\\\">mempool optimization</li> <li _v-3ada8d83=\\\"\\\">peer exchange handler</li> <li _v-3ada8d83=\\\"\\\">validator set changes</li> <li _v-3ada8d83=\\\"\\\">fork detection and handling</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Beta</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">tendermint consensus v2</li> </ul> </li> </ul> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Cosmos Hub</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Alpha</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">multiasset accounts</li> <li _v-3ada8d83=\\\"\\\">atom staking with delegation</li> <li _v-3ada8d83=\\\"\\\">governance</li> <li _v-3ada8d83=\\\"\\\">basic wallet client</li> </ul> </li> <li _v-3ada8d83=\\\"\\\"><em _v-3ada8d83=\\\"\\\">Beta</em><ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">zone support<ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">exchange zone</li> <li _v-3ada8d83=\\\"\\\">ethereum zone</li> <li _v-3ada8d83=\\\"\\\">import crypto distributions</li> </ul> </li> <li _v-3ada8d83=\\\"\\\">Cosmos network explorer client</li> </ul> </li> </ul> <p _v-3ada8d83=\\\"\\\"><strong _v-3ada8d83=\\\"\\\">Other</strong></p> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">hardware wallet integration <em _v-3ada8d83=\\\"\\\">with sufficient funding</em></li> <li _v-3ada8d83=\\\"\\\">Ethereum peg <em _v-3ada8d83=\\\"\\\">with sufficient funding</em></li> <li _v-3ada8d83=\\\"\\\">Bitcoin peg <em _v-3ada8d83=\\\"\\\">with partner, if possible</em></li> </ul> <h2 id=funding _v-3ada8d83=\\\"\\\">Funding</h2> <p _v-3ada8d83=\\\"\\\">Funds will be raised by Cosmos Inc in 2 phases.</p> <h3 id=phase-0-the-prefund _v-3ada8d83=\\\"\\\">Phase 0: the Prefund</h3> <p _v-3ada8d83=\\\"\\\">During the Prefund, 5% of future Genesis atoms will be sold to qualified investors with a cap and/or discount. The proceeds from the Early Investors will be used to prepare for and execute the crowdfund, as well as to pay for legal expenses.</p> <h3 id=phase-1-the-crowdfund _v-3ada8d83=\\\"\\\">Phase 1: the Crowdfund</h3> <p _v-3ada8d83=\\\"\\\">During the Crowdfund, 75% of future Genesis atoms will be sold to sophisticated members of the public who wish to support or participate in this project. The crowdfund will happen over a period of 42 days as the Ethereum crowdfund.</p> <p _v-3ada8d83=\\\"\\\">The crowdfund will be capped at $9M equivalent of bitcoins after the first 24 hours of the crowfund. After 24 hours since the beginning of the crowdfund, when the total amount raised exceeds $9M given the price of bitcoin at 9am PDT the morning of, the crowdfund will immediately stop.</p> <h3 id=funding-milestones _v-3ada8d83=\\\"\\\">Funding Milestones</h3> <ul _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">If the crowdfund does not meet the minimum $3M -- 95+% of funds returned</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $3M -- Essential Cosmos Software</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $5M -- Ethereum peg</li> <li _v-3ada8d83=\\\"\\\">If the crowdfund exceeds $7M -- Open-source hardware wallet (sold separately)</li> </ul> <h2 id=timeline _v-3ada8d83=\\\"\\\">Timeline</h2> <ol _v-3ada8d83=\\\"\\\"> <li _v-3ada8d83=\\\"\\\">Prefund for 5% of Genesis atoms</li> <li _v-3ada8d83=\\\"\\\">Canadian non-profit is created</li> <li _v-3ada8d83=\\\"\\\">Begin Crowdfund</li> <li _v-3ada8d83=\\\"\\\">End of Crowdfund after 42 days or cap reache (EoCF)</li> <li _v-3ada8d83=\\\"\\\">EoCF + 2 months: alpha release candidate of TendermintCore for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 4 months: alpha release of TendermintCore</li> <li _v-3ada8d83=\\\"\\\">EoCF + 7 months: alpha release candidate of Cosmos Hub for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 9 months: alpha release of Cosmos Hub</li> <li _v-3ada8d83=\\\"\\\">EoCF + 10 months: launch Cosmos Hub alpha</li> <li _v-3ada8d83=\\\"\\\">EoCF + 12 months: begin sale of open-source hardware wallet (if funding milestone reached)</li> <li _v-3ada8d83=\\\"\\\">EoCF + 13 months: beta release candidate of Alpha Hub for security audit</li> <li _v-3ada8d83=\\\"\\\">EoCF + 15 months: launch Cosmos Hub beta</li> <li _v-3ada8d83=\\\"\\\">EoCF + 15 months+: Continuous development, timeline set by Cosmos Inc</li> <li _v-3ada8d83=\\\"\\\">Timeline for Bitcoin peg support depends on partnership</li> <li _v-3ada8d83=\\\"\\\">Timeline for Ethereum peg support set after alpha release of Cosmos Hub</li> </ol> </div> <section class=section-default _v-3ada8d83=\\\"\\\"><div class=section-container _v-3ada8d83=\\\"\\\"> <countdown _v-3ada8d83=\\\"\\\"></countdown> </div></section> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-3ada8d83!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/pages/Plan.vue\n ** module id = 144\n ** module chunks = 2\n **/","module.exports = \" <div class=data-bundle v-bind:style=bundleStyle _v-4d63d08a=\\\"\\\"> <div class=\\\"datastream datastream-top\\\" v-bind:style=streamStyle _v-4d63d08a=\\\"\\\"> <p v-bind:style=pStyle _v-4d63d08a=\\\"\\\">→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;</p> </div> <div class=\\\"datastream datastream-bottom\\\" v-bind:style=streamStyle _v-4d63d08a=\\\"\\\"> <p v-bind:style=pStyle _v-4d63d08a=\\\"\\\">←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;←&nbsp;</p> </div> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-4d63d08a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/DataBundle.vue\n ** module id = 145\n ** module chunks = 2\n **/","module.exports = \" <div class=hubs-wrapper _v-50acc47d=\\\"\\\"> <cosmos-hub id=hub-one hub-name=\\\"Cosmos Hub\\\" :spokes=spokesOne _v-50acc47d=\\\"\\\"></cosmos-hub> <cosmos-hub id=hub-two hub-name=\\\"Peer Hub\\\" :spokes=spokesTwo _v-50acc47d=\\\"\\\"></cosmos-hub> <data-bundle id=multiple-hubs-connector _v-50acc47d=\\\"\\\"></data-bundle> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-50acc47d!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/MultipleHubs.vue\n ** module id = 146\n ** module chunks = 2\n **/","module.exports = \" <div class=article-wrapper _v-6057bba8=\\\"\\\"> <h1 _v-6057bba8=\\\"\\\">FAQ</h1> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What is sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Sharding is about dividing the workload up into pieces for the purpose of horizontal scaling. There are many ways to handle sharding in SQL databases, but sharding for blockchains is an emerging field. The closest thing we have are the altcoins ecosystem, but this isn't very good because all the altcoins are their own silos with no good way to interoperate except via centralized exchanges, or tricks like hashlocked transactions (like the Lightning Network), which have their own benefits and drawbacks.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does Cosmos do sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Cosmos implements sharding using zones. It's a sharding solution that preserves the sovereignty of the shard as a self-governing and self-validating system. The Cosmos Hub doesn't care about the internal state of an Cosmos zone -- rather, all that matters to the Cosmos Hub is what the zone explicitly communicates to the Cosmos Hub via IBC packets.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What's an IBC packet?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">IBC packets are packets of data that one blockchain wishes to send to another blockchain. But instead of literally sending a packet of bytes via the TCP/IP or UDP/IP protocol (which is designed for singular, physical, machines), IBC packets require cryptographic proof-of-existence. Since no single node or validator has the authority to speak on behalf of the entire blockchain, and, since we don't want to rely on the integrity of the IP internet infrastructure, instead we rely on a cryptographic proof of a blockchain hash commit (+2/3 of signatures for that blockchain hash) along with a Merkle-proof from the aforementioned blockhash to a packet in the blockchain's \\\"application state\\\", which proves that the blockchain validators agreed to publish this packet of information. So, anyone who sees an IBC packet (regardless of the source of this data) can verify its integrity.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Isn't this just sidechains, like what Blockstream proposed?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Yes. Exactly. Except in Cosmos, the hubs and zones are all powered by Tendermint consensus. IBC on Tendermint is great because of all the reasons why light-client payment verification is great as compared to proof-of-work -- superior speed, no need to download all the block headers, 1-block finality, and security via collateral. So Cosmos is a bit like Blockstream's sidechains proposal, except with the Cosmos Hub at the center instead of Bitcoin, which makes everything faster and simpler, and arguably more secure. Also the fact that the Cosmos Hub is a multiasset blockchain is a big advantage.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does Cosmos compare to Ethereum sharding?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Vitalik is working on sharding solutions for Ethereum, but the solutions I've seen assume that all the shards are running the same VM. The biggest difference between what Vitalik's latest sharding design and Cosmos is that the Cosmos Hub lets you plug in any zone, even for entirely different VMs or zones with no VMs at all (like Bitcoind). This works because the Cosmos Hub is about preserving the total number of tokens across zones/shards, whereas Vitalik's scaling solution is about sharding the general Ethereum state machine state. The zones of the Cosmos Hub don't care that other zones fail or crash, as long as the Cosmos Hub continues to function and preserves the total number of tokens across all the zones. Vitalik is trying to create a sharding solution where none of the shards may fail, because the internal state of those shards can mean anything at all. Vitalik is trying to solve a much more difficult problem. If we do our job right, we will be able to implement whatever he comes up within Cosmos.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Why are shards called zones?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Shards are called zones in Cosmos because they really are like sovereign economic zones. We've seen a taste of blockchain governance with the Ethereum hard-fork following TheDAO hack. In Cosmos, all zones are sovereign and can construct their own governance policies, and yet they can all interoperate on the Cosmos Hub. That's the benefit of the IBC abstraction, that it's about accountable and cryptographicaly verifiable communication.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does one exchange currencies in this system?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">For tokens outside the Cosmos system, they can only be introduced via pegged derivatives (akin to what Blockstream's sidechains paper was suggesting). I suppose you could also use other means to track the value of some token inside the Cosmos network by involving prediction markets or betting, but I'm not an expert on those. They can be supported too by other zones, but I won't go into them here.</p> <p _v-6057bba8=\\\"\\\">In the Cosmos Hub, pegs will be tied to a specific zone; that is, a zone and its validator sets are expected to also be involved in a m-of-n contract on the target chain, like Bitcoin or Ethereum.</p> <pre _v-6057bba8=\\\"\\\"><code _v-6057bba8=\\\"\\\">           _ peg smart contract\\n          /\\n  [  Ethereum  ] &lt;--&gt; [ EtherCosmos Peg Zone ] &lt;-IBC-&gt; [  Cosmos Hub  ] &lt;-IBC-&gt; (Bitcoin) [ PoW/Casper ]\\n                      [      Tendermint      ]         [  Tendermint  ] &lt;-IBC-&gt; (exchange)\\n</code></pre><p _v-6057bba8=\\\"\\\">Once the tokens are in the hub, its must easier to exchange currencies. Either trade with another account directly in the Cosmos Hub (a Send transaction with two inputs and two outputs, with 2 different assets, swapped). But this requires both parties to the trade to be online. Instead, you can send your tokens to an exchange zone, to take advantage of an order-book.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">So can I trade BTC for ETH using Cosmos?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">You can, if you trust the respective Ethereum and Bitcoin peg zones. If alternatives of Ethereum and Bitcoin (ie. same codebase, different network) launch on Cosmos, you can trade those directly.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Does Cosmos involve escrow?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Not really, though the hub may be thought of as an escrow agent mediating between two zones, but that's of course the point. However, the pegs in peg-zones may well utilize escrow to allow, for instance, BTC to move into a zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">How does one switch blockchains in this system?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">The zone is responsible for committing an IBC packet with outbound coins for another zone. Zones can do whatever they want, so it's really up to the logic of the zone, as well as the client. Ideally there will be a standard specification for constructing a transaction to move funds from one zone to another. So an EVM zone should be implemented such that it can process this universal transaction format that lets any simple user account send funds to another zone via the Cosmos Hub (or any other hub). This may be something to be defined as an IETF or W3C specification, but it's a bit too early for that, so we should forge ahead and document the spec for everyone to see.</p> <p _v-6057bba8=\\\"\\\">There should be some specification for defining:</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\">the destination zone</li> <li _v-6057bba8=\\\"\\\">the intermediary zones (typically the Cosmos Hub)</li> <li _v-6057bba8=\\\"\\\">the assets and quantity</li> <li _v-6057bba8=\\\"\\\">the destination account or smart contract</li> <li _v-6057bba8=\\\"\\\">any other information</li> </ul> <p _v-6057bba8=\\\"\\\">These are specified <a href=https://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md#ibcpackettx _v-6057bba8=\\\"\\\">here</a>.</p> <p _v-6057bba8=\\\"\\\">There will also be way to navigate these zones, whereby nodes or validators of a zone can publish their IP endpoints or whatnot, voluntarily. So zone discovery is a thing, but mostly it's up to the end-client software to understand this plumbing. End-users shouldn't know all of the details except a few rules for safety, like \\\"don't send money to zones you don't know\\\".</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Is consensus configurable? When I am switching between blockchains won't my consensus be different in different scenarios?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">We can accomodate other PoS consensus mechanisms as long as they have a very clean and consise light-client verification protocol. Or, even Tendermint might upgrade to support additional features. It will be up to the Cosmos Foundation and the Cosmos governance to decide whether to support them. It isn't necessary if there can be adapter zones. That's what a Bitcoin peg zone is -- an adapter zone to sit between PoW and Tendermint.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What is the maximum number of nodes in Cosmos? Does each zone or hub have their own nodes?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Yes. Each zone has its own nodes, we don't re-use public keys (yet, though we could in the future). Different atoms bonded in each zone, but all the same atom token.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Do the validatiors that are chosen, validate transactions for every zone and Hub?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">No. Validators for a zone only validate transactions for their zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">The whitepaper states \\\"Zones communicate with one another through a hub, primarily in the form of assymetric transfer of some set of tokens from one zone to another.\\\" Can you talk about what exactly the asymmetric transfer is?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">It's maybe not the best term, but we coined it to refer to the kind of inter-zone token transfer that happens in the Cosmos Hub. The transfer of tokens was not via any bidirectional or bilateral exchange mechanism, or even through a peg. It's as if the token moved from one zone to another. The trick is that there is a common crypto \\\"depository\\\" -- the Cosmos Hub.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">According to the whitepaper: \\\"Cosmos reflects this position in that it makes no distinction between hubs - there is no \\\"top\\\" hub, and the most popular or successful hub is a matter of adoption by zones. \\\" In your view what will make hubs more successful and what will make them unsuccessful?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">There will be different features... speed (limiting to 100 validators), flexibility (e.g. if implemented on the EVM), or perhaps nation-state sponsorship or better integration with the legal system (via traditional banking partners), etc. One could also imagine a much slower, but more distributed \\\"slow hub\\\", or much faster but less decentralized \\\"high-frequency hubs\\\".</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What will be the process for abandoning validators that misbehave?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">If a validator misbehaves on its own by double-signing at the same height &amp; round, then the evidence is very short and simple -- it's just the two conflicting votes. This evidence can be included in the the CosmosHub as a Slash transaction, and the validator will immediately become inactive and slashed after the Slash transaction gets committed.</p> <p _v-6057bba8=\\\"\\\">If there is a zone fork, either of the Cosmos Hub or any of the zones, the two conflicting commits also constitute evidence. This is a much more complicated data structure. It is guaranteed to slash at least 1/3 of the validators' atoms for that zone.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Can delegators also be validators? Or are delegators never validators?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Delegators are never validators. If someone who operates validator nodes wishes to delegate, they need to do so with their free and unbonded atoms.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">\\\"Validators' voting powers are determined at genesis, or is changed deterministically by the blockchain, depending on the application.\\\" Any idea what shape this will take initially what are you thinking for voting powers?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">(Are these two separate questions? What do you mean \\\"what are you thinking for voting powers?\\\")</p> <p _v-6057bba8=\\\"\\\">I have no idea what shape this will take. We need to reach out to a wide audience for the crowdfund, and that will help us get a better distribution, even if we don't know exactly who owns these tokens.</p> <p _v-6057bba8=\\\"\\\">In some way it doesn't matter, because even if there are attacks and mishaps along the way, eventually through hard-forks the blockchain can purge the bad actors. It's antifragile.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Can you give some details about what you took(derived) from the DLS consensus algorithm?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">The locking mechanism was something that I hadn't seen in other papers, like PBFT. There's an equivalence to PBFT's system, but the locking and unlocking mechanics in PBFT happen implicitly.</p> <p _v-6057bba8=\\\"\\\">Increasing the length of time of a round to circumvent partial-synchrony is something that the early versions of Tendermint Consensus used. In the current version of Tendermint Consensus, which is more asynchronous, this \\\"time delay\\\" is limited to the timeout period after a 2/3 quorum of any votes for the same height &amp; round.</p> <p _v-6057bba8=\\\"\\\">The 2/3 quorum of any votes to synchronize validators, a kind of virtual clock cycle, was also inspired by DLS's paper in the later sections (after section 5).</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Why is Cosmos's governance better than any other options out there?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">One is, the stakeholders are well defined, as is the prior social contract. ETH had a hard time with the fork because they had to ask the ether holders as well as the miners, but the ether holders had no prior social contract or obligation to partake in governance, so no quorum could be reached in time. Asking the miners is necessary to ensure that the hard-fork will have support, but after a while they tend to simply follow the money and incentives.</p> <p _v-6057bba8=\\\"\\\">Cosmos is different because instead of anonymous miners we have social contract bound validators and delegators who have stake, and, they have the obligation to partake in governance.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">What use cases do you think are most compelling in the future?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">Cosmos allows everyone to benefit from the network effect of various interoperable tokens and zones. For example, if anyone creates a peg zone or a new token type, all the other zones can use them if they support the new token type.</p> <p _v-6057bba8=\\\"\\\">So, the Cosmos Hub has a particular use-case that isn't filled by anything today. The best use-case for Cosmos Zones are for any token-based blockchain that benefit from the new interoperability, speed, and scalability properties. It may be a kind of distributed exchange.</p> <ul _v-6057bba8=\\\"\\\"> <li _v-6057bba8=\\\"\\\"><strong _v-6057bba8=\\\"\\\">Do you feel Cosmos and Interledger are complimentary or are you directly competing with it?</strong></li> </ul> <p _v-6057bba8=\\\"\\\">They're more complementary than competing. For one, Interledger will be very useful for creating Cosmos zones that interface with the traditional financial system.</p> <p _v-6057bba8=\\\"\\\">Interledger can also be used directly between blockchain zones. For this use-case, the Cosmos Hub may be a competitive option, as compared to other options for Interledger notary sets. The Cosmos Hub validators could also offer their services as an Interledger notary set.</p> </div> <section class=section-default _v-6057bba8=\\\"\\\"><div class=section-container _v-6057bba8=\\\"\\\"> <countdown _v-6057bba8=\\\"\\\"></countdown> </div></section> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-6057bba8!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/pages/FAQ.vue\n ** module id = 147\n ** module chunks = 2\n **/","module.exports = \" <footer id=site-footer _v-66840978=\\\"\\\"> <p _v-66840978=\\\"\\\">© 2016 Cosmos Inc</p> </footer> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-66840978!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/site/Footer.vue\n ** module id = 148\n ** module chunks = 2\n **/","module.exports = \" <section-cover _v-75a39e68=\\\"\\\"></section-cover> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <countdown class=countdown-top _v-75a39e68=\\\"\\\"></countdown> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=one-zone _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">A Cosmos <a href=# _v-75a39e68=\\\"\\\">zone</a> is a distributed ledger (blockchain). Each zone can have differing transaction logic and policies.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=two-zones _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">We’ve developed a trick that allows zones to communicate with each other directly. It’s based on classical BFT algorithms like Tendermint.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper square\\\" _v-75a39e68=\\\"\\\"> <cosmos-hub hub-name=\\\"Cosmos Hub\\\" :spokes=evmSpokes _v-75a39e68=\\\"\\\"></cosmos-hub> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">With this technique, we could make Ethereum scale by constructing a common hub blockchain. All inter-zone token movements go through the hub.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <zone type=three-zones _v-75a39e68=\\\"\\\"></zone> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">Upgrading the EVM would be seamless, with less risk of contentious hard-forks. Anyone could plug in a better smart contract system.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper square\\\" _v-75a39e68=\\\"\\\"> <cosmos-hub hub-name=\\\"Cosmos Hub\\\" :spokes=distSpokes _v-75a39e68=\\\"\\\"></cosmos-hub> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">We could import other blockchains and have a distributed exchange on its own zone.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <div class=\\\"gfx-wrapper height-seventy\\\" _v-75a39e68=\\\"\\\"> <multiple-hubs _v-75a39e68=\\\"\\\"></multiple-hubs> </div> <div class=section-content _v-75a39e68=\\\"\\\"> <p _v-75a39e68=\\\"\\\">The Cosmos hub isn’t the center of the universe. Any zone can be a hub.</p> </div> </div></section> <section class=section-default _v-75a39e68=\\\"\\\"><div class=section-container _v-75a39e68=\\\"\\\"> <countdown _v-75a39e68=\\\"\\\"></countdown> </div></section> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-75a39e68!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/pages/Index.vue\n ** module id = 149\n ** module chunks = 2\n **/","module.exports = \" <div class=data-bundle _v-7bfd996a=\\\"\\\"> <div class=datastream _v-7bfd996a=\\\"\\\"> <p _v-7bfd996a=\\\"\\\">→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;→&nbsp;</p> </div> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-7bfd996a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Arrow.vue\n ** module id = 150\n ** module chunks = 2\n **/","module.exports = \" <section class=section-cover _v-891d9bfe=\\\"\\\"> <div class=blockchain _v-891d9bfe=\\\"\\\"> <h1 _v-891d9bfe=\\\"\\\">Cosmos</h1> <h2 _v-891d9bfe=\\\"\\\">a network of distributed ledgers</h2> </div> </section> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-891d9bfe!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/SectionCover.vue\n ** module id = 151\n ** module chunks = 2\n **/","module.exports = \" <div class=hub-wrapper _v-da38f26a=\\\"\\\"> <div class=hub :class=\\\"{ 'light-color': lightColor}\\\" _v-da38f26a=\\\"\\\">{{ hubName }}</div> <template v-for=\\\"spoke in spokes\\\"> <div class=\\\"spoke {{ spoke.key }} {{ spoke.color }}\\\" _v-da38f26a=\\\"\\\"> {{ spoke.value }} </div> <data-bundle streamwidth=thin :class=\\\"{ 'light-color': lightColor}\\\" _v-da38f26a=\\\"\\\"></data-bundle> </template> </div> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-da38f26a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/CosmosHubSmall.vue\n ** module id = 152\n ** module chunks = 2\n **/","module.exports = \" <div class=article-wrapper _v-db453a86=\\\"\\\"> <h1 id=cosmos _v-db453a86=\\\"\\\">Cosmos</h1> <p _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">A Network of Distributed Ledgers</strong></p> <p _v-db453a86=\\\"\\\">Jae Kwon jae@tendermint.com<br _v-db453a86=\\\"\\\"> Ethan Buchman ethan@tendermint.com</p> <p _v-db453a86=\\\"\\\">For discussions, <a href=http://forum.tendermint.com:3000/ _v-db453a86=\\\"\\\">join our Slack</a>!</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">NOTE: If you can read this on GitHub, then we're still actively developing this document. Please check regularly for updates!.</em></p> <h2 id=table-of-contents _v-db453a86=\\\"\\\">Table of Contents</h2> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#introduction _v-db453a86=\\\"\\\">Introduction</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint _v-db453a86=\\\"\\\">Tendermint</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#validators _v-db453a86=\\\"\\\">Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#consensus _v-db453a86=\\\"\\\">Consensus</a></li> <li _v-db453a86=\\\"\\\"><a href=#light-clients _v-db453a86=\\\"\\\">Light Clients</a></li> <li _v-db453a86=\\\"\\\"><a href=#preventing-attacks _v-db453a86=\\\"\\\">Preventing Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#tmsp _v-db453a86=\\\"\\\">TMSP</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#cosmos-overview _v-db453a86=\\\"\\\">Cosmos Overview</a></li> <li _v-db453a86=\\\"\\\"><a href=#the-hub-and-zones _v-db453a86=\\\"\\\">The Hub and Zones</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#the-hub _v-db453a86=\\\"\\\">The Hub</a></li> <li _v-db453a86=\\\"\\\"><a href=#the-zones _v-db453a86=\\\"\\\">The Zones</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#inter-blockchain-communication-ibc _v-db453a86=\\\"\\\">Inter-blockchain Communication (IBC)</a></li> <li _v-db453a86=\\\"\\\"><a href=#use-cases _v-db453a86=\\\"\\\">Use Cases</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#pegging-to-other-cryptocurrencies _v-db453a86=\\\"\\\">Pegging to Other Cryptocurrencies</a></li> <li _v-db453a86=\\\"\\\"><a href=#ethereum-scaling _v-db453a86=\\\"\\\">Ethereum Scaling</a></li> <li _v-db453a86=\\\"\\\"><a href=#multi-application-integration _v-db453a86=\\\"\\\">Multi-Application Integration</a></li> <li _v-db453a86=\\\"\\\"><a href=#network-partition-mitigation _v-db453a86=\\\"\\\">Network Partition Mitigation</a></li> <li _v-db453a86=\\\"\\\"><a href=#federated-name-resolution-system _v-db453a86=\\\"\\\">Federated Name Resolution System</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#issuance-and-incentives _v-db453a86=\\\"\\\">Issuance and Incentives</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#the-atom-token _v-db453a86=\\\"\\\">The Atom Token</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#crowdfund _v-db453a86=\\\"\\\">Crowdfund</a></li> <li _v-db453a86=\\\"\\\"><a href=#vesting _v-db453a86=\\\"\\\">Vesting</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#limitations-on-the-number-of-validators _v-db453a86=\\\"\\\">Limitations on the Number of Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#becoming-a-validator-after-genesis-day _v-db453a86=\\\"\\\">Becoming a Validator After Genesis Day</a></li> <li _v-db453a86=\\\"\\\"><a href=#penalties-for-validators _v-db453a86=\\\"\\\">Penalties for Validators</a></li> <li _v-db453a86=\\\"\\\"><a href=#transaction-fees _v-db453a86=\\\"\\\">Transaction Fees</a></li> <li _v-db453a86=\\\"\\\"><a href=#incentivizing-hackers _v-db453a86=\\\"\\\">Incentivizing Hackers</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#governance _v-db453a86=\\\"\\\">Governance</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#parameter-change-proposal _v-db453a86=\\\"\\\">Parameter Change Proposal</a></li> <li _v-db453a86=\\\"\\\"><a href=#text-proposal _v-db453a86=\\\"\\\">Text Proposal</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#roadmap _v-db453a86=\\\"\\\">Roadmap</a></li> <li _v-db453a86=\\\"\\\"><a href=#related-work _v-db453a86=\\\"\\\">Related Work</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#consensus-systems _v-db453a86=\\\"\\\">Consensus Systems</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#classic-byzantine-fault-tolerance _v-db453a86=\\\"\\\">Classic Byzantine Fault Tolerance</a></li> <li _v-db453a86=\\\"\\\"><a href=#bitshares-delegated-stake _v-db453a86=\\\"\\\">BitShares delegated stake</a></li> <li _v-db453a86=\\\"\\\"><a href=#stellar _v-db453a86=\\\"\\\">Stellar</a></li> <li _v-db453a86=\\\"\\\"><a href=#bitcoinng _v-db453a86=\\\"\\\">BitcoinNG</a></li> <li _v-db453a86=\\\"\\\"><a href=#casper _v-db453a86=\\\"\\\">Casper</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#horizontal-scaling _v-db453a86=\\\"\\\">Horizontal Scaling</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#interledger-protocol _v-db453a86=\\\"\\\">Interledger Protocol</a></li> <li _v-db453a86=\\\"\\\"><a href=#sidechains _v-db453a86=\\\"\\\">Sidechains</a></li> <li _v-db453a86=\\\"\\\"><a href=#ethereum-scalability-efforts _v-db453a86=\\\"\\\">Ethereum Scalability Efforts</a></li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#general-scaling _v-db453a86=\\\"\\\">General Scaling</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#lightning-network _v-db453a86=\\\"\\\">Lightning Network</a></li> <li _v-db453a86=\\\"\\\"><a href=#segregated-witness _v-db453a86=\\\"\\\">Segregated Witness</a></li> </ul> </li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#appendix _v-db453a86=\\\"\\\">Appendix</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#fork-accountability _v-db453a86=\\\"\\\">Fork Accountability</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint-consensus _v-db453a86=\\\"\\\">Tendermint Consensus</a></li> <li _v-db453a86=\\\"\\\"><a href=#tendermint-light-clients _v-db453a86=\\\"\\\">Tendermint Light Clients</a></li> <li _v-db453a86=\\\"\\\"><a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">Preventing Long Range Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">Overcoming Forks and Censorship Attacks</a></li> <li _v-db453a86=\\\"\\\"><a href=#tmsp-specification _v-db453a86=\\\"\\\">TMSP Specification</a></li> <li _v-db453a86=\\\"\\\"><a href=#ibc-packet-delivery-acknowledgement _v-db453a86=\\\"\\\">IBC Packet Delivery Acknowledgement</a></li> <li _v-db453a86=\\\"\\\"><a href=#merkle-tree--proof-specification _v-db453a86=\\\"\\\">Merkle tree &amp; proof specification</a></li> <li _v-db453a86=\\\"\\\"><a href=#transaction-types _v-db453a86=\\\"\\\">Transaction Types</a><ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=#ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</a></li> <li _v-db453a86=\\\"\\\"><a href=#ibcpackettx _v-db453a86=\\\"\\\">IBCPacketTx</a></li> </ul> </li> </ul> </li> <li _v-db453a86=\\\"\\\"><a href=#acknowledgements _v-db453a86=\\\"\\\">Acknowledgements</a></li> <li _v-db453a86=\\\"\\\"><a href=#citations _v-db453a86=\\\"\\\">Citations</a></li> </ul> <h2 id=introduction _v-db453a86=\\\"\\\">Introduction</h2> <p _v-db453a86=\\\"\\\">The combined success of the open-source ecosystem, of decentralized file-sharing, and of public cryptocurrencies, has inspired an understanding that decentralized internet protocols can be used to radically improve socio-economic infrastructure. We have seen specialized blockchain applications like Bitcoin <a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">[1]</a> (a cryptocurrency), Zerocash <a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">[2]</a> (a cryptocurrency for privacy), and generalized smart contract platforms such as Ethereum <a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">[3]</a>, with countless distributed applications for the EVM such as Augur (a prediction market) and TheDAO <a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">[4]</a> (an investment club).</p> <p _v-db453a86=\\\"\\\">To date, however, these blockchains have suffered from a number of drawbacks, including their gross energy inefficiency, poor or limited performance, and immature governance mechanisms. A number of proposals have been made to scale Bitcoin's transaction throughput such as Segregated-Witness <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">[5]</a> and BitcoinNG <a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">[6]</a>, but these are vertical scaling solutions that remain limited by the capacity of a single physical machine, lest we sacrifice the property of complete auditability. The Lightning Network <a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">[7]</a> can help scale Bitcoin transaction volume by leaving some transactions off the ledger completely and is well suited for micropayments and privacy preserving payment rails, but may not be suitable for more generalized scaling needs.</p> <p _v-db453a86=\\\"\\\">An ideal solution would be one that allows multiple parallel blockchains to interoperate while retaining their security properties, but this has proven difficult, if not impossible, with proof-of-work. Merged-mining, for instance, allows the work done to secure a parent chain to be re-used on a child chain, but transactions still must be validated, in order, by each node, and a merge-mined blockchain is vulnerable to attack if a majority of the hashing power on the parent is not actively merge-mining the child. An academic review of <a href=http://vukolic.com/iNetSec_2015.pdf _v-db453a86=\\\"\\\">alternative blockchain network architectures</a> is provided for additional context, and we provide more summaries of some proposals and their drawbacks in <a href=#related-work _v-db453a86=\\\"\\\">Related Work</a>.</p> <p _v-db453a86=\\\"\\\">Here we present Cosmos, a novel blockchain network architecture that addresses all of these problems. Cosmos is a network of many independent blockchains, called zones. The zones are powered by Tendermint Core <a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">[8]</a>, which provides a high-performance, consistent, secure <a href=http://tendermint.com/blog/tendermint-vs-pbft/ _v-db453a86=\\\"\\\">PBFT-like</a> consensus engine, where strict <a href=#fork-accountability _v-db453a86=\\\"\\\">fork-accountability</a> guarantees hold over the behaviour of malicious actors. Tendermint Core's BFT consensus algorithm is well suited for scaling public proof-of-stake blockchains.</p> <p _v-db453a86=\\\"\\\">The first zone on Cosmos is called the Cosmos Hub. The Cosmos Hub is a multi-asset proof-of-stake cryptocurrency with a simple governance mechanism enabling the network to adapt and upgrade. In addition, the Cosmos Hub can be extended by connecting other zones.</p> <p _v-db453a86=\\\"\\\">The hub and zones of the Cosmos network communicate with each other via an inter-blockchain communication (IBC) protocol, a kind of virtual UDP or TCP for blockchains. Tokens can be transferred from one zone to another, securely and quickly, without the need for exchange liquidity between zones. Instead, all inter-zone token transfers go through the Cosmos Hub, which keeps track of the total amount of tokens held by each zone. The hub isolates each zone from the failure of other zones. Since anyone can connect a new zone to the Cosmos Hub, zones allow for future-compatibility with new blockchain innovations.</p> <h2 id=tendermint _v-db453a86=\\\"\\\">Tendermint</h2> <p _v-db453a86=\\\"\\\">In this section we describe the Tendermint consensus protocol and the interface used to build applications with it. For more details, see the <a href=#appendix _v-db453a86=\\\"\\\">appendix</a>.</p> <h3 id=validators _v-db453a86=\\\"\\\">Validators</h3> <p _v-db453a86=\\\"\\\">In classical Byzantine fault-tolerant (BFT) algorithms, each node has the same weight. In Tendermint, nodes have a non-negative amount of <em _v-db453a86=\\\"\\\">voting power</em>, and nodes that have positive voting power are called <em _v-db453a86=\\\"\\\">validators</em>. Validators participate in the consensus protocol by broadcasting cryptographic signatures, or <em _v-db453a86=\\\"\\\">votes</em>, to agree upon the next block.</p> <p _v-db453a86=\\\"\\\">Validators' voting powers are determined at genesis, or is changed deterministically by the blockchain, depending on the application. For example, in a proof-of-stake application such as the Cosmos Hub, the voting power may be determined by the amount of staking tokens bonded as collateral.</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">NOTE: Fractions like ⅔ and ⅓ refer to fractions of the total voting power, never the total number of validators, unless all the validators have equal weight.</em> <em _v-db453a86=\\\"\\\">NOTE: +⅔ means \\\"more than ⅔\\\", while ⅓+ means \\\"⅓ or more\\\".</em></p> <h3 id=consensus _v-db453a86=\\\"\\\">Consensus</h3> <p _v-db453a86=\\\"\\\">Tendermint is a partially synchronous BFT consensus protocol derived from the DLS consensus algorithm <a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">[20]</a>. Tendermint is notable for its simplicity, performance, and <a href=#fork-accountability _v-db453a86=\\\"\\\">fork-accountability</a>. The protocol requires a fixed, known set of validators, where each validator is identified by its public key. Validators attempt to come to consensus on one block at a time, where a block is a list of transactions. Consensus on a block proceeds in rounds. Each round has a round-leader, or proposer, who proposes a block. The validators then vote, in stages, on whether or not to accept the proposed block or move on to the next round. The proposer for a round is chosen deterministically from the ordered list of validators, in proportion to their voting power.</p> <p _v-db453a86=\\\"\\\">The full details of the protocol are described <a href=https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm _v-db453a86=\\\"\\\">here</a>.</p> <p _v-db453a86=\\\"\\\">Tendermint’s security derives from its use of optimal Byzantine fault-tolerance via super-majority (+⅔) voting and a locking mechanism. Together, they ensure that:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">⅓+ voting power must be Byzantine to cause a violation of safety, where more than two values are committed. </li> <li _v-db453a86=\\\"\\\">if ever any set of validators succeeds in violating safety, or even attempts to do so, they can be identified by the protocol. This includes both voting for conflicting blocks and broadcasting unjustified votes.</li> </ul> <p _v-db453a86=\\\"\\\">Despite its strong guarantees, Tendermint provides exceptional performance. In benchmarks of 64 nodes distributed across 7 datacenters on 5 continents, on commodity cloud instances, Tendermint consensus can process thousands of transactions per second, with commit latencies on the order of one or two seconds. Notably, performance of well over a thousand transactions per second is maintained even in harsh adversarial conditions, with validators crashing or broadcasting maliciously crafted votes. See figure below for details.</p> <p _v-db453a86=\\\"\\\">![Figure of Tendermint throughput performance] (<a href=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png _v-db453a86=\\\"\\\">https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/tendermint_throughput_blocksize.png</a>)</p> <h3 id=light-clients _v-db453a86=\\\"\\\">Light Clients</h3> <p _v-db453a86=\\\"\\\">A major benefit of Tendermint's consensus algorithm is simplified light client security, making it an ideal candidate for mobile and internet-of-things use cases. While a Bitcoin light client must sync chains of block headers and find the one with the most proof of work, Tendermint light clients need only to keep up with changes to the validator set, and then simply verify the +⅔ PreCommits in the latest block to determine the latest state.</p> <p _v-db453a86=\\\"\\\">Succinct light client proofs also enable <a href=#inter-blockchain-communication-ibc _v-db453a86=\\\"\\\">inter-blockchain communication</a>.</p> <h3 id=preventing-attacks _v-db453a86=\\\"\\\">Preventing Attacks</h3> <p _v-db453a86=\\\"\\\">Tendermint has various protective measures for preventing certain notable attacks, like <a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">long-range-nothing-at-stake double spends</a> and <a href=#overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">censorship</a>. These are discussed more fully in the <a href=#appendix _v-db453a86=\\\"\\\">appendix</a>.</p> <h3 id=tmsp _v-db453a86=\\\"\\\">TMSP</h3> <p _v-db453a86=\\\"\\\">The Tendermint consensus algorithm is implemented in a program called Tendermint Core. Tendermint Core is an application-agnostic \\\"consensus engine\\\" that can turn any deterministic blackbox application into a distributedly replicated blockchain. As the Apache Web Server or Nginx connects to the Wordpress application via CGI or FastCGI, Tendermint Core connects to blockchain applications via the Tendermint Socket Protocol (TMSP) <a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">[17]</a>. Thus, TMSP allows for blockchain applications to be programmed in any language, not just the programming language that the consensus engine is written in. Additionally, TMSP makes it possible to easily swap out the consensus layer of any existing blockchain stack.</p> <p _v-db453a86=\\\"\\\">We draw an analogy with a well-known cryptocurrency, Bitcoin. Bitcoin is a cryptocurrency blockchain where each node maintains a fully audited Unspent Transaction Output (UTXO) database. If one wanted to create a Bitcoin-like system on top of TMSP, Tendermint Core would be responsible for</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Sharing blocks and transactions between nodes</li> <li _v-db453a86=\\\"\\\">Establishing a canonical/immutable order of transactions (the blockchain)</li> </ul> <p _v-db453a86=\\\"\\\">Meanwhile, the TMSP application would be responsible for</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Maintaining the UTXO database</li> <li _v-db453a86=\\\"\\\">Validating cryptographic signatures of transactions</li> <li _v-db453a86=\\\"\\\">Preventing transactions from spending non-existent transactions</li> <li _v-db453a86=\\\"\\\">Allowing clients to query the UTXO database.</li> </ul> <p _v-db453a86=\\\"\\\">Tendermint is able to decompose the blockchain design by offering a very simple API between the application process and consensus process.</p> <h2 id=cosmos-overview _v-db453a86=\\\"\\\">Cosmos Overview</h2> <p _v-db453a86=\\\"\\\">Cosmos is a network of independent parallel blockchains that are each powered by classical BFT consensus algorithms like Tendermint <a href=http://github.com/tendermint/tendermint _v-db453a86=\\\"\\\">1</a>.</p> <p _v-db453a86=\\\"\\\">The first blockchain in this network will be the Cosmos Hub. The Cosomos Hub connects to many other blockchains (or <em _v-db453a86=\\\"\\\">zones</em>) via a novel inter-blockchain communication protocol. The Cosmos Hub tracks numerous token types, and keeps record of the total number of tokens in each connected zone. Tokens can be transferred from one zone to another, securely and quickly, without the need for a liquid exchange between zones, because all inter-zone coin transfers go through the Cosmos Hub.</p> <p _v-db453a86=\\\"\\\">This architecture solves so many problems that the blockchain space faces today, including application interoperability, scalability, and seamless upgradability. For example, zones derived from Bitcoind, Go-Ethereum, CryptoNote, ZCash, or any blockchain system can be plugged into the Cosmos Hub. These zones allow Cosmos to scale infinitely to meet global transaction demand. And, zones are a great fit for a distributed exchange, which will be supported as well.</p> <p _v-db453a86=\\\"\\\">Cosmos is not just a single distributed ledger, and the Cosmos Hub isn't a walled garden or the center of its universe. We are designing a protocol for an open network of distributed legers that can serve as a new foundation for our future financial systems, based on principles of cryptography, sound economics, consensus theory, transparency, and accountability.</p> <h3 id=tendermint-bft-dpos _v-db453a86=\\\"\\\">Tendermint-BFT DPoS</h3> <p _v-db453a86=\\\"\\\">The Cosmos Hub is the first public blockchain in the Cosmos Network powered by Tendermint's BFT consensus algorithm. The Tendermint open-source project was born in 2014 to address the speed, scalability, and environmental issues of Bitcoin's proof-of-work consensus algorithm. By utilizing and improving upon proven BFT algorithms developed at MIT in 1988, the Tendermint team was first to conceptually demonstrate a proof-of-stake cryptocurrency that addresses the nothing-at-stake problem suffered by first-gen proof-of-stake cryptocurrencies such as NXT and BitShares.</p> <p _v-db453a86=\\\"\\\">Today, practically all Bitcoin mobile wallets use trusted servers to provide them with transaction verification. This is because proof-of-work requires waiting for many confirmations before a transaction can be considered irreversibly committed. Double-spend attacks have already been demonstrated on services like CoinBase.</p> <p _v-db453a86=\\\"\\\">Unlike other blockchain consensus systems, Tendermint offers instant and provably-secure mobile-client payment verification. Since the Tendermint is designed not to fork at all, mobile wallets can receive instant transaction confirmation, finally making trustless and practical payments a reality on your smartphone. This has significant ramifications for IoT applications as well.</p> <p _v-db453a86=\\\"\\\">Validators in Cosmos (who have a similar role to Bitcoin miners but instead use cryptographic signatures to vote) are meant to be secure, dedicated machines that are responsible for committing blocks. Non-validators can delegate their staking tokens (called \\\"atoms\\\") to any validator to earn a portion of block fees and atom rewards, but incur the risk of getting punished (slashed) if the delegate validator gets hacked or violates the protocol. The proven safety guarantees of Tendermint BFT consensus, and the collateral deposit of stakeholders (of validators and delegators) provide provable, quantifiable security for nodes and even light clients.</p> <h3 id=governance _v-db453a86=\\\"\\\">Governance</h3> <p _v-db453a86=\\\"\\\">Distributed public ledgers should have a constitution and a governance system. Bitcoin relies on the Bitcoin Foundation (to some degree) and mining to coordinate upgrades, but this is a slow process. Ethereum split into ETH and ETC after the hard-fork to address TheDAO hack, largely because there was no prior social contract nor mechanism for making such decisions.</p> <p _v-db453a86=\\\"\\\">Validators and delegators on the Cosmos Hub can vote on proposals that can change preset parameters of the system automatically (such as the block gas limit), coordinate upgrades, as well as vote on amendments to a human-readible constitution that govern the policies of the Cosmos Hub. The constitution allows for cohesion among the stakeholders on issues regarding issues of theft and bugs (such as TheDAO incident), allowing for quicker and cleaner resolution.</p> <p _v-db453a86=\\\"\\\">Each zone can also have their own constitution and governance mechanism as well. For example, the Cosmos Hub could have a constitution that enforces immutability at the Hub (no roll-backs, save for bugs of the Cosmos Hub node implementation), while each zone can set their own policies regarding roll-backs in the case of theft and bugs.</p> <p _v-db453a86=\\\"\\\">By enabling interoperability among differing policy zones, the Cosmos network gives the users ultimate freedom and potential for permissionless experimentation.</p> <h2 id=the-hub-and-zones _v-db453a86=\\\"\\\">The Hub and Zones</h2> <p _v-db453a86=\\\"\\\">Here we describe a novel model of decentralization and scalability. Cosmos is a network of many blockchains powered by Tendermint. While existing proposals aim to create a \\\"single blockchain\\\" with total global transaction ordering, Cosmos permits many blockchains to run concurrently with one another and yet retain interoperability.</p> <p _v-db453a86=\\\"\\\">At the basis, the Cosmos Hub manages many independent blockchains called \\\"zones\\\" (sometimes referred to as \\\"shards\\\", in reference to the database scaling technique known as \\\"sharding\\\"). A constant stream of recent block commits from zones posted on the hub allows the hub to keep up with the state of each zone. Likewise, each zone keeps up with the state of the hub (but zones do not keep up with each other except indirectly through the hub). Packets of information are then communicated from one zone to another by posting Merkle-proofs as evidence that the information was sent and received. This mechanism is called inter-blockchain communication, or IBC for short.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/images/hub_and_zones.png alt=\\\"Figure of hub and zones\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\">Any of the zones can themselves be hubs to form an acyclic graph, but for the sake of clarity we will only describe the simple configuration where there is only one hub, and many non-hub zones.</p> <h3 id=the-hub _v-db453a86=\\\"\\\">The Hub</h3> <p _v-db453a86=\\\"\\\">The Cosmos Hub is a blockchain that hosts a multi-asset distributed ledger, where tokens can be held by individual users or by zones themselves. These tokens can be moved from one zone to another in a special IBC packet called a \\\"coin packet\\\". The hub is responsible for preserving the global invariance of the total amount of each token across the zones. IBC coin packet transactions must be committed by the sender, hub, and receiver blockchains.</p> <p _v-db453a86=\\\"\\\">Since the Cosmos Hub acts as a central ledger of tokens for the whole system, the security of the hub is of paramount importance. While each zone may be a Tendermint blockchain that is secured by as few as 4 (or even less if BFT consensus is not needed), the hub must be secured by a globally decentralized set of validators that can withstand the most severe attack scenarios, such as a continental network partition or a nation-state sponsored attack.</p> <h3 id=the-zones _v-db453a86=\\\"\\\">The Zones</h3> <p _v-db453a86=\\\"\\\">A Cosmos zone is an independent blockchain that exchanges IBC messages with the Hub. From the Hub's perspective, a zone is a multi-asset dynamic-membership multi-signature account that can send and receive tokens using IBC packets. Like a cryptocurrency account, a zone cannot transfer more tokens than it has, but can receive tokens from others who have them. A zone may be designated as an \\\"source\\\" of one or more token types, granting it the power to inflate that token supply.</p> <p _v-db453a86=\\\"\\\">Atoms of the Cosmos Hub may be staked by validators of a zone connected to the hub. While double-spend attacks on these zones would result in the slashing of atoms with Tendermint's fork-accountability, a zone where +⅔ of the voting power are Byzantine can commit invalid state. The Cosmos Hub does not verify or execute transactions committed on other zones, so it is the responsibility of users to send tokens to zones that they trust. In the future, the Cosmos Hub's governance system may pass Hub improvement proposals that account for zone failures. For example, outbound token transfers from some (or all) zones may be throttled to allow for the emergency circuit-breaking of zones (a temporary halt of token transfers) when an attack is detected.</p> <h2 id=inter-blockchain-communication-ibc- _v-db453a86=\\\"\\\">Inter-blockchain Communication (IBC)</h2> <p _v-db453a86=\\\"\\\">Now we look at how the hub and zones communicate with each other. Say that there are three blockchains, \\\"Zone1\\\", \\\"Zone2\\\", and \\\"Hub\\\", and we wish for \\\"Zone1\\\" to produce a packet destined for \\\"Zone2\\\" going through \\\"Hub\\\". For a packet to move from one blockchain to another, a proof is posted on the receiving chain that the sending chain published a packet for the alleged destination. For the receiving chain to check this proof, it must be able keep up with the sender's block headers. This mechanism is similar to that used by sidechains, requiring two interacting chains to \\\"be aware\\\" of one another via a bidirectional stream of proof-of-existence datagrams (transactions).</p> <p _v-db453a86=\\\"\\\">The IBC protocol can naturally be defined using two types of transactions: an <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction, which allows a blockchain to prove to any observer of its most recent block-hash, and an <code _v-db453a86=\\\"\\\">IBCPacketTx</code> transaction, which allows a blockchain to prove to any observer that the given packet was indeed published by the sender's application via a Merkle-proof to the recent block-hash.</p> <p _v-db453a86=\\\"\\\">By splitting the IBC mechanics into two separate transactions <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code>, we allow the native fee market-mechanism of the receiving chain to determine which packets get committed (i.e. acknowledged), while allowing for complete freedom on the sending chain as to how many outbound packets are allowed.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_without_ack.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC without\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\"> In the example above, in order to update the block-hash of \\\"Zone1\\\" on \\\"Hub\\\" (or of \\\"Hub\\\" on \\\"Zone2\\\"), an <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction must be posted on \\\"Hub\\\" with the block-hash of \\\"Zone1\\\" (or on \\\"Zone2\\\" with the block-hash of \\\"Hub\\\").</p> <p _v-db453a86=\\\"\\\"><em _v-db453a86=\\\"\\\">See <a href=#ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</a> and <a href=#ibcpacketcommit _v-db453a86=\\\"\\\">IBCPacketTx</a> for for more information on the two IBC transaction types.</em></p> <h2 id=use-cases _v-db453a86=\\\"\\\">Use Cases</h2> <h3 id=pegging-to-other-cryptocurrencies _v-db453a86=\\\"\\\">Pegging to Other Cryptocurrencies</h3> <p _v-db453a86=\\\"\\\">A priveleged zone can act as the source of a pegged token of another cryptocurrency. A peg is in essence similar to the relationship between an Cosmos hub and zone; both must keep up with the latest blocks of the other in order to verify proofs that tokens have moved from one to the other. A peg-zone on the Cosmos network keeps up with both the hub as well as the other cryptocurrency. The indirection through the peg-zone allows the logic of the hub to remain simple and agnostic to other blockchain consensus strategies, like Bitcoin's proof-of-work mining.</p> <p _v-db453a86=\\\"\\\">For instance, a Cosmos zone with some validator set, possibly the same as that of the hub, could act as an ether-peg, where the TMSP-application on the zone (the \\\"peg-zone\\\") has mechanisms to exchange IBC messages with a peg-contract on the external Ethereum blockchain (the \\\"origin\\\"). This contract would allow ether holders to send ether to the peg-zone by sending it to the peg-contract on Ethereum. Once ether is received by the peg-contract, the ether cannot be withdrawn unless an appropriate IBC packet is received by the peg-contract from the peg-zone. When a peg-zone receives an IBC packet proving that ether was received in the peg-contract for a particular Ethereum account, a corresponding account is created on the peg-zone with that balance. Ether on the peg-zone (\\\"pegged-ether\\\") can then be transferred to and from the hub, and later be destroyed with a transaction that sends it to a particular withdrawal address on Ethereum; an IBC packet proving that the transaction occured on the peg-zone can be posted to the Ethereum peg-contract to allow the ether to be withdrawn.</p> <p _v-db453a86=\\\"\\\">Of course, the risk of such a pegging contract is a rogue validator set. ⅓+ Byzantine voting power could cause a fork, withdrawing ether from the peg-contract on Ethereum while keeping the pegged-ether on the peg-zone. Worse, +⅔ Byzantine voting power can steal ether outright from those who sent it to the peg-contract by deviating from the original pegging logic of the peg-zone.</p> <p _v-db453a86=\\\"\\\">It is possible to address these issues by designing the peg to be \\\"totally accountable\\\". For example, all IBC packets both from the hub as well as from the origin might require acknowledgement by the peg-zone in such a way that all state transitions of the peg-zone can be efficiently challenged and verified by either the hub or the origin's peg-contract. The hub and the origin should allow the peg-zone validators to post collateral, and token transfers out of the peg-contract should be delayed (and collateral unbonding period sufficiently long) to allow for any challenges to be made by independent auditors. We leave the design of the specification and implementation of this system open as a future Cosmos improvement proposal, to be passed by the Cosmos Hub's governance system.</p> <p _v-db453a86=\\\"\\\">While the socio-political atmosphere is not quite evolved enough yet, we can extend the mechanism to allow for zones which peg to the fiat currency of a nation states by forming a validator set out of some combination of institutions responsible for the nation's currency, most particularly, its banks. Of course, extra precautions must be made to only accept currencies backed by strong legal systems that can enforce auditability of the banks' activities by a sufficiently large group of trusted notaries and institutions.</p> <p _v-db453a86=\\\"\\\">A result of this integration would be, for instance, the ability of anyone with a bank account at a participating bank to move dollars from their bank account, which is on the zone, to other accounts on the zone, or to the hub, or to another zone entirely. In this regard, the Cosmos Hub can act as a seamless conduit between fiat currencies and cryptocurrencies, removing the barriers that have until now limitted their interoperabiltiy to the realm of exchanges.</p> <h3 id=ethereum-scaling _v-db453a86=\\\"\\\">Ethereum Scaling</h3> <p _v-db453a86=\\\"\\\">An open issue for Ethereum is how to solve the scaling problem. Currently, Ethereum nodes process every single transaction and also stores all the state. <a href=\\\"https://docs.google.com/presentation/d/1CjD0W4l4-CwHKUvfF5Vlps76fKLEC6pIwu1a_kC_YRQ/mobilepresent?slide=id.gd284b9333_0_28\\\" _v-db453a86=\\\"\\\">link</a>.</p> <p _v-db453a86=\\\"\\\">Since Tendermint can commit blocks much faster than Ethereum's proof-of-work, EVM zones powered by Tendermint consensus and operating on pegged-ether can provide higher performance to Ethereum blockchains. Additionally, though the Cosmos hub and IBC packet mechanics does not allow for arbitrary contract logic execution per se, it can be used to coordinate token movements between Ethereum contracts running on different zones, providing a foundation for token-centric Ethereum scaling via sharding.</p> <h3 id=multi-application-integration _v-db453a86=\\\"\\\">Multi-Application Integration</h3> <p _v-db453a86=\\\"\\\">Cosmos zones run arbitrary application logic, defined at the beginning of the zone's life, and potentially updated over time by governance. Such flexibility allows Cosmos zones to act as pegs to other cryptocurrencies, like Ethereum or Bitcoin, but it also permits derivatives of those blockchains, utilizing the same codebase but with a different validator set and initial distribution. This allows many existing cryptocurrency frameworks, such as that of Ethereum, Zerocash, Bitcoin, CryptoNote, and so on to be used with a higher performance consensus engine (Tendermint Core) on a common network, openning tremendous opportunity for interoperability across platforms. Furthermore, as a multi-asset blockchain, a single transaction may contain multiple inputs and outputs, where each input can be any token type, enabling Cosmos to serve directly as a platform for decentralized exchange, though orders are assumed to be matched via other platforms. Alternatively, a zone can serve as a distributed fault-tolerant exchange (with orderbooks), which can be a strict improvement over existing centralized cryptocurrency exchanges which tend to get hacked over time. </p> <p _v-db453a86=\\\"\\\">Zones can also serve as blockchain-backed versions of enterprise and government systems, where pieces of a particular service, traditionally run by an organization or group of organizations, are instead run as a TMSP application on a certain zone, allowing it to inherit the security and interoperability of the public Cosmos network, without sacrificing control over the underlying service. Thus, Cosmos may offer the best of both worlds for organizations looking to utilize blockchain technology that are wary of relinquishing control completely to a (distributed) third party.</p> <h3 id=network-partition-mitigation _v-db453a86=\\\"\\\">Network Partition Mitigation</h3> <p _v-db453a86=\\\"\\\">Some claim that a major problem with consistency-favouring consensus algorithms like Tendermint is that any network partition which causes there to be no single partition with +⅔ voting power (e.g. ⅓+ goign offline) will halt consensus altogether. The Cosmos architecture can mitigate this problem by using a global hub with regional autonomous zones, where voting power for each zone are distributed based on a common geographic region. For instance, a common paradigm may be for individual cities, or regions, to operate their own zones while sharing a common hub (e.g. the Cosmos Hub), enabling municipal activity to persist in the event that the hub halts due to a temporary network partition. Note that this allows real geological, political, and network-topological features to be considered in designing robust federated fault-tolerant systems.</p> <h3 id=federated-name-resolution-system _v-db453a86=\\\"\\\">Federated Name Resolution System</h3> <p _v-db453a86=\\\"\\\">NameCoin was one of the first blockchains to attempt to solve the name-resolution problem by adapting the Bitcoin blockchain. Unfortunately there have been several issues with this approach.</p> <p _v-db453a86=\\\"\\\">With Namecoin, we can verify that say, <em _v-db453a86=\\\"\\\">@satoshi</em> was registered with a particular public key at some point in the past, but we wouldn’t know whether the public key had since been updated recently unless we download all the blocks since the last update of that name. This is due to the limitation of Bitcoin's UTXO transaction Merkle-ization model where only the transactions (but not mutable application state) are Merkle-ized into the block-hash -- which lets us prove existence, but not the non-existence of later updates to a name. Thus, we can't know for certain the most recent value of a name without trusting a full node, or incurring significant costs in bandwidth by downloading the whole blockchain.</p> <p _v-db453a86=\\\"\\\">Even if a Merkle-ized search tree were implemented in NameCoin, its dependency on proof-of-work makes light client verification problematic. Light clients must download a complete copy of the headers for all blocks in the entire blockchain (or at least all the headers since the last update to a name). This means that the bandwidth requirements scale linearly with the amount of time <a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">[21]</a>. In addition, name-changes on a proof-of-work blockchain requires waiting for additional proof-of-work confirmation blocks, which can take up to an hour on Bitcoin.</p> <p _v-db453a86=\\\"\\\">With Tendermint, all we need is the most recent block-hash signed by a quorum of validators (by voting power), and a Merkle proof to the current value associated with the name. This makes it possible to have a succinct, quick, and secure light-client verification of name values.</p> <p _v-db453a86=\\\"\\\">In Cosmos, we can take this concept and extend it further. Each name-registration zone in Cosmos can have an associated top-level-domain (TLD) name such as \\\".com\\\" or \\\".org\\\", and each name-registration zone can have its own governance and registration rules.</p> <h2 id=issuance-and-incentives _v-db453a86=\\\"\\\">Issuance and Incentives</h2> <h3 id=the-atom-token _v-db453a86=\\\"\\\">The Atom Token</h3> <p _v-db453a86=\\\"\\\">While the Cosmos Hub is a multi-asset distributed ledger, there is a special native token called the <em _v-db453a86=\\\"\\\">atom</em>. Atoms are the only staking token of the Cosmos Hub. Atoms are a license for the holder to vote, validate, or delegate to other validators. Like Ethereum's ether, atoms can also be used to pay for transaction fees to mitigate spam. Additional inflationary atoms and block transaction fees are rewarded to validators and delegators who delegate to validators.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">BurnAtomTx</code> transaction can be used to recover any proportionate amount of tokens from the reserve pool.</p> <h4 id=crowdfund _v-db453a86=\\\"\\\">Crowdfund</h4> <p _v-db453a86=\\\"\\\">The initial distribution of atom tokens and validators on Genesis will go to the funders of the Cosmos Crowdsale (75%), pre-funders (5%), and Cosmos Corp (20%). From genesis onward, 1/3 of the total amount of atoms will be rewarded to bonded validators and delegators every year.</p> <p _v-db453a86=\\\"\\\">See the <a href=https://github.com/cosmos/cosmos/blob/master/PLAN.md _v-db453a86=\\\"\\\">Crowdfund Plan</a> for additional details.</p> <h4 id=vesting _v-db453a86=\\\"\\\">Vesting</h4> <p _v-db453a86=\\\"\\\">To prevent the crowdfund from attracting short-term speculators only interested in a pump-and-dump scheme, the genesis atoms will not be transferrable until they have vested. Each account will vest atoms over a period of 2 years at a constant rate every hour, determined by the total number of genesis atoms / (2 <em _v-db453a86=\\\"\\\"> 365 </em> 24) hours. Atoms earned by the inflationary block reward are pre-vested, and can be transferred immediately, so bonded validators and delegators can earn more than 1/2 of their genesis atoms after the first year.</p> <h3 id=limitations-on-the-number-of-validators _v-db453a86=\\\"\\\">Limitations on the Number of Validators</h3> <p _v-db453a86=\\\"\\\">Unlike Bitcoin or other proof-of-work blockchains, a Tendermint blockchain gets slower with more validators due to the increased communication complexity. Fortunately, we can support enough validators to make for a robust globally distributed blockchain with very fast transaction confirmation times, and, as bandwidth, storage, and parallel compute capacity increases, we will be able to support more validators in the future.</p> <p _v-db453a86=\\\"\\\">On genesis day, the maximum number of validators will be set to 100, and this number will increase at a rate of 13% for 10 years, and settle at 300 validators.</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Year 0: 100\\nYear 1: 113\\nYear 2: 127\\nYear 3: 144\\nYear 4: 163\\nYear 5: 184\\nYear 6: 208\\nYear 7: 235\\nYear 8: 265\\nYear 9: 300\\nYear 10: 300\\n...\\n</code></pre><h3 id=becoming-a-validator-after-genesis-day _v-db453a86=\\\"\\\">Becoming a Validator After Genesis Day</h3> <p _v-db453a86=\\\"\\\">Atom holders who are not already validators can become one by signing and submitting a <code _v-db453a86=\\\"\\\">BondTx</code> transaction. The amount of atoms provided as collateral must be nonzero. Anyone can become a validator at any time, except when the size of the current validator set is greater than the maximum number of validators allowed. In that case, the transaction is only valid if the amount of atoms is greater than the amount of effective atoms held by the smallest validator, where effective atoms include delegated atoms. When a new validator replaces an existing validator in such a way, the existing validator becomes inactive and all the atoms and delegated atoms enter the unbonding state.</p> <h3 id=penalties-for-validators _v-db453a86=\\\"\\\">Penalties for Validators</h3> <p _v-db453a86=\\\"\\\">There must be some penalty imposed on the validators for when they intentionally or unintentionally deviate from the sanctioned protocol. Some evidence is immediately admissible, such as a double-sign at the same height and round, or a violation of \\\"prevote-the-lock\\\" (a rule of the Tendermint consensus protocol). Such evidence will result in the validator losing its good standing and its bonded atoms as well its proportionate share of tokens in the reserve pool -- collectively called its \\\"stake\\\" -- will get slashed.</p> <p _v-db453a86=\\\"\\\">Sometimes, validators will not be available, either due to regional network disruptions, power failure, or other reasons. If, at any point in the past <code _v-db453a86=\\\"\\\">ValidatorTimeoutWindow</code> blocks, a validator's commit vote is not included in the blockchain more than <code _v-db453a86=\\\"\\\">ValidatorTimeoutMaxAbsent</code> times, that validator will become inactive, and lose <code _v-db453a86=\\\"\\\">ValidatorTimeoutPenalty</code> (DEFAULT 1%) of its stake.</p> <p _v-db453a86=\\\"\\\">Some \\\"malicious\\\" behavior do not produce obviously discernable evidence on the blockchain. In these cases, the validators can coordinate out of band to force the timeout of these malicious validators, if there is a supermajority consensus.</p> <p _v-db453a86=\\\"\\\">In situations where the Cosmos Hub halts due to a ⅓+ coalition of voting power going offline, or in situations where a ⅓+ coalition of voting power censor evidence of malicious behavior from entering the blockchain, the hub must recover with a hard-fork reorg-proposal. (Link to \\\"Forks and Censorship Attacks\\\").</p> <h3 id=transaction-fees _v-db453a86=\\\"\\\">Transaction Fees</h3> <p _v-db453a86=\\\"\\\">Cosmos Hub validators can accept any token type or combination of types as a fee for processing a transaction. Each validator can subjectively set whatever exchange rate it wants, and choose whatever transactions it wants, as long as the <code _v-db453a86=\\\"\\\">BlockGasLimit</code> is not exceeded. The collected fees minus any taxes specified below are redistributed to the bonded stakeholders in proportion to their bonded atoms, every <code _v-db453a86=\\\"\\\">ValidatorPayoutPeriod</code> (DEFAULT 1 hour).</p> <p _v-db453a86=\\\"\\\">Of the collected transaction fees, <code _v-db453a86=\\\"\\\">ReserveTax</code> (DEFAULT 2%) will go toward the reserve pool to increase the reserve pool and increase the security and value of the Cosmos network. Also, a <code _v-db453a86=\\\"\\\">CommonsTax</code> (DEFAULT 3%) will go toward the funding of common goods. These funds will go to the <code _v-db453a86=\\\"\\\">CustodianAddress</code> to be distributed in accordance with whatever is decided by the governance system.</p> <p _v-db453a86=\\\"\\\">Atom holders who delegate their voting power to other validators pay a commission to the delegated validator. The commission can be set by each validator.</p> <h3 id=incentivizing-hackers _v-db453a86=\\\"\\\">Incentivizing Hackers</h3> <p _v-db453a86=\\\"\\\">The security of the Cosmos Hub is a function of the security of the underlying validators and the choice of delegation by delegators. In order to encourage the discovery and early reporting of found vulnerabilities, the Cosmos Hub encourages hackers to publish successful exploits via a <code _v-db453a86=\\\"\\\">ReportHackTx</code> transaction that essentially says, \\\"This validator got hacked. Please send bounty to this address\\\". Upon such an exploit, the validator and delegators will become inactive, <code _v-db453a86=\\\"\\\">HackPunishmentRatio</code> (default 5%) of everyone's atoms will get slashed, and <code _v-db453a86=\\\"\\\">HackRewardRatio</code> (default 5%) of everyone's atoms will get rewarded to the hacker's bounty address. The validator must recover the remaining atoms by using their backup key.</p> <p _v-db453a86=\\\"\\\">In order to prevent this feature from being abused to transfer unvested atoms, the portion of vested vs unvested atoms of validators and delegators before and after the <code _v-db453a86=\\\"\\\">ReportHackTx</code> will remain the same, and the hacker bounty will include some unvested atoms, if any.</p> <h2 id=governance _v-db453a86=\\\"\\\">Governance</h2> <p _v-db453a86=\\\"\\\">The Cosmos Hub is operated by a distributed organization that requires a well defined governance mechanism in order to coordinate various changes to the blockchain, such as the variable parameters of the system, as well as software upgrades and constitutional amendments.</p> <p _v-db453a86=\\\"\\\">All validators are responsible for voting on all proposals. Failing to vote on a proposal in a timely manner will result in the validator becoming inactivated automatically for a period of time called the <code _v-db453a86=\\\"\\\">AbsenteeismPenaltyPeriod</code> (DEFAULT 1 week).</p> <p _v-db453a86=\\\"\\\">Delegators automatically inherit the vote of the delegated validator. This vote may be overridden manually. Unbonded atoms get no vote.</p> <p _v-db453a86=\\\"\\\">Each proposal requires a deposit of <code _v-db453a86=\\\"\\\">MinimumProposalDeposit</code> tokens, which may be a combination one or more tokens including atoms. For each proposal, the voters may vote to take the deposit. If more than half of the voters choose to take the deposit (e.g. because the proposal was spam), the deposit goes to the reserve pool, except any atoms which are burned.</p> <p _v-db453a86=\\\"\\\">For each proposal, voters may vote with the following options:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Yay</li> <li _v-db453a86=\\\"\\\">YayWithForce</li> <li _v-db453a86=\\\"\\\">Nay</li> <li _v-db453a86=\\\"\\\">NayWithForce</li> <li _v-db453a86=\\\"\\\">Abstain</li> </ul> <p _v-db453a86=\\\"\\\">A strict majority of Yay or YayWithForce votes (or Nay or NayWithForce votes) is required for the proposal to be decided as accepted (or decided as failed), but 1/3+ can veto the majority decision by voting \\\"with force\\\". When a strict majority is vetoed, everyone gets punished by losing <code _v-db453a86=\\\"\\\">VetoPenaltyFeeBlocks</code> (DEFAULT 1 day's worth of blocks) worth of fees (except taxes which will not be affected), and the party that vetoed the majority decision will be additionally punished by losing <code _v-db453a86=\\\"\\\">VetoPenaltyAtoms</code> (DEFAULT 0.1%) of its atoms.</p> <h3 id=parameter-change-proposal _v-db453a86=\\\"\\\">Parameter Change Proposal</h3> <p _v-db453a86=\\\"\\\">Any of the parameters defined here can be changed with the acceptance of a <code _v-db453a86=\\\"\\\">ParameterChangeProposal</code>.</p> <h3 id=text-proposal _v-db453a86=\\\"\\\">Text Proposal</h3> <p _v-db453a86=\\\"\\\">All other proposals, such as a proposal to upgrade the protocol, will be coordinated via the generic <code _v-db453a86=\\\"\\\">TextProposal</code>.</p> <h2 id=roadmap _v-db453a86=\\\"\\\">Roadmap</h2> <p _v-db453a86=\\\"\\\">See <a href=https://github.com/cosmos/cosmos/blob/master/PLAN.md _v-db453a86=\\\"\\\">the Plan</a>.</p> <h2 id=related-work _v-db453a86=\\\"\\\">Related Work</h2> <p _v-db453a86=\\\"\\\">There have been many innovations in blockchain consensus and scalability in the past couple of years. This section provides a brief survey of a select number of important ones.</p> <h3 id=consensus-systems _v-db453a86=\\\"\\\">Consensus Systems</h3> <h4 id=classic-byzantine-fault-tolerance _v-db453a86=\\\"\\\">Classic Byzantine Fault Tolerance</h4> <p _v-db453a86=\\\"\\\">Consensus in the presence of malicious participants is a problem dating back to the early 80s, when Leslie Lamport coined the phrase \\\"Byzantine fault\\\" to refer to arbitrary process behavior that deviates from the intended behavior, in contrast to a \\\"crash fault\\\", wherein a process simply crashes. Early solutions were discovered for synchronous networks where there is an upper bound on message latency, though pratical use was limited to highly controlled environments such as airplane controllers and datacenters synchronized via atomic clocks. It was not until the late 90s that Practical Byzantine Fault Tolerance (PBFT) <a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">[11]</a> was introduced as an efficient partially synchronous consensus algorithm able to tolerate up to ⅓ of processes behaving arbitrarily. PBFT became the standard algorithm, spawning many variations, including most recently by IBM as part of their contribution to Hyperledger.</p> <p _v-db453a86=\\\"\\\">The main benefit of Tendermint consensus over PBFT is that Tendermint has an improved and simplified underlying structure, some of which is a result of embracing the blockchain paradigm. Tendermint blocks must commit in order, which obviates the complexity and communication overhead associated with PBFT's view-changes. In Cosmos and many cryptocurrencies, there is no need to allow for block <em _v-db453a86=\\\"\\\">N+i</em> where <em _v-db453a86=\\\"\\\">i &gt;= 1</em> to commit, when block <em _v-db453a86=\\\"\\\">N</em> itself hasn't yet committed. If bandwidth is the reason why block <em _v-db453a86=\\\"\\\">N</em> hasn't committed in a Cosmos zone, then it doesn't help to use bandwidth sharing votes for blocks <em _v-db453a86=\\\"\\\">N+i</em>. If a network partition or offline nodes is the reason why block <em _v-db453a86=\\\"\\\">N</em> hasn't committed, then <em _v-db453a86=\\\"\\\">N+i</em> won't commit anyway.</p> <p _v-db453a86=\\\"\\\">In addition, the batching of transactions into blocks allows for regular Merkle-hashing of the application state, rather than periodic digests as with PBFT's checkpointing scheme. This allows for faster provable transaction commits for light-clients and faster inter-blockchain communication.</p> <p _v-db453a86=\\\"\\\">Tendermint Core also includes many optimizations and features that go above and beyond what is specified in PBFT. For example, the blocks proposed by validators are split into parts, Merkle-ized, and gossipped in such a way that improves broadcasting performance (see LibSwift <a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">[19]</a> for inspiration). Also, Tendermint Core doesn't make any assumption about point-to-point connectivity, and functions for as long as the P2P network is weakly connected.</p> <h4 id=bitshares-delegated-stake _v-db453a86=\\\"\\\">BitShares delegated stake</h4> <p _v-db453a86=\\\"\\\">While not the first to deploy proof-of-stake (PoS), BitShares <a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">[12]</a> contributed considerably to research and adoption of PoS blockchains, particularly those known as \\\"delegated\\\" PoS. In BitShares, stake holders elect \\\"witnesses\\\", responsible for ordering and committing transactions, and \\\"delegates\\\", responsible for co-ordinating software updates and parameter changes. Though BitShares achieves high performance (100k tx/s, 1s latency) in ideal conditions, it is subject to double spend attacks by malicious witnesses which fork the blockchain without suffering an explicit economic punishment -- it suffers from the \\\"nothing-at-stake\\\" problem. BitShares attempts to mitigate the problem by allowing transactions to refer to recent block-hashes. Additionally, stakeholders can remove or replace misbehaving witnesses on a daily basis, though this does nothing to explicitly punish a double-spend attack that was successful.</p> <h4 id=stellar _v-db453a86=\\\"\\\">Stellar</h4> <p _v-db453a86=\\\"\\\">Building on an approach pioneered by Ripple, Stellar <a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">[13]</a> refined a model of Federated Byzantine Agreement wherein the processes participating in consensus do not constitute a fixed and globally known set. Rather, each process node curates one or more \\\"quorum slices\\\" each constituting a set of trusted processes. A \\\"quorum\\\" in Stellar is defined to be a set of nodes that contain (is a superset of) at least one quorum slice for each node in the set, such that agreement can be reached.</p> <p _v-db453a86=\\\"\\\">The security of the Stellar mechanism relies on the assumption that the intersection of <em _v-db453a86=\\\"\\\">any</em> two quorums is non-empty, while the availability of a node requires at least one of its quorum slices to consist entirely of correct nodes, creating a trade-off between using large or small quorum-slices that may be difficult to balance without imposing significant assumptions about trust. Ultimately, nodes must somehow choose adequate quorum slices for there to be sufficient fault-tolerance (or any \\\"intact nodes\\\" at all, of which much of the results of the paper depend on), and the only provided strategy for ensuring such a configuration is heirarchical and similar to the Border Gateway Protocol (BGP), used by top-tier ISPs on the internet to establish global routing tables, and by that used by browsers to manage TLS certificates; both notorious for their insecurity.</p> <p _v-db453a86=\\\"\\\">The criticism in the Stellar paper of the Tendermint-based proof-of-stake systems is mitigated by the token strategy described here, wherein a new type of token called the <em _v-db453a86=\\\"\\\">atom</em> is issued that represent claims to future portions of fees and rewards. The advantage of Tendermint-based proof-of-stake, then, is its relative simplicity, while still providing sufficient, and provable security guarantees.</p> <h4 id=bitcoinng _v-db453a86=\\\"\\\">BitcoinNG</h4> <p _v-db453a86=\\\"\\\">BitcoinNG is a proposed improvement to Bitcoin that would allow for forms of vertical scalability, such as increasing the block size, without the negative economic consequences typically associated with such a change, such as the disproportionately large impact on small miners. This improvement is achieved by separating leader election from transaction broadcast: leaders are first elected by proof-of-work in \\\"micro-blocks\\\", and then able to broadcast transactions to be committed until a new micro-block is found. This reduces the bandwidth requirements necessary to win the PoW race, allowing small miners to more fairly compete, and allowing transactions to be committed more regularly by the last miner to find a micro-block.</p> <h4 id=casper _v-db453a86=\\\"\\\">Casper</h4> <p _v-db453a86=\\\"\\\">Casper <a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">[16]</a> is a proposed proof-of-stake consensus algorithm for Ethereum. Its prime mode of operation is \\\"consensus-by-bet\\\". The idea is that by letting validators iteratively bet on which block it believes will become committed into the blockchain based on the other bets that it's seen so far, finality can be achieved eventually. <a href=https://blog.ethereum.org/2015/12/28/understanding-serenity-part-2-casper/ _v-db453a86=\\\"\\\">link</a>. This is an active area of research by the Casper team. The challenge is in constructing a betting mechanism that can be proven to be an evolutionarily stable strategy. The main benefit of Casper as compared to Tendermint may be in offering \\\"availability over consistency\\\" -- consensus does not require a +⅔ quorum of voting power -- perhaps at the cost of commit speed or implementation complexity.</p> <h3 id=horizontal-scaling _v-db453a86=\\\"\\\">Horizontal Scaling</h3> <h4 id=interledger-protocol _v-db453a86=\\\"\\\">Interledger Protocol</h4> <p _v-db453a86=\\\"\\\">The Interledger protocol <a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">[14]</a> is not strictly a scalability solution. It provides an adhoc interoperation between different ledger systems through a loosely coupled bilateral relationship network. Like the Lightning Network, the purpose of ILP is to facilitate payments, but it specifically focuses on payments across disparate ledger types, and extends the atomic transaction mechanism to include not only hash-locks, but also a quroum of notaries (called the Atomic Transport Protocol). The latter mechanism for enforcing atomicity in inter-ledger transactions is similar to Tendermint's light-client SPV echanism, so an illustration of the distinction between ILP and Cosmos/IBC is warranted, and provided below.</p> <ol _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The notaries of a connector in ILP does not support membership changes, and does not allow for flexible weighting between notaries. On the other hand, IBC is designed specifically for blockchains, where validators can have different weights, and where membership can change over the course of the blockchain.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">As in the Lightning Network, the receiver of payment in ILP must online to send a confirmation back to the sender. In a token transfer over IBC, the validator-set of the receiver's blockchain is responsible for providing confirmation, not the receiving user.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The most striking difference is that ILP's connectors are not responsible or keeping authoritative state about payments, whereas in Cosmos, the validators of a hub are the authority of the state of IBC token transfers as well as the authority of the amount of tokens held by each zone (but not the amount of tokens held by each account within a zone). This is he fundamental innovation that allows for secure asymmetric tranfer of tokens from zone to zone; the analog to ILP's connector in Cosmos is a persistent and maximally secure blockchain ledger, the Cosmos Hub.</p> </li> <li _v-db453a86=\\\"\\\"><p _v-db453a86=\\\"\\\">The inter-ledger payments in ILP need to be backed by an exchange orderbook, as there is no asymmetric transfer of coins from one ledger to another, only the transfer of value or market equivalents.</p> </li> </ol> <h4 id=sidechains _v-db453a86=\\\"\\\">Sidechains</h4> <p _v-db453a86=\\\"\\\">Sidechains <a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">[15]</a> are a proposed mechanism for scaling the Bitcoin network via alternative blockchains that are \\\"pegged\\\" to the Bitcoin blockchain. Sidechains allow bitcoins to effectively move from the Bitcoin blockchain to the sidechain and back, and allow for experimentation in new features on the sidechain. As in the Cosmos Hub, the sidechain and Bitcoin serve as light-clients of each other, using SPV proofs to determine when coins should be transferred to the sidechain and back. Of course, since Bitcoin uses proof-of-work, sidechains centered around Bitcoin suffer from the many problems and risks of proof-of-work as a consensus mechanism. Furthermore, this is a Bitcoin-maximalist solution that doesn't natively support a variety of tokens and inter-zone network topology as Cosmos does. That said, the core mechanism of the two-way peg is in principle the same as that employed by the Cosmos network.</p> <h4 id=ethereum-scalability-efforts _v-db453a86=\\\"\\\">Ethereum Scalability Efforts</h4> <p _v-db453a86=\\\"\\\">Ethereum is currently researching a number of different strategies to shard the state of the Ethereum blockchain to address scalability needs. These efforts have the goal of maintaining the abstraction layer offered by the current Ethereum Virtual Machine across the shared state space. Multiple research efforts are underway at this time. <a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">[18]</a><a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">[22]</a></p> <h5 id=cosmos-vs-ethereum-2-0-mauve _v-db453a86=\\\"\\\">Cosmos vs Ethereum 2.0 Mauve</h5> <p _v-db453a86=\\\"\\\">Cosmos and Ethereum 2.0 Mauve <a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">[22]</a> have different design goals.</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\">Cosmos is specifically about tokens. Mauve is about scaling general computation.</li> <li _v-db453a86=\\\"\\\">Cosmos is not bound to the EVM, so even different VMs can interoperate.</li> <li _v-db453a86=\\\"\\\">Cosmos lets the zone creator determine who validates the zone.</li> <li _v-db453a86=\\\"\\\">Anyone can start a new zone in Cosmos (unless governance decides otherwise).</li> <li _v-db453a86=\\\"\\\">The hub isolates zone failures so global token invariants are preserved.</li> </ul> <h3 id=general-scaling _v-db453a86=\\\"\\\">General Scaling</h3> <h4 id=lightning-network _v-db453a86=\\\"\\\">Lightning Network</h4> <p _v-db453a86=\\\"\\\">The Lightning Network is a proposed token transfer network operating at a layer above the Bitcoin blockchain (and other public blockchains), enabling many orders of magnitude improvement in transaction throughput by moving the majority of transactions outside of the consensus ledger into so-called \\\"payment channels\\\". This is made possible by on-chain cryptocurrency scripts, which enables parties to enter into bilateral stateful contracts where the state can be updated by sharing digital signatures, and contracts can be closed by finally publishing evidence onto the blockchain, a mechanism first popularized by cross-chain atomic swaps. By openning payment channels with many parties, participants in the Lightning Network can become focal points for routing the payments of others, leading to a fully connected payment channel network, at the cost of capital being tied up on payment channels.</p> <p _v-db453a86=\\\"\\\">While the Lightning Network can also easily extend across multiple independent blockchains to allow for the transfer of <em _v-db453a86=\\\"\\\">value</em> via an exchange market, it cannot be used to assymetrically transfer <em _v-db453a86=\\\"\\\">tokens</em> from one blockchain to another. The main benefit of the Cosmos network described here is to enable such direct token transfers. That said, we expect payment channels and the Lightning Network to become widely adopted along with our token transfer mechanism, for cost-saving and privacy reasons.</p> <h4 id=segregated-witness _v-db453a86=\\\"\\\">Segregated Witness</h4> <p _v-db453a86=\\\"\\\">Segregated Witness is a Bitcoin improvement proposal <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">link</a> that aims to increase the per-block tranasction throughput 2X or 3X, while simultaneously making block syncing faster for new nodes. The brilliance of this solution is in how it works within the limitations of Bitcoin's current protocol and allows for a soft-fork upgrade (i.e. clients with older versions of the software will continue to function after the upgrade). Tendermint being a new protocol has no design restrictions, so it has a different scaling priorities. Primarily, Tendermint uses a BFT round-robin algorithm based on cryptographic signatures instead of mining, which trivially allows horizontal scaling through multiple parallel blockchains, while regular, more frequent block commits allow for vertical scaling as well.</p> <hr _v-db453a86=\\\"\\\"> <h2 id=appendix _v-db453a86=\\\"\\\">Appendix</h2> <h3 id=fork-accountability _v-db453a86=\\\"\\\">Fork Accountability</h3> <p _v-db453a86=\\\"\\\">A well designed consensus protocol should provide some guarantees in the event that the tolerance capacity is exceeded and the consensus fails. This is especially necessary in economic systems, where Byzantine behaviour can have substantial financial reward. The most important such guarantee is a form of <em _v-db453a86=\\\"\\\">fork-accountability</em>, where the processes that caused the consensus to fail (ie. caused clients of the protocol to accept different values - a fork) can be identified and punished according to the rules of the protocol, or, possibly, the legal system. When the legal system is unreliable or excessively expensive to invoke, validators can be forced to make security deposits in order to participate, and those deposits can be revoked, or slashed, when malicious behaviour is detected <a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">[10]</a>.</p> <p _v-db453a86=\\\"\\\">Note this is much unlike Bitcoin, where forking is a regular occurence due to network asynchrony and the probabilistic nature of finding partial hash collissions. Since in many cases, a malicious fork is indistinguishable from a fork due to asynchrony, Bitcoin can not reliably implement fork-accountability, other than the implicit opportunity cost paid by miners for mining an orphaned block.</p> <h3 id=tendermint-consensus _v-db453a86=\\\"\\\">Tendermint Consensus</h3> <p _v-db453a86=\\\"\\\">We call the voting stages <em _v-db453a86=\\\"\\\">PreVote</em> and <em _v-db453a86=\\\"\\\">PreCommit</em>. A vote can be for a particular block or for <em _v-db453a86=\\\"\\\">Nil</em>. We call a collection of +⅔ PreVotes for a single block in the same round a <em _v-db453a86=\\\"\\\">Polka</em>, and a collection of +⅔ PreCommits for a single block in the same round a <em _v-db453a86=\\\"\\\">Commit</em>. If +⅔ PreCommit for Nil in the same round, they move to the next round.</p> <p _v-db453a86=\\\"\\\">Note that strict determinism in the protocol incurs a weak synchrony assumption as faulty leaders must be detected and skipped. Thus, validators wait some amount of time <em _v-db453a86=\\\"\\\">TimeoutPropose</em> before they Prevote Nil, and the value of TimeoutPropose increases with each round. Progression through the rest of a round is fully asychronous, in that progress is only made once a validator hears from +⅔ of the network. In practice, it would take an extremely strong adversary to indefinetely thwart the weak synchrony assumption (causing the consensus to fail to ever commit a block), and doing so can be made even more difficult by using randomized values of TimeoutPropose on each validator.</p> <p _v-db453a86=\\\"\\\">An additional set of constraints, or Locking Rules, ensure that the network will eventually commit just one block at each height. Any malicious attempt to cause more than one block to be committed at a given height can be identified. First, a PreCommit for a block must come with justification, in the form of a Polka for that block. If the validator has already PreCommit a block at round <em _v-db453a86=\\\"\\\">R_1</em>, we say they are <em _v-db453a86=\\\"\\\">locked</em> on that block, and the Polka used to justify the new PreCommit at round <em _v-db453a86=\\\"\\\">R_2</em> must come in a round <em _v-db453a86=\\\"\\\">R_polka</em> where <em _v-db453a86=\\\"\\\">R_1 &lt; R_polka &lt;= R_2</em>. Second, validators must Propose and/or PreVote the block they are locked on. Together, these conditions ensure that a validator does not PreCommit without sufficient evidence as justification, and that validators which have already PreCommit cannot contribute to evidence to PreCommit something else. This ensures both safety and liveness of the consensus algorithm.</p> <p _v-db453a86=\\\"\\\">The full details of the protocol are described <a href=https://github.com/tendermint/tendermint/wiki/Byzantine-Consensus-Algorithm _v-db453a86=\\\"\\\">here</a>.</p> <h3 id=tendermint-light-clients _v-db453a86=\\\"\\\">Tendermint Light Clients</h3> <p _v-db453a86=\\\"\\\">The need to sync all block headers is eliminated in Tendermint-PoS as the existence of an alternative chain (a fork) means ⅓+ of bonded stake can be slashed. Of course, since slashing requires that <em _v-db453a86=\\\"\\\">someone</em> share evidence of a fork, light clients should store any block-hash commits that it sees. Additionally, light clients could periodically stay synced with changes to the validator set, in order to avoid <a href=#preventing-long-range-attacks _v-db453a86=\\\"\\\">long range attacks</a> (but other solutions are possible).</p> <p _v-db453a86=\\\"\\\">In spirit similar to Ethereum, Tendermint enables applications to embed a global Merkle root hash in each block, allowing easily verifiable state queries for things like account balances, the value stored in a contract, or the existence of an unspent transaction output, depending on the nature of the application.</p> <h3 id=preventing-long-range-attacks _v-db453a86=\\\"\\\">Preventing Long Range Attacks</h3> <p _v-db453a86=\\\"\\\">Assuming a sufficiently resilient collection of broadcast networks and a static validator set, any fork in the blockchain can be detected and the deposits of the offending validators slashed. This innovation, first suggested by Vitalik Buterin in early 2014, solves the nothing-at-stake problem of other proof-of-stake cryptocurrencies (see <a href=#related-work _v-db453a86=\\\"\\\">Related Work</a>). However, since validator sets must be able to change, over a long range of time the original validators may all become unbonded, and hence would be free to create a new chain, from the genesis block, incurring no cost as they no longer have deposits locked up. This attack came to be known as the Long Range Attack (LRA) in contrast to a Short Range Attack, where validators who are currently bonded cause a fork and are hence punishable (assuming a fork-accountable BFT algorithm like Tendermint consensus). Long Range Attacks are often thought to be a critical blow to proof-of-stake.</p> <p _v-db453a86=\\\"\\\">Fortunately, the LRA can be mitigated as follows. First, for a validator to unbond (thereby recovering their collateral deposit and no longer earning fees to participate in the consensus), the deposit must be made untransferable for an amount of time known as the \\\"unbonding period\\\", which may be on the order of weeks or months. Second, for a light client to be secure, the first time it connects to the network it must verify a recent block-hash against a trusted source, or preferably multiple of them. This condition is sometimes referred to as \\\"weak subjectivity\\\". Finally, to remain secure, it must sync up with the latest validator set at least as frequently as the length of the unbonding period. This ensures that the light client knows about changes to the validator set before a validator has its capital unbonded and thus no longer at stake, which would allow it to deceive the client by carrying out a long range attack by creating new blocks beginning back at a height where it was bonded (assuming it has control of sufficiently many of the early private keys).</p> <p _v-db453a86=\\\"\\\">Note that overcoming the LRA in this way requires an overhaul of the original security model of proof-of-work. In PoW, it is assumed that a light client can sync to the current height from the trusted genesis block at any time simply by processing the proof-of-work in every block header. To overcome the LRA, however, we require that a light client come online with some regularity to track changes in the validator set, and that the first time they come online they must be particularly careful to authenticate what they hear from the network against trusted sources. Of course, this latter requirement is similar to that of Bitcoin, where the protocol and software must also be obtained from a trusted source.</p> <p _v-db453a86=\\\"\\\">The above method for preventing LRA is well suited for validators and full nodes of a Tendermint-powered blockchain because these nodes are meant to remain connected to the network. The method is also suitable for light clients that can be expected to sync with the network frequently. However, for light clients that are not expected to have frequent access to the internet or the blockchain network, yet another solution can be used to overcome the LRA. Non-validator token holders can post their tokens as collateral with a very long unbonding period (e.g. much longer than the unbonding period for validators) and serve light clients with a secondary method of attesting to the validity of current and past block-hashes. While these tokens do not count toward the security of the blockchain's consensus, they nevertheless can provide strong guarantees for light clients. If historical block-hash querying were supported in Ethereum, anyone could bond their tokens in a specially designed smart contract and provide attestation services for pay, effectively creating a market for light-client LRA security.</p> <h3 id=overcoming-forks-and-censorship-attacks _v-db453a86=\\\"\\\">Overcoming Forks and Censorship Attacks</h3> <p _v-db453a86=\\\"\\\">Due to the definition of a block commit, any ⅓+ coalition of voting power can halt the blockchain by going offline or not broadcasting their votes. Such a coalition can also censor particular transactions by rejecting blocks that include these transactions, though this would result in a significant proportion of block proposals to be rejected, which would slow down the rate of block commits of the blockchain, reducing its utility and value. The malicious coalition might also broadcast votes in a trickle so as to grind blockchain block commits to a near halt, or engage in any combination of these attacks. Finally, it can cause the blockchain to fork, by double-signing or violating the locking rules.</p> <p _v-db453a86=\\\"\\\">If a global active adversary were also involved, it can partition the network in such a way that it may appear that the wrong subset of validators were responsible for the slowdown. This is not just a limitation of Tendermint, but rather a limitation of all consensus protocols whose network is potentially controlled by an active adversary.</p> <p _v-db453a86=\\\"\\\">For these types of attacks, a subset of the validators should coordinate through external means to sign a reorg-proposal that chooses a fork (and any evidence thereof) and the initial subset of validators with their signatures. Validators who sign such a reorg-proposal forego their collateral on all other forks. Clients should verify the signatures on the reorg-proposal, verify any evidence, and make a judgement or prompt the end-user for a decision. For example, a phone wallet app may prompt the user with a security warning, while a refrigerator may accept any reorg-proposal signed by +½ of the original validators by voting power.</p> <p _v-db453a86=\\\"\\\">No non-synchronous Byzantine fault-tolerant algorithm can come to consensus when ⅓+ of voting power are dishonest, yet a fork assumes that ⅓+ of voting power have already been dishonest by double-signing or lock-changing without justification. So, signing the reorg-proposal is a coordination problem that cannot be solved by any non-synchronous protocol (i.e. automatically, and without making assumptions about the reliability of the underlying network). For now, we leave the problem of reorg-proposal coordination to human coordination via social consensus on internet media. Validators must take care to ensure that there are no remaining network partitions prior to signing a reorg-proposal, to avoid situations where two conflicting reorg-proposals are signed.</p> <p _v-db453a86=\\\"\\\">Assuming that the external coordination medium and protocol is robust, it follows that forks are less of a concern than censorship attacks.</p> <p _v-db453a86=\\\"\\\">In addition to forks and censorship, which require ⅓+ Byzantine voting power, a coalition of +⅔ voting power may commit arbitrary, invalid state. This is characteristic of any (BFT) consensus system. Unlike double-signing, which creates forks with easily verifiable evidence, detecting committment of an invalid state requires non-validating peers to verify whole blocks, which implies that they keep a local copy of the state and execute each transaction, computing the state root independently for themselves. Once detected, the only way to handle such a failure is via social consensus. For instance, in situations where Bitcoin has failed, whether forking due to software bugs (as in March 2013), or committing invalid state due to Byzantine behavior of miners (as in July 2015), the well connected community of businesses, developers, miners, and other organizations established a social consensus as to what manual actions were required by participants to heal the network. Furthermore, since validators of a Tendermint blockchain may be expected to be identifiable, commitment of an invalid state may even be punishable by law or some external jurisprudence, if desired.</p> <h3 id=tmsp-specification _v-db453a86=\\\"\\\">TMSP specification</h3> <p _v-db453a86=\\\"\\\">TMSP consists of 3 primary message types that get delivered from the core to the application. The application replies with corresponding response messages.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">AppendTx</code> message is the work horse of the application. Each transaction in the blockchain is delivered with this message. The application needs to validate each transactions received with the AppendTx message against the current state, application protocol, and the cryptographic credentials of the transaction. A validated transaction then needs to update the application state — by binding a value into a key values store, or by updating the UTXO database.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">CheckTx</code> message is similar to AppendTx, but it’s only for validating transactions. Tendermint Core’s mempool first checks the validity of a transaction with CheckTx, and only relays valid transactions to its peers. Applications may check an incrementing nonce in the transaction and return an error upon CheckTx if the nonce is old.</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">Commit</code> message is used to compute a cryptographic commitment to the current application state, to be placed into the next block header. This has some handy properties. Inconsistencies in updating that state will now appear as blockchain forks which catches a whole class of programming errors. This also simplifies the development of secure lightweight clients, as Merkle-hash proofs can be verified by checking against the block-hash, and the block-hash is signed by a quorum of validators (by voting power).</p> <p _v-db453a86=\\\"\\\">Additional TMSP messages allow the application to keep track of and change the validator set, and for the application to receive the block information, such as the height and the commit votes. </p> <p _v-db453a86=\\\"\\\">TMSP requests/responses are simple Protobuf messages. Check out the <a href=https://github.com/tendermint/tmsp/blob/master/types/types.proto _v-db453a86=\\\"\\\">schema file</a>.</p> <h4 id=appendtx _v-db453a86=\\\"\\\">AppendTx</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The request transaction bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: Result bytes, if any</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Append and run a transaction. If the transaction is valid, returns CodeType.OK</li> </ul> <h4 id=checktx _v-db453a86=\\\"\\\">CheckTx</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The request transaction bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: Result bytes, if any</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Validate a transaction. This message should not mutate the state. Transactions are first run through CheckTx before broadcast to peers in the mempool layer. You can make CheckTx semi-stateful and clear the state upon <code _v-db453a86=\\\"\\\">Commit</code> or <code _v-db453a86=\\\"\\\">BeginBlock</code>, to allow for dependent sequences of transactions in the same block.</li> </ul> <h4 id=commit _v-db453a86=\\\"\\\">Commit</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The Merkle root hash</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Return a Merkle root hash of the application state.</li> </ul> <h4 id=query _v-db453a86=\\\"\\\">Query</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The query request bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Code (uint32)</code>: Response code</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The query response bytes</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> </ul> <h4 id=flush _v-db453a86=\\\"\\\">Flush</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Flush the response queue. Applications that implement <code _v-db453a86=\\\"\\\">types.Application</code> need not implement this message -- it's handled by the project.</li> </ul> <h4 id=info _v-db453a86=\\\"\\\">Info</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Data ([]byte)</code>: The info bytes</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Return information about the application state. Application specific.</li> </ul> <h4 id=setoption _v-db453a86=\\\"\\\">SetOption</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Key (string)</code>: Key to set</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Value (string)</code>: Value to set for key</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Log (string)</code>: Debug or error message</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Set application options. E.g. Key=\\\"mode\\\", Value=\\\"mempool\\\" for a mempool connection, or Key=\\\"mode\\\", Value=\\\"consensus\\\" for a consensus connection. Other options are application specific.</li> </ul> <h4 id=initchain _v-db453a86=\\\"\\\">InitChain</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Validators ([]Validator)</code>: Initial genesis-validators</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Called once upon genesis</li> </ul> <h4 id=beginblock _v-db453a86=\\\"\\\">BeginBlock</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Height (uint64)</code>: The block height that is starting</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Signals the beginning of a new block. Called prior to any AppendTxs.</li> </ul> <h4 id=endblock _v-db453a86=\\\"\\\">EndBlock</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Arguments</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Height (uint64)</code>: The block height that ended</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Returns</strong>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Validators ([]Validator)</code>: Changed validators with new voting powers (0 to remove)</li> </ul> </li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Usage</strong>:<br _v-db453a86=\\\"\\\"> Signals the end of a block. Called prior to each Commit after all transactions</li> </ul> <p _v-db453a86=\\\"\\\">See <a href=https://github.com/tendermint/tmsp#message-types _v-db453a86=\\\"\\\">the TMSP repository</a> for more details.</p> <h3 id=ibc-packet-delivery-acknowledgement _v-db453a86=\\\"\\\">IBC Packet Delivery Acknowledgement</h3> <p _v-db453a86=\\\"\\\">There are several reasons why a sender may want the acknowledgement of delivery of a packet by the receiving chain. For example, the sender may not know the status of the destination chain, if it is expected to be faulty. Or, the sender may want to impose a timeout on the packet (with the <code _v-db453a86=\\\"\\\">MaxHeight</code> packet field), while any destination chain may suffer from a denial-of-service attack with a sudden spike in the number of incoming packets.</p> <p _v-db453a86=\\\"\\\">In these cases, the sender can require delivery acknowledgement by setting the initial packet status to <code _v-db453a86=\\\"\\\">AckPending</code>. Then, it is the receiving chain's responsibility to confirm delivery by including an abbreviated<code _v-db453a86=\\\"\\\">IBCPacket</code> in the app Merkle hash.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC with\\nacknowledgement\\\" _v-db453a86=\\\"\\\"></p> <p _v-db453a86=\\\"\\\">First, an <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted on \\\"Hub\\\" that proves the existence of an <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Zone1\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 100 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckPending</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350 (say \\\"Hub\\\" is currently at height 300)</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload</code>: &lt;The bytes of a \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Next, an <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted on \\\"Zone2\\\" that proves the existence of an <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Hub\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Hub\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 300</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckPending</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload</code>: &lt;The same bytes of a \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Next, \\\"Zone2\\\" must include in its app-hash an abbreviated packet that shows the new status of <code _v-db453a86=\\\"\\\">AckSent</code>. An <code _v-db453a86=\\\"\\\">IBCBlockCommit</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code> are posted back on \\\"Hub\\\" that proves the existence of an abbreviated <code _v-db453a86=\\\"\\\">IBCPacket</code> on \\\"Zone2\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 400 (say)</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckSent</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash</code>: &lt;The hash bytes of the same \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Finally, \\\"Hub\\\" must update the status of the packet from <code _v-db453a86=\\\"\\\">AckPending</code> to <code _v-db453a86=\\\"\\\">AckReceived</code>. Evidence of this new finalized status should go back to \\\"Zone2\\\". Say that <code _v-db453a86=\\\"\\\">IBCPacketTx</code> has the following value:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID</code>: \\\"Hub\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight</code>: 301</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet</code>: an <code _v-db453a86=\\\"\\\">IBCPacket</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header</code>: an <code _v-db453a86=\\\"\\\">IBCPacketHeader</code>:<ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID</code>: \\\"Zone1\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID</code>: \\\"Zone2\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number</code>: 200</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status</code>: <code _v-db453a86=\\\"\\\">AckReceived</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type</code>: \\\"coin\\\"</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight</code>: 350</li> </ul> </li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash</code>: &lt;The hash bytes of the same \\\"coin\\\" payload&gt;</li> </ul> </li> </ul> <p _v-db453a86=\\\"\\\">Meanwhile, \\\"Zone1\\\" may optimistically assume successful delivery of a \\\"coin\\\" packet unless evidence to the contrary is proven on \\\"Hub\\\". In the example above, if \\\"Hub\\\" had not received an <code _v-db453a86=\\\"\\\">AckSent</code> status from \\\"Zone2\\\" by block 350, it would have set the status automatically to <code _v-db453a86=\\\"\\\">Timeout</code>. This evidence of a timeout can get posted back on \\\"Zone1\\\", and any tokens can be returned.</p> <p _v-db453a86=\\\"\\\"><img src=https://raw.githubusercontent.com/gnuclear/atom-whitepaper/master/msc/ibc_with_ack_timeout.png alt=\\\"Figure of Zone1, Zone2, and Hub IBC with acknowledgement and\\ntimeout\\\" _v-db453a86=\\\"\\\"></p> <h3 id=merkle-tree-proof-specification _v-db453a86=\\\"\\\">Merkle Tree &amp; Proof Specification</h3> <p _v-db453a86=\\\"\\\">There are two types of Merkle trees supported in the Tendermint/Cosmos ecosystem: The Simple Tree, and the IAVL+ Tree.</p> <h4 id=simple-tree _v-db453a86=\\\"\\\">Simple Tree</h4> <p _v-db453a86=\\\"\\\">The Simple Tree is a Merkle tree for a static list of elements. If the number of items is not a power of two, some leaves will be at different levels. Simple Tree tries to keep both sides of the tree the same height, but the left may be one greater. This Merkle tree is used to Merkle-ize the transactions of a block, and the top level elements of the application state root.</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">                *\\n               / \\\\\\n             /     \\\\\\n           /         \\\\\\n         /             \\\\\\n        *               *\\n       / \\\\             / \\\\\\n      /   \\\\           /   \\\\\\n     /     \\\\         /     \\\\\\n    *       *       *       h6\\n   / \\\\     / \\\\     / \\\\\\n  h0  h1  h2  h3  h4  h5\\n\\n  A SimpleTree with 7 elements\\n</code></pre><h4 id=iavl-tree _v-db453a86=\\\"\\\">IAVL+ Tree</h4> <p _v-db453a86=\\\"\\\">The purpose of the IAVL+ data structure is to provide persistent storage for key-value pairs in the application state such that a deterministic Merkle root hash can be computed efficiently. The tree is balanced using a variant of the <a href=http://en.wikipedia.org/wiki/AVL_tree _v-db453a86=\\\"\\\">AVL algortihm</a>, and all operations are O(log(n)).</p> <p _v-db453a86=\\\"\\\">In an AVL tree, the heights of the two child subtrees of any node differ by at most one. Whenever this condition is violated upon an update, the tree is rebalanced by creating O(log(n)) new nodes that point to unmodified nodes of the old tree. In the original AVL algorithm, inner nodes can also hold key-value pairs. The AVL+ algorithm (note the plus) modifies the AVL algorithm to keep all values on leaf nodes, while only using branch-nodes to store keys. This simplifies the algorithm while keeping the merkle hash trail short.</p> <p _v-db453a86=\\\"\\\">The AVL+ Tree is analogous to Ethereum's <a href=http://en.wikipedia.org/wiki/Radix_tree _v-db453a86=\\\"\\\">Patricia tries</a>. There are tradeoffs. Keys do not need to be hashed prior to insertion in IAVL+ trees, so this provides faster ordered iteration in the key space which may benefit some applications. The logic is simpler to implement, requiring only two types of nodes -- inner nodes and leaf nodes. The Merkle proof is on average shorter, being a balanced binary tree. On the other hand, the Merkle root of an IAVL+ tree depends on the order of updates.</p> <p _v-db453a86=\\\"\\\">We will support additional efficient Merkle trees, such as Ethereum's Patricia Trie when the binary variant becomes available.</p> <h3 id=transaction-types _v-db453a86=\\\"\\\">Transaction Types</h3> <p _v-db453a86=\\\"\\\">In the canonical implementation, transactions are streamed to the Cosmos hub application via the TMSP interface.</p> <p _v-db453a86=\\\"\\\">The Cosmos Hub will accept a number of primary transaction types, including <code _v-db453a86=\\\"\\\">SendTx</code>, <code _v-db453a86=\\\"\\\">BondTx</code>, <code _v-db453a86=\\\"\\\">UnbondTx</code>, <code _v-db453a86=\\\"\\\">ReportHackTx</code>, <code _v-db453a86=\\\"\\\">SlashTx</code>, <code _v-db453a86=\\\"\\\">BurnAtomTx</code>, <code _v-db453a86=\\\"\\\">ProposalCreateTx</code>, and <code _v-db453a86=\\\"\\\">ProposalVoteTx</code>, which are fairly self-explanatory and will be documented in a future revision of this paper. Here we document the two primary transaction types for IBC: <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> and <code _v-db453a86=\\\"\\\">IBCPacketTx</code>.</p> <h4 id=ibcblockcommittx _v-db453a86=\\\"\\\">IBCBlockCommitTx</h4> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCBlockCommitTx</code> transaction is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ChainID (string)</code>: The ID of the blockchain</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockHash ([]byte)</code>: The block-hash bytes, the Merkle root which includes the app-hash</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockPartsHeader (PartSetHeader)</code>: The block part-set header bytes, only needed to verify vote signatures</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockHeight (int)</code>: The height of the commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">BlockRound (int)</code>: The round of the commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Commit ([]Vote)</code>: The +⅔ Tendermint <code _v-db453a86=\\\"\\\">Precommit</code> votes that comprise a block commit</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ValidatorsHash ([]byte)</code>: A Merkle-tree root hash of the new validator set</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">ValidatorsHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the <code _v-db453a86=\\\"\\\">ValidatorsHash</code> against the <code _v-db453a86=\\\"\\\">BlockHash</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">AppHash ([]byte)</code>: A IAVLTree Merkle-tree root hash of the application state</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">AppHashProof (SimpleProof)</code>: A SimpleTree Merkle-proof for proving the <code _v-db453a86=\\\"\\\">AppHash</code> against the <code _v-db453a86=\\\"\\\">BlockHash</code></li> </ul> <h4 id=ibcpackettx _v-db453a86=\\\"\\\">IBCPacketTx</h4> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacket</code> is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Header (IBCPacketHeader)</code>: The packet header</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Payload ([]byte)</code>: The bytes of the packet payload. <em _v-db453a86=\\\"\\\">Optional</em></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PayloadHash ([]byte)</code>: The hash for the bytes of the packet. <em _v-db453a86=\\\"\\\">Optional</em></li> </ul> <p _v-db453a86=\\\"\\\">Either one of <code _v-db453a86=\\\"\\\">Payload</code> or <code _v-db453a86=\\\"\\\">PayloadHash</code> must be present. The hash of an <code _v-db453a86=\\\"\\\">IBCPacket</code> is a simple Merkle root of the two items, <code _v-db453a86=\\\"\\\">Header</code> and <code _v-db453a86=\\\"\\\">Payload</code>. An <code _v-db453a86=\\\"\\\">IBCPacket</code> without the full payload is called an <em _v-db453a86=\\\"\\\">abbreviated packet</em>.</p> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacketHeader</code> is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">SrcChainID (string)</code>: The source blockchain ID</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">DstChainID (string)</code>: The destination blockchain ID</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Number (int)</code>: A unique number for all packets</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Status (enum)</code>: Can be one of <code _v-db453a86=\\\"\\\">AckPending</code>, <code _v-db453a86=\\\"\\\">AckSent</code>, <code _v-db453a86=\\\"\\\">AckReceived</code>, <code _v-db453a86=\\\"\\\">NoAck</code>, or <code _v-db453a86=\\\"\\\">Timeout</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Type (string)</code>: The types are application-dependent. Cosmos reserves the \\\"coin\\\" packet type</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">MaxHeight (int)</code>: If status is not <code _v-db453a86=\\\"\\\">NoAckWanted</code> or <code _v-db453a86=\\\"\\\">AckReceived</code> by this height, status becomes <code _v-db453a86=\\\"\\\">Timeout</code>. <em _v-db453a86=\\\"\\\">Optional</em></li> </ul> <p _v-db453a86=\\\"\\\">An <code _v-db453a86=\\\"\\\">IBCPacketTx</code> transaction is composed of:</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromChainID (string)</code>: The ID of the blockchain which is providing this packet; not necessarily the source</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">FromBlockHeight (int)</code>: The blockchain height in which the following packet is included (Merkle-ized) in the block-hash of the source chain</li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">Packet (IBCPacket)</code>: A packet of data, whose status may be one of <code _v-db453a86=\\\"\\\">AckPending</code>, <code _v-db453a86=\\\"\\\">AckSent</code>, <code _v-db453a86=\\\"\\\">AckReceived</code>, <code _v-db453a86=\\\"\\\">NoAck</code>, or <code _v-db453a86=\\\"\\\">Timeout</code></li> <li _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">PacketProof (IAVLProof)</code>: A IAVLTree Merkle-proof for proving the packet's hash against the <code _v-db453a86=\\\"\\\">AppHash</code> of the source chain at given height</li> </ul> <p _v-db453a86=\\\"\\\">The sequence for sending a packet from \\\"Zone1\\\" to \\\"Zone2\\\" through the \\\"Hub\\\" is depicted in {Figure X}. First, an <code _v-db453a86=\\\"\\\">IBCPacketTx</code> proves to \\\"Hub\\\" that the packet is included in the app-state of \\\"Zone1\\\". Then, another <code _v-db453a86=\\\"\\\">IBCPacketTx</code> proves to \\\"Zone2\\\" that the packet is included in the app-state of \\\"Hub\\\". During this procedure, the <code _v-db453a86=\\\"\\\">IBCPacket</code> fields are identical: the <code _v-db453a86=\\\"\\\">SrcChainID</code> is always \\\"Zone1\\\", and the <code _v-db453a86=\\\"\\\">DstChainID</code> is always \\\"Zone2\\\".</p> <p _v-db453a86=\\\"\\\">The <code _v-db453a86=\\\"\\\">PacketProof</code> must have the correct Merkle-proof path, as follows:</p> <pre _v-db453a86=\\\"\\\"><code _v-db453a86=\\\"\\\">IBC/&lt;SrcChainID&gt;/&lt;DstChainID&gt;/&lt;Number&gt;\\n</code></pre><p _v-db453a86=\\\"\\\">When \\\"Zone1\\\" wants to send a packet to \\\"Zone2\\\" through \\\"Hub\\\", the <code _v-db453a86=\\\"\\\">IBCPacket</code> data are identical whether the packet is Merkle-ized on \\\"Zone1\\\", the \\\"Hub\\\", or \\\"Zone2\\\". The only mutable field is <code _v-db453a86=\\\"\\\">Status</code> for tracking delivery, as shown below.</p> <h2 id=acknowledgements _v-db453a86=\\\"\\\">Acknowledgements</h2> <p _v-db453a86=\\\"\\\">We thank our friends and peers for assistance in conceptualizing, reviewing, and providing support for our work with Tendermint and Cosmos.</p> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://github.com/zmanian _v-db453a86=\\\"\\\">Zaki Manian</a> of <a href=https://www.skuchain.com/ _v-db453a86=\\\"\\\">SkuChain</a> provided much help in formatting and wording, especially under the TMSP section</li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/jtremback _v-db453a86=\\\"\\\">Jehan Tremback</a> of Althea and Dustin Byington for helping with initial iterations</li> <li _v-db453a86=\\\"\\\"><a href=http://soc1024.com/ _v-db453a86=\\\"\\\">Andrew Miller</a> of <a href=https://eprint.iacr.org/2016/199 _v-db453a86=\\\"\\\">Honey Badger</a> for feedback on consensus</li> <li _v-db453a86=\\\"\\\"><a href=https://fixingtao.com/ _v-db453a86=\\\"\\\">Greg Slepak</a> for feedback on consensus and wording</li> <li _v-db453a86=\\\"\\\">Also thanks to <a href=https://github.com/gleim _v-db453a86=\\\"\\\">Bill Gleim</a> and <a href=http://www.seunghwanhan.com _v-db453a86=\\\"\\\">Seunghwan Han</a> for various contributions.</li> <li _v-db453a86=\\\"\\\"><strong _v-db453a86=\\\"\\\">Your name and organization here for your contribution</strong></li> </ul> <h2 id=citations _v-db453a86=\\\"\\\">Citations</h2> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">1</a> Bitcoin: <a href=https://bitcoin.org/bitcoin.pdf _v-db453a86=\\\"\\\">https://bitcoin.org/bitcoin.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">2</a> ZeroCash: <a href=http://zerocash-project.org/paper _v-db453a86=\\\"\\\">http://zerocash-project.org/paper</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">3</a> Ethereum: <a href=https://github.com/ethereum/wiki/wiki/White-Paper _v-db453a86=\\\"\\\">https://github.com/ethereum/wiki/wiki/White-Paper</a></li> <li _v-db453a86=\\\"\\\"><a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">4</a> TheDAO: <a href=https://download.slock.it/public/DAO/WhitePaper.pdf _v-db453a86=\\\"\\\">https://download.slock.it/public/DAO/WhitePaper.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">5</a> Segregated Witness: <a href=https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki _v-db453a86=\\\"\\\">https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki</a></li> <li _v-db453a86=\\\"\\\"><a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">6</a> BitcoinNG: <a href=https://arxiv.org/pdf/1510.02037v2.pdf _v-db453a86=\\\"\\\">https://arxiv.org/pdf/1510.02037v2.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">7</a> Lightning Network: <a href=https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf _v-db453a86=\\\"\\\">https://lightning.network/lightning-network-paper-DRAFT-0.5.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">8</a> Tendermint: <a href=https://github.com/tendermint/tendermint/wiki _v-db453a86=\\\"\\\">https://github.com/tendermint/tendermint/wiki</a></li> <li _v-db453a86=\\\"\\\"><a href=https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf _v-db453a86=\\\"\\\">9</a> FLP Impossibility: <a href=https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf _v-db453a86=\\\"\\\">https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">10</a> Slasher: <a href=https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/ _v-db453a86=\\\"\\\">https://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/</a></li> <li _v-db453a86=\\\"\\\"><a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">11</a> PBFT: <a href=http://pmg.csail.mit.edu/papers/osdi99.pdf _v-db453a86=\\\"\\\">http://pmg.csail.mit.edu/papers/osdi99.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">12</a> BitShares: <a href=https://bitshares.org/technology/delegated-proof-of-stake-consensus/ _v-db453a86=\\\"\\\">https://bitshares.org/technology/delegated-proof-of-stake-consensus/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">13</a> Stellar: <a href=https://www.stellar.org/papers/stellar-consensus-protocol.pdf _v-db453a86=\\\"\\\">https://www.stellar.org/papers/stellar-consensus-protocol.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">14</a> Interledger: <a href=https://interledger.org/rfcs/0001-interledger-architecture/ _v-db453a86=\\\"\\\">https://interledger.org/rfcs/0001-interledger-architecture/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">15</a> Sidechains: <a href=https://blockstream.com/sidechains.pdf _v-db453a86=\\\"\\\">https://blockstream.com/sidechains.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">16</a> Casper: <a href=https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/ _v-db453a86=\\\"\\\">https://blog.ethereum.org/2015/08/01/introducing-casper-friendly-ghost/</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">17</a> TMSP: <a href=https://github.com/tendermint/tmsp _v-db453a86=\\\"\\\">https://github.com/tendermint/tmsp</a></li> <li _v-db453a86=\\\"\\\"><a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">18</a> Ethereum Sharding: <a href=https://github.com/ethereum/EIPs/issues/53 _v-db453a86=\\\"\\\">https://github.com/ethereum/EIPs/issues/53</a></li> <li _v-db453a86=\\\"\\\"><a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">19</a> LibSwift: <a href=http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf _v-db453a86=\\\"\\\">http://www.ds.ewi.tudelft.nl/fileadmin/pds/papers/PerformanceAnalysisOfLibswift.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">20</a> DLS: <a href=http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf _v-db453a86=\\\"\\\">http://groups.csail.mit.edu/tds/papers/Lynch/jacm88.pdf</a></li> <li _v-db453a86=\\\"\\\"><a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">21</a> Thin Client Security: <a href=https://en.bitcoin.it/wiki/Thin_Client_Security _v-db453a86=\\\"\\\">https://en.bitcoin.it/wiki/Thin_Client_Security</a></li> <li _v-db453a86=\\\"\\\"><a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">22</a> Ethereum 2.0 Mauve Paper: <a href=http://vitalik.ca/files/mauve_paper.html _v-db453a86=\\\"\\\">http://vitalik.ca/files/mauve_paper.html</a></li> </ul> <h4 id=unsorted-links _v-db453a86=\\\"\\\">Unsorted links</h4> <ul _v-db453a86=\\\"\\\"> <li _v-db453a86=\\\"\\\"><a href=https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html _v-db453a86=\\\"\\\">https://www.docdroid.net/ec7xGzs/314477721-ethereum-platform-review-opportunities-and-challenges-for-private-and-consortium-blockchains.pdf.html</a></li> </ul> </div> <section class=section-default _v-db453a86=\\\"\\\"><div class=section-container _v-db453a86=\\\"\\\"> <countdown _v-db453a86=\\\"\\\"></countdown> </div></section> \";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-db453a86!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/pages/WhitePaper.vue\n ** module id = 153\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../node_modules/vue-loader/lib/style-rewriter.js!stylus-loader?sourceMap!./../node_modules/vue-loader/lib/selector.js?type=style&index=0!./App.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../node_modules/vue-loader/lib/selector.js?type=script&index=0!./App.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../node_modules/vue-loader/lib/selector.js?type=template&index=0!./App.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/App.vue\n ** module id = 154\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-7bfd996a&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Arrow.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Arrow.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-7bfd996a!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Arrow.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/Arrow.vue\n ** module id = 155\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-da38f26a&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./CosmosHubSmall.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./CosmosHubSmall.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-da38f26a!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./CosmosHubSmall.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/CosmosHubSmall.vue\n ** module id = 156\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-50acc47d&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./MultipleHubs.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./MultipleHubs.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-50acc47d!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./MultipleHubs.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/MultipleHubs.vue\n ** module id = 157\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-891d9bfe&scoped=true!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./SectionCover.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./SectionCover.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-891d9bfe!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./SectionCover.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/SectionCover.vue\n ** module id = 158\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js!stylus-loader?sourceMap!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Zone.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Zone.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Zone.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/Zone.vue\n ** module id = 159\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-6057bba8&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./FAQ.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./FAQ.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-6057bba8!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./FAQ.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/pages/FAQ.vue\n ** module id = 160\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-75a39e68&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Index.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Index.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-75a39e68!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Index.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/pages/Index.vue\n ** module id = 161\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-3ada8d83&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Plan.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Plan.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-3ada8d83!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Plan.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/pages/Plan.vue\n ** module id = 162\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-db453a86&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./WhitePaper.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./WhitePaper.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-db453a86!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./WhitePaper.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/pages/WhitePaper.vue\n ** module id = 163\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-66840978&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Footer.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Footer.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-66840978!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Footer.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/site/Footer.vue\n ** module id = 164\n ** module chunks = 2\n **/","var __vue_script__, __vue_template__\nrequire(\"!!./../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"extract\\\":true,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!./../../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-241f4194&scoped=true!stylus-loader?sourceMap!./../../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Header.vue\")\n__vue_script__ = require(\"!!babel-loader?presets[]=es2015&plugins[]=transform-runtime&comments=false!./../../../node_modules/vue-loader/lib/selector.js?type=script&index=0!./Header.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../node_modules/vue-loader/lib/template-rewriter.js?id=_v-241f4194!./../../../node_modules/vue-loader/lib/selector.js?type=template&index=0!./Header.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/components/site/Header.vue\n ** module id = 165\n ** module chunks = 2\n **/"],"sourceRoot":""}